"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var workspace_uri_contribution_1 = require("./workspace-uri-contribution");
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var workspace_service_1 = require("./workspace-service");
var filesystem_1 = require("@theia/filesystem/lib/common/filesystem");
var chai_1 = require("chai");
var test_1 = require("@theia/filesystem/lib/common/test");
var labelProvider;
var MockWorkspaceService = /** @class */ (function () {
    function MockWorkspaceService() {
    }
    Object.defineProperty(MockWorkspaceService.prototype, "roots", {
        get: function () {
            var stat = {
                uri: 'file:///workspace',
                lastModification: 0,
                isDirectory: true,
            };
            return Promise.resolve([stat]);
        },
        enumerable: true,
        configurable: true
    });
    MockWorkspaceService = __decorate([
        inversify_1.injectable()
    ], MockWorkspaceService);
    return MockWorkspaceService;
}());
beforeEach(function () {
    var module = new inversify_1.ContainerModule(function (bind) {
        bind(workspace_uri_contribution_1.WorkspaceUriLabelProviderContribution).toSelf().inSingletonScope();
        bind(workspace_service_1.IWorkspaceService).to(MockWorkspaceService).inSingletonScope();
        bind(filesystem_1.FileSystem).to(test_1.MockFilesystem);
    });
    var container = new inversify_1.Container();
    container.load(module);
    labelProvider = container.get(workspace_uri_contribution_1.WorkspaceUriLabelProviderContribution);
});
describe('getLongName', function () {
    it('should trim workspace for a file in workspace', function () {
        var file = new uri_1.default('file:///workspace/some/very-long/path.js');
        var longName = labelProvider.getLongName(file);
        chai_1.expect(longName).eq('some/very-long/path.js');
    });
    it('should not trim workspace for a file not in workspace', function () {
        var file = new uri_1.default('file:///tmp/prout.txt');
        var longName = labelProvider.getLongName(file);
        chai_1.expect(longName).eq('/tmp/prout.txt');
    });
    it('should not trim workspace for a file not in workspace 2', function () {
        // Test with a path that is textually a prefix of the workspace,
        // but is not really a child in the filesystem.
        var file = new uri_1.default('file:///workspace-2/jacques.doc');
        var longName = labelProvider.getLongName(file);
        chai_1.expect(longName).eq('/workspace-2/jacques.doc');
    });
});
//# sourceMappingURL=workspace-uri-contribution.spec.js.map