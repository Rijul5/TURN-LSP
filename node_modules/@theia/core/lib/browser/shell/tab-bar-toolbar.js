"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var widgets_1 = require("../widgets");
var label_parser_1 = require("../label-parser");
var contribution_provider_1 = require("../../common/contribution-provider");
var disposable_1 = require("../../common/disposable");
var command_1 = require("../../common/command");
/**
 * Factory for instantiating tab-bar toolbars.
 */
exports.TabBarToolbarFactory = Symbol('TabBarToolbarFactory');
/**
 * Tab-bar toolbar widget representing the active [tab-bar toolbar items](TabBarToolbarItem).
 */
var TabBarToolbar = /** @class */ (function (_super) {
    __extends(TabBarToolbar, _super);
    function TabBarToolbar(commandService, labelParser) {
        var _this = _super.call(this) || this;
        _this.commandService = commandService;
        _this.labelParser = labelParser;
        _this.items = new Map();
        _this.toDisposeOnUpdate = new disposable_1.DisposableCollection();
        _this.toDispose.push(disposable_1.Disposable.create(function () { return _this.removeItems(); }));
        _this.addClass(TabBarToolbar.Styles.TAB_BAR_TOOLBAR);
        _this.addClass(TabBarToolbar.Styles.TAB_BAR_TOOLBAR_HIDDEN);
        return _this;
    }
    TabBarToolbar.prototype.updateItems = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var copy = items.slice().sort(TabBarToolbarItem.PRIORITY_COMPARATOR).reverse();
        if (this.areSame(copy, Array.from(this.items.keys()))) {
            return;
        }
        this.toDisposeOnUpdate.dispose();
        this.removeItems();
        this.createItems.apply(this, __spread(copy));
    };
    TabBarToolbar.prototype.removeItems = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.items.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var element = _c.value;
                var parentElement = element.parentElement;
                if (parentElement) {
                    parentElement.removeChild(element);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.items.clear();
    };
    TabBarToolbar.prototype.createItems = function () {
        var _this = this;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var e_2, _a;
        var _loop_1 = function (item) {
            var e_3, _a;
            var itemContainer = document.createElement('div');
            itemContainer.classList.add(TabBarToolbar.Styles.TAB_BAR_TOOLBAR_ITEM);
            var _loop_2 = function (labelPart) {
                var _a;
                var child = document.createElement('div');
                var listener = function () { return _this.commandService.executeCommand(item.command.id); };
                child.addEventListener('click', listener);
                this_1.toDisposeOnUpdate.push(disposable_1.Disposable.create(function () { return itemContainer.removeEventListener('click', listener); }));
                if (typeof labelPart !== 'string' && label_parser_1.LabelIcon.is(labelPart)) {
                    var className = "fa fa-" + labelPart.name + (labelPart.animation ? ' fa-' + labelPart.animation : '');
                    (_a = child.classList).add.apply(_a, __spread(className.split(' ')));
                }
                else {
                    child.innerText = labelPart;
                }
                if (item.tooltip) {
                    child.title = item.tooltip;
                }
                itemContainer.appendChild(child);
            };
            try {
                for (var _b = __values(this_1.labelParser.parse(item.text)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var labelPart = _c.value;
                    _loop_2(labelPart);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this_1.node.appendChild(itemContainer);
            this_1.items.set(item, itemContainer);
        };
        var this_1 = this;
        try {
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var item = items_1_1.value;
                _loop_1(item);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (this.items.size === 0) {
            this.addClass(TabBarToolbar.Styles.TAB_BAR_TOOLBAR_HIDDEN);
        }
        else {
            this.removeClass(TabBarToolbar.Styles.TAB_BAR_TOOLBAR_HIDDEN);
        }
    };
    /**
     * `true` if `left` and `right` contains the same items in the same order. Otherwise, `false`.
     * We consider two items the same, if the IDs of the corresponding items are the same.
     */
    TabBarToolbar.prototype.areSame = function (left, right) {
        if (left.length === right.length) {
            for (var i = 0; i < left.length; i++) {
                if (left[0].id !== right[0].id) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    return TabBarToolbar;
}(widgets_1.BaseWidget));
exports.TabBarToolbar = TabBarToolbar;
(function (TabBarToolbar) {
    var Styles;
    (function (Styles) {
        Styles.TAB_BAR_TOOLBAR = 'p-TabBar-toolbar';
        Styles.TAB_BAR_TOOLBAR_ITEM = 'item';
        Styles.TAB_BAR_TOOLBAR_HIDDEN = 'hidden';
    })(Styles = TabBarToolbar.Styles || (TabBarToolbar.Styles = {}));
})(TabBarToolbar = exports.TabBarToolbar || (exports.TabBarToolbar = {}));
exports.TabBarToolbar = TabBarToolbar;
/**
 * Clients should implement this interface if they want to contribute to the tab-bar toolbar.
 */
exports.TabBarToolbarContribution = Symbol('TabBarToolbarContribution');
var TabBarToolbarItem;
(function (TabBarToolbarItem) {
    /**
     * Compares the items by `priority` in ascending. Undefined priorities will be treated as `0`.
     */
    TabBarToolbarItem.PRIORITY_COMPARATOR = function (left, right) { return (left.priority || 0) - (right.priority || 0); };
})(TabBarToolbarItem = exports.TabBarToolbarItem || (exports.TabBarToolbarItem = {}));
/**
 * Main, shared registry for tab-bar toolbar items.
 */
var TabBarToolbarRegistry = /** @class */ (function () {
    function TabBarToolbarRegistry() {
        this.items = new Map();
    }
    TabBarToolbarRegistry.prototype.onStart = function () {
        var e_4, _a;
        var contributions = this.contributionProvider.getContributions();
        try {
            for (var contributions_1 = __values(contributions), contributions_1_1 = contributions_1.next(); !contributions_1_1.done; contributions_1_1 = contributions_1.next()) {
                var contribution = contributions_1_1.value;
                contribution.registerToolbarItems(this);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (contributions_1_1 && !contributions_1_1.done && (_a = contributions_1.return)) _a.call(contributions_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    /**
     * Registers the given item. Throws an error, if the corresponding command cannot be found or an item has been already registered for the desired command.
     *
     * @param item the item to register.
     */
    TabBarToolbarRegistry.prototype.registerItem = function (item) {
        var id = item.id;
        if (this.items.has(id)) {
            throw new Error("A toolbar item is already registered with the '" + id + "' ID.");
        }
        this.items.set(id, item);
    };
    /**
     * Returns an array of tab-bar toolbar items which are visible when the `widget` argument is the current one.
     *
     * By default returns with all items where the command is enabled and `item.isVisible` is `true`.
     */
    TabBarToolbarRegistry.prototype.visibleItems = function (widget) {
        var _this = this;
        return Array.from(this.items.values())
            .filter(function (item) { return _this.commandRegistry.isEnabled(item.id); })
            .filter(function (item) { return item.isVisible(widget); });
    };
    __decorate([
        inversify_1.inject(command_1.CommandRegistry),
        __metadata("design:type", command_1.CommandRegistry)
    ], TabBarToolbarRegistry.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(contribution_provider_1.ContributionProvider),
        inversify_1.named(exports.TabBarToolbarContribution),
        __metadata("design:type", Object)
    ], TabBarToolbarRegistry.prototype, "contributionProvider", void 0);
    TabBarToolbarRegistry = __decorate([
        inversify_1.injectable()
    ], TabBarToolbarRegistry);
    return TabBarToolbarRegistry;
}());
exports.TabBarToolbarRegistry = TabBarToolbarRegistry;
//# sourceMappingURL=tab-bar-toolbar.js.map