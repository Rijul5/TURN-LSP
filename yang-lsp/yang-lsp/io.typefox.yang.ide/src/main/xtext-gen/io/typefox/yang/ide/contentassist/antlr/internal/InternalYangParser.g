/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
parser grammar InternalYangParser;

options {
	tokenVocab=InternalYangLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package io.typefox.yang.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import io.typefox.yang.services.YangGrammarAccess;

}
@members {
	private YangGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("DollarSign", "'\\u0024'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("Add", "'add'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Bit", "'bit'");
		tokenNameToValue.put("Div", "'div'");
		tokenNameToValue.put("Key", "'key'");
		tokenNameToValue.put("Max", "'max'");
		tokenNameToValue.put("Min", "'min'");
		tokenNameToValue.put("Mod", "'mod'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Rpc", "'rpc'");
		tokenNameToValue.put("LessThanSignLessThanSignLessThanSignLessThanSign", "'<<<<'");
		tokenNameToValue.put("GreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSign", "'>>>>'");
		tokenNameToValue.put("Base", "'base'");
		tokenNameToValue.put("Bits", "'bits'");
		tokenNameToValue.put("Case", "'case'");
		tokenNameToValue.put("Enum", "'enum'");
		tokenNameToValue.put("Int8", "'int8'");
		tokenNameToValue.put("Leaf", "'leaf'");
		tokenNameToValue.put("List", "'list'");
		tokenNameToValue.put("Must", "'must'");
		tokenNameToValue.put("Node", "'node'");
		tokenNameToValue.put("Path", "'path'");
		tokenNameToValue.put("Self", "'self'");
		tokenNameToValue.put("Text", "'text'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("Type", "'type'");
		tokenNameToValue.put("User", "'user'");
		tokenNameToValue.put("Uses", "'uses'");
		tokenNameToValue.put("When", "'when'");
		tokenNameToValue.put("Child", "'child'");
		tokenNameToValue.put("Empty", "'empty'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("Input", "'input'");
		tokenNameToValue.put("Int16", "'int16'");
		tokenNameToValue.put("Int32", "'int32'");
		tokenNameToValue.put("Int64", "'int64'");
		tokenNameToValue.put("Range", "'range'");
		tokenNameToValue.put("Uint8", "'uint8'");
		tokenNameToValue.put("Union", "'union'");
		tokenNameToValue.put("Units", "'units'");
		tokenNameToValue.put("Value", "'value'");
		tokenNameToValue.put("Action", "'action'");
		tokenNameToValue.put("Anyxml", "'anyxml'");
		tokenNameToValue.put("Binary", "'binary'");
		tokenNameToValue.put("Choice", "'choice'");
		tokenNameToValue.put("Config", "'config'");
		tokenNameToValue.put("Delete", "'delete'");
		tokenNameToValue.put("Import", "'import'");
		tokenNameToValue.put("Length", "'length'");
		tokenNameToValue.put("Module", "'module'");
		tokenNameToValue.put("Output", "'output'");
		tokenNameToValue.put("Parent", "'parent'");
		tokenNameToValue.put("Prefix", "'prefix'");
		tokenNameToValue.put("Refine", "'refine'");
		tokenNameToValue.put("Status", "'status'");
		tokenNameToValue.put("String", "'string'");
		tokenNameToValue.put("KW_System", "'system'");
		tokenNameToValue.put("Uint16", "'uint16'");
		tokenNameToValue.put("Uint32", "'uint32'");
		tokenNameToValue.put("Uint64", "'uint64'");
		tokenNameToValue.put("Unique", "'unique'");
		tokenNameToValue.put("Anydata", "'anydata'");
		tokenNameToValue.put("Augment", "'augment'");
		tokenNameToValue.put("Boolean", "'boolean'");
		tokenNameToValue.put("Comment", "'comment'");
		tokenNameToValue.put("Contact", "'contact'");
		tokenNameToValue.put("Current", "'current'");
		tokenNameToValue.put("Default", "'default'");
		tokenNameToValue.put("Deviate", "'deviate'");
		tokenNameToValue.put("Feature", "'feature'");
		tokenNameToValue.put("Include", "'include'");
		tokenNameToValue.put("Leafref", "'leafref'");
		tokenNameToValue.put("Pattern", "'pattern'");
		tokenNameToValue.put("Replace", "'replace'");
		tokenNameToValue.put("Typedef", "'typedef'");
		tokenNameToValue.put("Ancestor", "'ancestor'");
		tokenNameToValue.put("Argument", "'argument'");
		tokenNameToValue.put("Grouping", "'grouping'");
		tokenNameToValue.put("Identity", "'identity'");
		tokenNameToValue.put("Modifier", "'modifier'");
		tokenNameToValue.put("Obsolete", "'obsolete'");
		tokenNameToValue.put("Position", "'position'");
		tokenNameToValue.put("Presence", "'presence'");
		tokenNameToValue.put("Revision", "'revision'");
		tokenNameToValue.put("Attribute", "'attribute'");
		tokenNameToValue.put("Container", "'container'");
		tokenNameToValue.put("Decimal64", "'decimal64'");
		tokenNameToValue.put("Deviation", "'deviation'");
		tokenNameToValue.put("Extension", "'extension'");
		tokenNameToValue.put("Following", "'following'");
		tokenNameToValue.put("LeafList", "'leaf-list'");
		tokenNameToValue.put("Mandatory", "'mandatory'");
		tokenNameToValue.put("Namespace", "'namespace'");
		tokenNameToValue.put("Preceding", "'preceding'");
		tokenNameToValue.put("Reference", "'reference'");
		tokenNameToValue.put("Submodule", "'submodule'");
		tokenNameToValue.put("Unbounded", "'unbounded'");
		tokenNameToValue.put("BelongsTo", "'belongs-to'");
		tokenNameToValue.put("Deprecated", "'deprecated'");
		tokenNameToValue.put("Descendant", "'descendant'");
		tokenNameToValue.put("IfFeature", "'if-feature'");
		tokenNameToValue.put("OrderedBy", "'ordered-by'");
		tokenNameToValue.put("Description", "'description'");
		tokenNameToValue.put("Enumeration", "'enumeration'");
		tokenNameToValue.put("Identityref", "'identityref'");
		tokenNameToValue.put("YinElement", "'yin-element'");
		tokenNameToValue.put("MaxElements", "'max-elements'");
		tokenNameToValue.put("MinElements", "'min-elements'");
		tokenNameToValue.put("Notification", "'notification'");
		tokenNameToValue.put("Organization", "'organization'");
		tokenNameToValue.put("YangVersion", "'yang-version'");
		tokenNameToValue.put("ErrorAppTag", "'error-app-tag'");
		tokenNameToValue.put("ErrorMessage", "'error-message'");
		tokenNameToValue.put("NotSupported", "'not-supported'");
		tokenNameToValue.put("RevisionDate", "'revision-date'");
		tokenNameToValue.put("FractionDigits", "'fraction-digits'");
		tokenNameToValue.put("AncestorOrSelf", "'ancestor-or-self'");
		tokenNameToValue.put("RequireInstance", "'require-instance'");
		tokenNameToValue.put("FollowingSibling", "'following-sibling'");
		tokenNameToValue.put("PrecedingSibling", "'preceding-sibling'");
		tokenNameToValue.put("DescendantOrSelf", "'descendant-or-self'");
		tokenNameToValue.put("InstanceIdentifier", "'instance-identifier'");
		tokenNameToValue.put("ProcessingInstruction", "'processing-instruction'");
	}

	public void setGrammarAccess(YangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleAbstractModule
entryRuleAbstractModule
:
{ before(grammarAccess.getAbstractModuleRule()); }
	 ruleAbstractModule
{ after(grammarAccess.getAbstractModuleRule()); } 
	 EOF 
;

// Rule AbstractModule
ruleAbstractModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractModuleAccess().getAlternatives()); }
		(rule__AbstractModule__Alternatives)
		{ after(grammarAccess.getAbstractModuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule StatementEnd
ruleStatementEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementEndAccess().getAlternatives()); }
		(rule__StatementEnd__Alternatives)
		{ after(grammarAccess.getStatementEndAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractImport
entryRuleAbstractImport
:
{ before(grammarAccess.getAbstractImportRule()); }
	 ruleAbstractImport
{ after(grammarAccess.getAbstractImportRule()); } 
	 EOF 
;

// Rule AbstractImport
ruleAbstractImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractImportAccess().getAlternatives()); }
		(rule__AbstractImport__Alternatives)
		{ after(grammarAccess.getAbstractImportAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSchemaNode
entryRuleSchemaNode
:
{ before(grammarAccess.getSchemaNodeRule()); }
	 ruleSchemaNode
{ after(grammarAccess.getSchemaNodeRule()); } 
	 EOF 
;

// Rule SchemaNode
ruleSchemaNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSchemaNodeAccess().getAlternatives()); }
		(rule__SchemaNode__Alternatives)
		{ after(grammarAccess.getSchemaNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataSchemaNode
entryRuleDataSchemaNode
:
{ before(grammarAccess.getDataSchemaNodeRule()); }
	 ruleDataSchemaNode
{ after(grammarAccess.getDataSchemaNodeRule()); } 
	 EOF 
;

// Rule DataSchemaNode
ruleDataSchemaNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getAlternatives()); }
		(rule__DataSchemaNode__Alternatives)
		{ after(grammarAccess.getDataSchemaNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOtherStatement
entryRuleOtherStatement
:
{ before(grammarAccess.getOtherStatementRule()); }
	 ruleOtherStatement
{ after(grammarAccess.getOtherStatementRule()); } 
	 EOF 
;

// Rule OtherStatement
ruleOtherStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOtherStatementAccess().getAlternatives()); }
		(rule__OtherStatement__Alternatives)
		{ after(grammarAccess.getOtherStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumerable
entryRuleEnumerable
:
{ before(grammarAccess.getEnumerableRule()); }
	 ruleEnumerable
{ after(grammarAccess.getEnumerableRule()); } 
	 EOF 
;

// Rule Enumerable
ruleEnumerable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerableAccess().getAlternatives()); }
		(rule__Enumerable__Alternatives)
		{ after(grammarAccess.getEnumerableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrdered
entryRuleOrdered
:
{ before(grammarAccess.getOrderedRule()); }
	 ruleOrdered
{ after(grammarAccess.getOrderedRule()); } 
	 EOF 
;

// Rule Ordered
ruleOrdered 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderedAccess().getAlternatives()); }
		(rule__Ordered__Alternatives)
		{ after(grammarAccess.getOrderedAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefinable
entryRuleRefinable
:
{ before(grammarAccess.getRefinableRule()); }
	 ruleRefinable
{ after(grammarAccess.getRefinableRule()); } 
	 EOF 
;

// Rule Refinable
ruleRefinable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefinableAccess().getAlternatives()); }
		(rule__Refinable__Alternatives)
		{ after(grammarAccess.getRefinableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModule
entryRuleModule
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getGroup()); }
		(rule__Module__Group__0)
		{ after(grammarAccess.getModuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleYangVersion
entryRuleYangVersion
:
{ before(grammarAccess.getYangVersionRule()); }
	 ruleYangVersion
{ after(grammarAccess.getYangVersionRule()); } 
	 EOF 
;

// Rule YangVersion
ruleYangVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYangVersionAccess().getGroup()); }
		(rule__YangVersion__Group__0)
		{ after(grammarAccess.getYangVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamespace
entryRuleNamespace
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamespaceAccess().getGroup()); }
		(rule__Namespace__Group__0)
		{ after(grammarAccess.getNamespaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefix
entryRulePrefix
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixAccess().getGroup()); }
		(rule__Prefix__Group__0)
		{ after(grammarAccess.getPrefixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRevisionDate
entryRuleRevisionDate
:
{ before(grammarAccess.getRevisionDateRule()); }
	 ruleRevisionDate
{ after(grammarAccess.getRevisionDateRule()); } 
	 EOF 
;

// Rule RevisionDate
ruleRevisionDate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRevisionDateAccess().getGroup()); }
		(rule__RevisionDate__Group__0)
		{ after(grammarAccess.getRevisionDateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInclude
entryRuleInclude
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncludeAccess().getGroup()); }
		(rule__Include__Group__0)
		{ after(grammarAccess.getIncludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrganization
entryRuleOrganization
:
{ before(grammarAccess.getOrganizationRule()); }
	 ruleOrganization
{ after(grammarAccess.getOrganizationRule()); } 
	 EOF 
;

// Rule Organization
ruleOrganization 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrganizationAccess().getGroup()); }
		(rule__Organization__Group__0)
		{ after(grammarAccess.getOrganizationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContact
entryRuleContact
:
{ before(grammarAccess.getContactRule()); }
	 ruleContact
{ after(grammarAccess.getContactRule()); } 
	 EOF 
;

// Rule Contact
ruleContact 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContactAccess().getGroup()); }
		(rule__Contact__Group__0)
		{ after(grammarAccess.getContactAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRevision
entryRuleRevision
:
{ before(grammarAccess.getRevisionRule()); }
	 ruleRevision
{ after(grammarAccess.getRevisionRule()); } 
	 EOF 
;

// Rule Revision
ruleRevision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRevisionAccess().getGroup()); }
		(rule__Revision__Group__0)
		{ after(grammarAccess.getRevisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubmodule
entryRuleSubmodule
:
{ before(grammarAccess.getSubmoduleRule()); }
	 ruleSubmodule
{ after(grammarAccess.getSubmoduleRule()); } 
	 EOF 
;

// Rule Submodule
ruleSubmodule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubmoduleAccess().getGroup()); }
		(rule__Submodule__Group__0)
		{ after(grammarAccess.getSubmoduleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBelongsTo
entryRuleBelongsTo
:
{ before(grammarAccess.getBelongsToRule()); }
	 ruleBelongsTo
{ after(grammarAccess.getBelongsToRule()); } 
	 EOF 
;

// Rule BelongsTo
ruleBelongsTo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBelongsToAccess().getGroup()); }
		(rule__BelongsTo__Group__0)
		{ after(grammarAccess.getBelongsToAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypedef
entryRuleTypedef
:
{ before(grammarAccess.getTypedefRule()); }
	 ruleTypedef
{ after(grammarAccess.getTypedefRule()); } 
	 EOF 
;

// Rule Typedef
ruleTypedef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypedefAccess().getGroup()); }
		(rule__Typedef__Group__0)
		{ after(grammarAccess.getTypedefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnits
entryRuleUnits
:
{ before(grammarAccess.getUnitsRule()); }
	 ruleUnits
{ after(grammarAccess.getUnitsRule()); } 
	 EOF 
;

// Rule Units
ruleUnits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnitsAccess().getGroup()); }
		(rule__Units__Group__0)
		{ after(grammarAccess.getUnitsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefault
entryRuleDefault
:
{ before(grammarAccess.getDefaultRule()); }
	 ruleDefault
{ after(grammarAccess.getDefaultRule()); } 
	 EOF 
;

// Rule Default
ruleDefault 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefaultAccess().getGroup()); }
		(rule__Default__Group__0)
		{ after(grammarAccess.getDefaultAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getGroup()); }
		(rule__Type__Group__0)
		{ after(grammarAccess.getTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeReference
entryRuleTypeReference
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
		(rule__TypeReference__Alternatives)
		{ after(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContainer
entryRuleContainer
:
{ before(grammarAccess.getContainerRule()); }
	 ruleContainer
{ after(grammarAccess.getContainerRule()); } 
	 EOF 
;

// Rule Container
ruleContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerAccess().getGroup()); }
		(rule__Container__Group__0)
		{ after(grammarAccess.getContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMust
entryRuleMust
:
{ before(grammarAccess.getMustRule()); }
	 ruleMust
{ after(grammarAccess.getMustRule()); } 
	 EOF 
;

// Rule Must
ruleMust 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMustAccess().getGroup()); }
		(rule__Must__Group__0)
		{ after(grammarAccess.getMustAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErrorMessage
entryRuleErrorMessage
:
{ before(grammarAccess.getErrorMessageRule()); }
	 ruleErrorMessage
{ after(grammarAccess.getErrorMessageRule()); } 
	 EOF 
;

// Rule ErrorMessage
ruleErrorMessage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getErrorMessageAccess().getGroup()); }
		(rule__ErrorMessage__Group__0)
		{ after(grammarAccess.getErrorMessageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErrorAppTag
entryRuleErrorAppTag
:
{ before(grammarAccess.getErrorAppTagRule()); }
	 ruleErrorAppTag
{ after(grammarAccess.getErrorAppTagRule()); } 
	 EOF 
;

// Rule ErrorAppTag
ruleErrorAppTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getErrorAppTagAccess().getGroup()); }
		(rule__ErrorAppTag__Group__0)
		{ after(grammarAccess.getErrorAppTagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePresence
entryRulePresence
:
{ before(grammarAccess.getPresenceRule()); }
	 rulePresence
{ after(grammarAccess.getPresenceRule()); } 
	 EOF 
;

// Rule Presence
rulePresence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPresenceAccess().getGroup()); }
		(rule__Presence__Group__0)
		{ after(grammarAccess.getPresenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeaf
entryRuleLeaf
:
{ before(grammarAccess.getLeafRule()); }
	 ruleLeaf
{ after(grammarAccess.getLeafRule()); } 
	 EOF 
;

// Rule Leaf
ruleLeaf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeafAccess().getGroup()); }
		(rule__Leaf__Group__0)
		{ after(grammarAccess.getLeafAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMandatory
entryRuleMandatory
:
{ before(grammarAccess.getMandatoryRule()); }
	 ruleMandatory
{ after(grammarAccess.getMandatoryRule()); } 
	 EOF 
;

// Rule Mandatory
ruleMandatory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMandatoryAccess().getGroup()); }
		(rule__Mandatory__Group__0)
		{ after(grammarAccess.getMandatoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeafList
entryRuleLeafList
:
{ before(grammarAccess.getLeafListRule()); }
	 ruleLeafList
{ after(grammarAccess.getLeafListRule()); } 
	 EOF 
;

// Rule LeafList
ruleLeafList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeafListAccess().getGroup()); }
		(rule__LeafList__Group__0)
		{ after(grammarAccess.getLeafListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinElements
entryRuleMinElements
:
{ before(grammarAccess.getMinElementsRule()); }
	 ruleMinElements
{ after(grammarAccess.getMinElementsRule()); } 
	 EOF 
;

// Rule MinElements
ruleMinElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinElementsAccess().getGroup()); }
		(rule__MinElements__Group__0)
		{ after(grammarAccess.getMinElementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaxElements
entryRuleMaxElements
:
{ before(grammarAccess.getMaxElementsRule()); }
	 ruleMaxElements
{ after(grammarAccess.getMaxElementsRule()); } 
	 EOF 
;

// Rule MaxElements
ruleMaxElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaxElementsAccess().getGroup()); }
		(rule__MaxElements__Group__0)
		{ after(grammarAccess.getMaxElementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrderedBy
entryRuleOrderedBy
:
{ before(grammarAccess.getOrderedByRule()); }
	 ruleOrderedBy
{ after(grammarAccess.getOrderedByRule()); } 
	 EOF 
;

// Rule OrderedBy
ruleOrderedBy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrderedByAccess().getGroup()); }
		(rule__OrderedBy__Group__0)
		{ after(grammarAccess.getOrderedByAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKey
entryRuleKey
:
{ before(grammarAccess.getKeyRule()); }
	 ruleKey
{ after(grammarAccess.getKeyRule()); } 
	 EOF 
;

// Rule Key
ruleKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyAccess().getGroup()); }
		(rule__Key__Group__0)
		{ after(grammarAccess.getKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyReference
entryRuleKeyReference
:
{ before(grammarAccess.getKeyReferenceRule()); }
	 ruleKeyReference
{ after(grammarAccess.getKeyReferenceRule()); } 
	 EOF 
;

// Rule KeyReference
ruleKeyReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyReferenceAccess().getNodeAssignment()); }
		(rule__KeyReference__NodeAssignment)
		{ after(grammarAccess.getKeyReferenceAccess().getNodeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule DescendantSchemaNodeIdentifierReferences
ruleDescendantSchemaNodeIdentifierReferences 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesAssignment()); }
			(rule__DescendantSchemaNodeIdentifierReferences__ReferencesAssignment)
			{ after(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesAssignment()); }
		)
		(
			{ before(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesAssignment()); }
			(rule__DescendantSchemaNodeIdentifierReferences__ReferencesAssignment)*
			{ after(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnique
entryRuleUnique
:
{ before(grammarAccess.getUniqueRule()); }
	 ruleUnique
{ after(grammarAccess.getUniqueRule()); } 
	 EOF 
;

// Rule Unique
ruleUnique 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUniqueAccess().getGroup()); }
		(rule__Unique__Group__0)
		{ after(grammarAccess.getUniqueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChoice
entryRuleChoice
:
{ before(grammarAccess.getChoiceRule()); }
	 ruleChoice
{ after(grammarAccess.getChoiceRule()); } 
	 EOF 
;

// Rule Choice
ruleChoice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChoiceAccess().getGroup()); }
		(rule__Choice__Group__0)
		{ after(grammarAccess.getChoiceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCase
entryRuleCase
:
{ before(grammarAccess.getCaseRule()); }
	 ruleCase
{ after(grammarAccess.getCaseRule()); } 
	 EOF 
;

// Rule Case
ruleCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseAccess().getGroup()); }
		(rule__Case__Group__0)
		{ after(grammarAccess.getCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnydata
entryRuleAnydata
:
{ before(grammarAccess.getAnydataRule()); }
	 ruleAnydata
{ after(grammarAccess.getAnydataRule()); } 
	 EOF 
;

// Rule Anydata
ruleAnydata 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnydataAccess().getGroup()); }
		(rule__Anydata__Group__0)
		{ after(grammarAccess.getAnydataAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnyxml
entryRuleAnyxml
:
{ before(grammarAccess.getAnyxmlRule()); }
	 ruleAnyxml
{ after(grammarAccess.getAnyxmlRule()); } 
	 EOF 
;

// Rule Anyxml
ruleAnyxml 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnyxmlAccess().getGroup()); }
		(rule__Anyxml__Group__0)
		{ after(grammarAccess.getAnyxmlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrouping
entryRuleGrouping
:
{ before(grammarAccess.getGroupingRule()); }
	 ruleGrouping
{ after(grammarAccess.getGroupingRule()); } 
	 EOF 
;

// Rule Grouping
ruleGrouping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroupingAccess().getGroup()); }
		(rule__Grouping__Group__0)
		{ after(grammarAccess.getGroupingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUses
entryRuleUses
:
{ before(grammarAccess.getUsesRule()); }
	 ruleUses
{ after(grammarAccess.getUsesRule()); } 
	 EOF 
;

// Rule Uses
ruleUses 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUsesAccess().getGroup()); }
		(rule__Uses__Group__0)
		{ after(grammarAccess.getUsesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefine
entryRuleRefine
:
{ before(grammarAccess.getRefineRule()); }
	 ruleRefine
{ after(grammarAccess.getRefineRule()); } 
	 EOF 
;

// Rule Refine
ruleRefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefineAccess().getGroup()); }
		(rule__Refine__Group__0)
		{ after(grammarAccess.getRefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRpc
entryRuleRpc
:
{ before(grammarAccess.getRpcRule()); }
	 ruleRpc
{ after(grammarAccess.getRpcRule()); } 
	 EOF 
;

// Rule Rpc
ruleRpc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRpcAccess().getGroup()); }
		(rule__Rpc__Group__0)
		{ after(grammarAccess.getRpcAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotification
entryRuleNotification
:
{ before(grammarAccess.getNotificationRule()); }
	 ruleNotification
{ after(grammarAccess.getNotificationRule()); } 
	 EOF 
;

// Rule Notification
ruleNotification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotificationAccess().getGroup()); }
		(rule__Notification__Group__0)
		{ after(grammarAccess.getNotificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAugment
entryRuleAugment
:
{ before(grammarAccess.getAugmentRule()); }
	 ruleAugment
{ after(grammarAccess.getAugmentRule()); } 
	 EOF 
;

// Rule Augment
ruleAugment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAugmentAccess().getGroup()); }
		(rule__Augment__Group__0)
		{ after(grammarAccess.getAugmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentity
entryRuleIdentity
:
{ before(grammarAccess.getIdentityRule()); }
	 ruleIdentity
{ after(grammarAccess.getIdentityRule()); } 
	 EOF 
;

// Rule Identity
ruleIdentity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentityAccess().getGroup()); }
		(rule__Identity__Group__0)
		{ after(grammarAccess.getIdentityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBase
entryRuleBase
:
{ before(grammarAccess.getBaseRule()); }
	 ruleBase
{ after(grammarAccess.getBaseRule()); } 
	 EOF 
;

// Rule Base
ruleBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseAccess().getGroup()); }
		(rule__Base__Group__0)
		{ after(grammarAccess.getBaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtension
entryRuleExtension
:
{ before(grammarAccess.getExtensionRule()); }
	 ruleExtension
{ after(grammarAccess.getExtensionRule()); } 
	 EOF 
;

// Rule Extension
ruleExtension 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtensionAccess().getGroup()); }
		(rule__Extension__Group__0)
		{ after(grammarAccess.getExtensionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgument
entryRuleArgument
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentAccess().getGroup()); }
		(rule__Argument__Group__0)
		{ after(grammarAccess.getArgumentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleYinElement
entryRuleYinElement
:
{ before(grammarAccess.getYinElementRule()); }
	 ruleYinElement
{ after(grammarAccess.getYinElementRule()); } 
	 EOF 
;

// Rule YinElement
ruleYinElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYinElementAccess().getGroup()); }
		(rule__YinElement__Group__0)
		{ after(grammarAccess.getYinElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getGroup()); }
		(rule__Feature__Group__0)
		{ after(grammarAccess.getFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfFeature
entryRuleIfFeature
:
{ before(grammarAccess.getIfFeatureRule()); }
	 ruleIfFeature
{ after(grammarAccess.getIfFeatureRule()); } 
	 EOF 
;

// Rule IfFeature
ruleIfFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfFeatureAccess().getGroup()); }
		(rule__IfFeature__Group__0)
		{ after(grammarAccess.getIfFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfFeatureOrExpression
entryRuleIfFeatureOrExpression
:
{ before(grammarAccess.getIfFeatureOrExpressionRule()); }
	 ruleIfFeatureOrExpression
{ after(grammarAccess.getIfFeatureOrExpressionRule()); } 
	 EOF 
;

// Rule IfFeatureOrExpression
ruleIfFeatureOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfFeatureOrExpressionAccess().getGroup()); }
		(rule__IfFeatureOrExpression__Group__0)
		{ after(grammarAccess.getIfFeatureOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfFeatureAndExpression
entryRuleIfFeatureAndExpression
:
{ before(grammarAccess.getIfFeatureAndExpressionRule()); }
	 ruleIfFeatureAndExpression
{ after(grammarAccess.getIfFeatureAndExpressionRule()); } 
	 EOF 
;

// Rule IfFeatureAndExpression
ruleIfFeatureAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfFeatureAndExpressionAccess().getGroup()); }
		(rule__IfFeatureAndExpression__Group__0)
		{ after(grammarAccess.getIfFeatureAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfFeatureExpression
entryRuleIfFeatureExpression
:
{ before(grammarAccess.getIfFeatureExpressionRule()); }
	 ruleIfFeatureExpression
{ after(grammarAccess.getIfFeatureExpressionRule()); } 
	 EOF 
;

// Rule IfFeatureExpression
ruleIfFeatureExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getAlternatives()); }
		(rule__IfFeatureExpression__Alternatives)
		{ after(grammarAccess.getIfFeatureExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeviation
entryRuleDeviation
:
{ before(grammarAccess.getDeviationRule()); }
	 ruleDeviation
{ after(grammarAccess.getDeviationRule()); } 
	 EOF 
;

// Rule Deviation
ruleDeviation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviationAccess().getGroup()); }
		(rule__Deviation__Group__0)
		{ after(grammarAccess.getDeviationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeviate
entryRuleDeviate
:
{ before(grammarAccess.getDeviateRule()); }
	 ruleDeviate
{ after(grammarAccess.getDeviateRule()); } 
	 EOF 
;

// Rule Deviate
ruleDeviate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviateAccess().getGroup()); }
		(rule__Deviate__Group__0)
		{ after(grammarAccess.getDeviateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfig
entryRuleConfig
:
{ before(grammarAccess.getConfigRule()); }
	 ruleConfig
{ after(grammarAccess.getConfigRule()); } 
	 EOF 
;

// Rule Config
ruleConfig 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigAccess().getGroup()); }
		(rule__Config__Group__0)
		{ after(grammarAccess.getConfigAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatus
entryRuleStatus
:
{ before(grammarAccess.getStatusRule()); }
	 ruleStatus
{ after(grammarAccess.getStatusRule()); } 
	 EOF 
;

// Rule Status
ruleStatus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatusAccess().getGroup()); }
		(rule__Status__Group__0)
		{ after(grammarAccess.getStatusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescription
entryRuleDescription
:
{ before(grammarAccess.getDescriptionRule()); }
	 ruleDescription
{ after(grammarAccess.getDescriptionRule()); } 
	 EOF 
;

// Rule Description
ruleDescription 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescriptionAccess().getGroup()); }
		(rule__Description__Group__0)
		{ after(grammarAccess.getDescriptionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getGroup()); }
		(rule__Reference__Group__0)
		{ after(grammarAccess.getReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhen
entryRuleWhen
:
{ before(grammarAccess.getWhenRule()); }
	 ruleWhen
{ after(grammarAccess.getWhenRule()); } 
	 EOF 
;

// Rule When
ruleWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenAccess().getGroup()); }
		(rule__When__Group__0)
		{ after(grammarAccess.getWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRange
entryRuleRange
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeAccess().getGroup()); }
		(rule__Range__Group__0)
		{ after(grammarAccess.getRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefinementExpression
entryRuleRefinementExpression
:
{ before(grammarAccess.getRefinementExpressionRule()); }
	 ruleRefinementExpression
{ after(grammarAccess.getRefinementExpressionRule()); } 
	 EOF 
;

// Rule RefinementExpression
ruleRefinementExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefinementExpressionAccess().getGroup()); }
		(rule__RefinementExpression__Group__0)
		{ after(grammarAccess.getRefinementExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRangeRefinementExpression
entryRuleRangeRefinementExpression
:
{ before(grammarAccess.getRangeRefinementExpressionRule()); }
	 ruleRangeRefinementExpression
{ after(grammarAccess.getRangeRefinementExpressionRule()); } 
	 EOF 
;

// Rule RangeRefinementExpression
ruleRangeRefinementExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeRefinementExpressionAccess().getGroup()); }
		(rule__RangeRefinementExpression__Group__0)
		{ after(grammarAccess.getRangeRefinementExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExplicitRefinementExpression
entryRuleExplicitRefinementExpression
:
{ before(grammarAccess.getExplicitRefinementExpressionRule()); }
	 ruleExplicitRefinementExpression
{ after(grammarAccess.getExplicitRefinementExpressionRule()); } 
	 EOF 
;

// Rule ExplicitRefinementExpression
ruleExplicitRefinementExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExplicitRefinementExpressionAccess().getAlternatives()); }
		(rule__ExplicitRefinementExpression__Alternatives)
		{ after(grammarAccess.getExplicitRefinementExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFractionDigits
entryRuleFractionDigits
:
{ before(grammarAccess.getFractionDigitsRule()); }
	 ruleFractionDigits
{ after(grammarAccess.getFractionDigitsRule()); } 
	 EOF 
;

// Rule FractionDigits
ruleFractionDigits 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFractionDigitsAccess().getGroup()); }
		(rule__FractionDigits__Group__0)
		{ after(grammarAccess.getFractionDigitsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLength
entryRuleLength
:
{ before(grammarAccess.getLengthRule()); }
	 ruleLength
{ after(grammarAccess.getLengthRule()); } 
	 EOF 
;

// Rule Length
ruleLength 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLengthAccess().getGroup()); }
		(rule__Length__Group__0)
		{ after(grammarAccess.getLengthAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifier
entryRuleModifier
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifierAccess().getGroup()); }
		(rule__Modifier__Group__0)
		{ after(grammarAccess.getModifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnum
entryRuleEnum
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumAccess().getGroup()); }
		(rule__Enum__Group__0)
		{ after(grammarAccess.getEnumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getGroup()); }
		(rule__Value__Group__0)
		{ after(grammarAccess.getValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBit
entryRuleBit
:
{ before(grammarAccess.getBitRule()); }
	 ruleBit
{ after(grammarAccess.getBitRule()); } 
	 EOF 
;

// Rule Bit
ruleBit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitAccess().getGroup()); }
		(rule__Bit__Group__0)
		{ after(grammarAccess.getBitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePosition
entryRulePosition
:
{ before(grammarAccess.getPositionRule()); }
	 rulePosition
{ after(grammarAccess.getPositionRule()); } 
	 EOF 
;

// Rule Position
rulePosition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositionAccess().getGroup()); }
		(rule__Position__Group__0)
		{ after(grammarAccess.getPositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePath
entryRulePath
:
{ before(grammarAccess.getPathRule()); }
	 rulePath
{ after(grammarAccess.getPathRule()); } 
	 EOF 
;

// Rule Path
rulePath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathAccess().getGroup()); }
		(rule__Path__Group__0)
		{ after(grammarAccess.getPathAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRequireInstance
entryRuleRequireInstance
:
{ before(grammarAccess.getRequireInstanceRule()); }
	 ruleRequireInstance
{ after(grammarAccess.getRequireInstanceRule()); } 
	 EOF 
;

// Rule RequireInstance
ruleRequireInstance 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequireInstanceAccess().getGroup()); }
		(rule__RequireInstance__Group__0)
		{ after(grammarAccess.getRequireInstanceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnknown
entryRuleUnknown
:
{ before(grammarAccess.getUnknownRule()); }
	 ruleUnknown
{ after(grammarAccess.getUnknownRule()); } 
	 EOF 
;

// Rule Unknown
ruleUnknown 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnknownAccess().getGroup()); }
		(rule__Unknown__Group__0)
		{ after(grammarAccess.getUnknownAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescendantSchemaNodeIdentifier
entryRuleDescendantSchemaNodeIdentifier
:
{ before(grammarAccess.getDescendantSchemaNodeIdentifierRule()); }
	 ruleDescendantSchemaNodeIdentifier
{ after(grammarAccess.getDescendantSchemaNodeIdentifierRule()); } 
	 EOF 
;

// Rule DescendantSchemaNodeIdentifier
ruleDescendantSchemaNodeIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getGroup()); }
		(rule__DescendantSchemaNodeIdentifier__Group__0)
		{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDescendantRootSchemaNodeIdentifier
entryRuleDescendantRootSchemaNodeIdentifier
:
{ before(grammarAccess.getDescendantRootSchemaNodeIdentifierRule()); }
	 ruleDescendantRootSchemaNodeIdentifier
{ after(grammarAccess.getDescendantRootSchemaNodeIdentifierRule()); } 
	 EOF 
;

// Rule DescendantRootSchemaNodeIdentifier
ruleDescendantRootSchemaNodeIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeAssignment()); }
		(rule__DescendantRootSchemaNodeIdentifier__SchemaNodeAssignment)
		{ after(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSchemaNodeIdentifier
entryRuleSchemaNodeIdentifier
:
{ before(grammarAccess.getSchemaNodeIdentifierRule()); }
	 ruleSchemaNodeIdentifier
{ after(grammarAccess.getSchemaNodeIdentifierRule()); } 
	 EOF 
;

// Rule SchemaNodeIdentifier
ruleSchemaNodeIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSchemaNodeIdentifierAccess().getGroup()); }
		(rule__SchemaNodeIdentifier__Group__0)
		{ after(grammarAccess.getSchemaNodeIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRootSchemaNodeIdentifier
entryRuleRootSchemaNodeIdentifier
:
{ before(grammarAccess.getRootSchemaNodeIdentifierRule()); }
	 ruleRootSchemaNodeIdentifier
{ after(grammarAccess.getRootSchemaNodeIdentifierRule()); } 
	 EOF 
;

// Rule RootSchemaNodeIdentifier
ruleRootSchemaNodeIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getGroup()); }
		(rule__RootSchemaNodeIdentifier__Group__0)
		{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGroupingRef
entryRuleGroupingRef
:
{ before(grammarAccess.getGroupingRefRule()); }
	 ruleGroupingRef
{ after(grammarAccess.getGroupingRefRule()); } 
	 EOF 
;

// Rule GroupingRef
ruleGroupingRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroupingRefAccess().getNodeAssignment()); }
		(rule__GroupingRef__NodeAssignment)
		{ after(grammarAccess.getGroupingRefAccess().getNodeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathExpression
entryRuleXpathExpression
:
{ before(grammarAccess.getXpathExpressionRule()); }
	 ruleXpathExpression
{ after(grammarAccess.getXpathExpressionRule()); } 
	 EOF 
;

// Rule XpathExpression
ruleXpathExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathExpressionAccess().getAlternatives()); }
		(rule__XpathExpression__Alternatives)
		{ after(grammarAccess.getXpathExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParsedXpathExpression
entryRuleParsedXpathExpression
:
{ before(grammarAccess.getParsedXpathExpressionRule()); }
	 ruleParsedXpathExpression
{ after(grammarAccess.getParsedXpathExpressionRule()); } 
	 EOF 
;

// Rule ParsedXpathExpression
ruleParsedXpathExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParsedXpathExpressionAccess().getXpathOrExprParserRuleCall()); }
		ruleXpathOrExpr
		{ after(grammarAccess.getParsedXpathExpressionAccess().getXpathOrExprParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathOrExpr
entryRuleXpathOrExpr
:
{ before(grammarAccess.getXpathOrExprRule()); }
	 ruleXpathOrExpr
{ after(grammarAccess.getXpathOrExprRule()); } 
	 EOF 
;

// Rule XpathOrExpr
ruleXpathOrExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathOrExprAccess().getGroup()); }
		(rule__XpathOrExpr__Group__0)
		{ after(grammarAccess.getXpathOrExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathAndExpr
entryRuleXpathAndExpr
:
{ before(grammarAccess.getXpathAndExprRule()); }
	 ruleXpathAndExpr
{ after(grammarAccess.getXpathAndExprRule()); } 
	 EOF 
;

// Rule XpathAndExpr
ruleXpathAndExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathAndExprAccess().getGroup()); }
		(rule__XpathAndExpr__Group__0)
		{ after(grammarAccess.getXpathAndExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathEqualityExpr
entryRuleXpathEqualityExpr
:
{ before(grammarAccess.getXpathEqualityExprRule()); }
	 ruleXpathEqualityExpr
{ after(grammarAccess.getXpathEqualityExprRule()); } 
	 EOF 
;

// Rule XpathEqualityExpr
ruleXpathEqualityExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathEqualityExprAccess().getGroup()); }
		(rule__XpathEqualityExpr__Group__0)
		{ after(grammarAccess.getXpathEqualityExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathRelationalExpr
entryRuleXpathRelationalExpr
:
{ before(grammarAccess.getXpathRelationalExprRule()); }
	 ruleXpathRelationalExpr
{ after(grammarAccess.getXpathRelationalExprRule()); } 
	 EOF 
;

// Rule XpathRelationalExpr
ruleXpathRelationalExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getGroup()); }
		(rule__XpathRelationalExpr__Group__0)
		{ after(grammarAccess.getXpathRelationalExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathAdditiveExpr
entryRuleXpathAdditiveExpr
:
{ before(grammarAccess.getXpathAdditiveExprRule()); }
	 ruleXpathAdditiveExpr
{ after(grammarAccess.getXpathAdditiveExprRule()); } 
	 EOF 
;

// Rule XpathAdditiveExpr
ruleXpathAdditiveExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathAdditiveExprAccess().getGroup()); }
		(rule__XpathAdditiveExpr__Group__0)
		{ after(grammarAccess.getXpathAdditiveExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathMultiplicativeExpr
entryRuleXpathMultiplicativeExpr
:
{ before(grammarAccess.getXpathMultiplicativeExprRule()); }
	 ruleXpathMultiplicativeExpr
{ after(grammarAccess.getXpathMultiplicativeExprRule()); } 
	 EOF 
;

// Rule XpathMultiplicativeExpr
ruleXpathMultiplicativeExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathMultiplicativeExprAccess().getGroup()); }
		(rule__XpathMultiplicativeExpr__Group__0)
		{ after(grammarAccess.getXpathMultiplicativeExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathUnaryExpr
entryRuleXpathUnaryExpr
:
{ before(grammarAccess.getXpathUnaryExprRule()); }
	 ruleXpathUnaryExpr
{ after(grammarAccess.getXpathUnaryExprRule()); } 
	 EOF 
;

// Rule XpathUnaryExpr
ruleXpathUnaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathUnaryExprAccess().getAlternatives()); }
		(rule__XpathUnaryExpr__Alternatives)
		{ after(grammarAccess.getXpathUnaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathUnionExpr
entryRuleXpathUnionExpr
:
{ before(grammarAccess.getXpathUnionExprRule()); }
	 ruleXpathUnionExpr
{ after(grammarAccess.getXpathUnionExprRule()); } 
	 EOF 
;

// Rule XpathUnionExpr
ruleXpathUnionExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathUnionExprAccess().getGroup()); }
		(rule__XpathUnionExpr__Group__0)
		{ after(grammarAccess.getXpathUnionExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathPathExpr
entryRuleXpathPathExpr
:
{ before(grammarAccess.getXpathPathExprRule()); }
	 ruleXpathPathExpr
{ after(grammarAccess.getXpathPathExprRule()); } 
	 EOF 
;

// Rule XpathPathExpr
ruleXpathPathExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathPathExprAccess().getGroup()); }
		(rule__XpathPathExpr__Group__0)
		{ after(grammarAccess.getXpathPathExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathFilterExpr
entryRuleXpathFilterExpr
:
{ before(grammarAccess.getXpathFilterExprRule()); }
	 ruleXpathFilterExpr
{ after(grammarAccess.getXpathFilterExprRule()); } 
	 EOF 
;

// Rule XpathFilterExpr
ruleXpathFilterExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathFilterExprAccess().getGroup()); }
		(rule__XpathFilterExpr__Group__0)
		{ after(grammarAccess.getXpathFilterExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathPrimaryExpr
entryRuleXpathPrimaryExpr
:
{ before(grammarAccess.getXpathPrimaryExprRule()); }
	 ruleXpathPrimaryExpr
{ after(grammarAccess.getXpathPrimaryExprRule()); } 
	 EOF 
;

// Rule XpathPrimaryExpr
ruleXpathPrimaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getAlternatives()); }
		(rule__XpathPrimaryExpr__Alternatives)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathStep
entryRuleXpathStep
:
{ before(grammarAccess.getXpathStepRule()); }
	 ruleXpathStep
{ after(grammarAccess.getXpathStepRule()); } 
	 EOF 
;

// Rule XpathStep
ruleXpathStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathStepAccess().getAlternatives()); }
		(rule__XpathStep__Alternatives)
		{ after(grammarAccess.getXpathStepAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDot
entryRuleDot
:
{ before(grammarAccess.getDotRule()); }
	 ruleDot
{ after(grammarAccess.getDotRule()); } 
	 EOF 
;

// Rule Dot
ruleDot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDotAccess().getFullStopKeyword()); }
		FullStop
		{ after(grammarAccess.getDotAccess().getFullStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDotDot
entryRuleDotDot
:
{ before(grammarAccess.getDotDotRule()); }
	 ruleDotDot
{ after(grammarAccess.getDotDotRule()); } 
	 EOF 
;

// Rule DotDot
ruleDotDot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDotDotAccess().getFullStopFullStopKeyword()); }
		FullStopFullStop
		{ after(grammarAccess.getDotDotAccess().getFullStopFullStopKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathNodeTest
entryRuleXpathNodeTest
:
{ before(grammarAccess.getXpathNodeTestRule()); }
	 ruleXpathNodeTest
{ after(grammarAccess.getXpathNodeTestRule()); } 
	 EOF 
;

// Rule XpathNodeTest
ruleXpathNodeTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathNodeTestAccess().getAlternatives()); }
		(rule__XpathNodeTest__Alternatives)
		{ after(grammarAccess.getXpathNodeTestAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathNameTest
entryRuleXpathNameTest
:
{ before(grammarAccess.getXpathNameTestRule()); }
	 ruleXpathNameTest
{ after(grammarAccess.getXpathNameTestRule()); } 
	 EOF 
;

// Rule XpathNameTest
ruleXpathNameTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathNameTestAccess().getGroup()); }
		(rule__XpathNameTest__Group__0)
		{ after(grammarAccess.getXpathNameTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathNodeType
entryRuleXpathNodeType
:
{ before(grammarAccess.getXpathNodeTypeRule()); }
	 ruleXpathNodeType
{ after(grammarAccess.getXpathNodeTypeRule()); } 
	 EOF 
;

// Rule XpathNodeType
ruleXpathNodeType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathNodeTypeAccess().getAlternatives()); }
		(rule__XpathNodeType__Alternatives)
		{ after(grammarAccess.getXpathNodeTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathAxisName
entryRuleXpathAxisName
:
{ before(grammarAccess.getXpathAxisNameRule()); }
	 ruleXpathAxisName
{ after(grammarAccess.getXpathAxisNameRule()); } 
	 EOF 
;

// Rule XpathAxisName
ruleXpathAxisName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getAlternatives()); }
		(rule__XpathAxisName__Alternatives)
		{ after(grammarAccess.getXpathAxisNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXpathIDOrKw
entryRuleXpathIDOrKw
:
{ before(grammarAccess.getXpathIDOrKwRule()); }
	 ruleXpathIDOrKw
{ after(grammarAccess.getXpathIDOrKwRule()); } 
	 EOF 
;

// Rule XpathIDOrKw
ruleXpathIDOrKw 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getAlternatives()); }
		(rule__XpathIDOrKw__Alternatives)
		{ after(grammarAccess.getXpathIDOrKwAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQNAME
entryRuleQNAME
:
{ before(grammarAccess.getQNAMERule()); }
	 ruleQNAME
{ after(grammarAccess.getQNAMERule()); } 
	 EOF 
;

// Rule QNAME
ruleQNAME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQNAMEAccess().getGroup()); }
		(rule__QNAME__Group__0)
		{ after(grammarAccess.getQNAMEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall()); }
			(RULE_STRING)
			{ after(grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall()); }
		)
		(
			{ before(grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall()); }
			(RULE_STRING)*
			{ after(grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdOrKw
entryRuleIdOrKw
:
{ before(grammarAccess.getIdOrKwRule()); }
	 ruleIdOrKw
{ after(grammarAccess.getIdOrKwRule()); } 
	 EOF 
;

// Rule IdOrKw
ruleIdOrKw 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdOrKwAccess().getAlternatives()); }
		(rule__IdOrKw__Alternatives)
		{ after(grammarAccess.getIdOrKwAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedTypeName
entryRuleQualifiedTypeName
:
{ before(grammarAccess.getQualifiedTypeNameRule()); }
	 ruleQualifiedTypeName
{ after(grammarAccess.getQualifiedTypeNameRule()); } 
	 EOF 
;

// Rule QualifiedTypeName
ruleQualifiedTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedTypeNameAccess().getGroup()); }
		(rule__QualifiedTypeName__Group__0)
		{ after(grammarAccess.getQualifiedTypeNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBUILTIN_TYPE
entryRuleBUILTIN_TYPE
:
{ before(grammarAccess.getBUILTIN_TYPERule()); }
	 ruleBUILTIN_TYPE
{ after(grammarAccess.getBUILTIN_TYPERule()); } 
	 EOF 
;

// Rule BUILTIN_TYPE
ruleBUILTIN_TYPE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getAlternatives()); }
		(rule__BUILTIN_TYPE__Alternatives)
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKEYWORD
entryRuleKEYWORD
:
{ before(grammarAccess.getKEYWORDRule()); }
	 ruleKEYWORD
{ after(grammarAccess.getKEYWORDRule()); } 
	 EOF 
;

// Rule KEYWORD
ruleKEYWORD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKEYWORDAccess().getAlternatives()); }
		(rule__KEYWORD__Alternatives)
		{ after(grammarAccess.getKEYWORDAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTATEMENT_KEYWORD
entryRuleSTATEMENT_KEYWORD
:
{ before(grammarAccess.getSTATEMENT_KEYWORDRule()); }
	 ruleSTATEMENT_KEYWORD
{ after(grammarAccess.getSTATEMENT_KEYWORDRule()); } 
	 EOF 
;

// Rule STATEMENT_KEYWORD
ruleSTATEMENT_KEYWORD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getAlternatives()); }
		(rule__STATEMENT_KEYWORD__Alternatives)
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractModuleAccess().getModuleParserRuleCall_0()); }
		ruleModule
		{ after(grammarAccess.getAbstractModuleAccess().getModuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractModuleAccess().getSubmoduleParserRuleCall_1()); }
		ruleSubmodule
		{ after(grammarAccess.getAbstractModuleAccess().getSubmoduleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementEndAccess().getGroup_0()); }
		(rule__StatementEnd__Group_0__0)
		{ after(grammarAccess.getStatementEndAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementEndAccess().getSemicolonKeyword_1()); }
		Semicolon
		{ after(grammarAccess.getStatementEndAccess().getSemicolonKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSchemaNodeParserRuleCall_0()); }
		ruleSchemaNode
		{ after(grammarAccess.getStatementAccess().getSchemaNodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getOtherStatementParserRuleCall_1()); }
		ruleOtherStatement
		{ after(grammarAccess.getStatementAccess().getOtherStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractImport__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractImportAccess().getImportParserRuleCall_0()); }
		ruleImport
		{ after(grammarAccess.getAbstractImportAccess().getImportParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractImportAccess().getIncludeParserRuleCall_1()); }
		ruleInclude
		{ after(grammarAccess.getAbstractImportAccess().getIncludeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSchemaNodeAccess().getDataSchemaNodeParserRuleCall_0()); }
		ruleDataSchemaNode
		{ after(grammarAccess.getSchemaNodeAccess().getDataSchemaNodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getExtensionParserRuleCall_1()); }
		ruleExtension
		{ after(grammarAccess.getSchemaNodeAccess().getExtensionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getFeatureParserRuleCall_2()); }
		ruleFeature
		{ after(grammarAccess.getSchemaNodeAccess().getFeatureParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getGroupingParserRuleCall_3()); }
		ruleGrouping
		{ after(grammarAccess.getSchemaNodeAccess().getGroupingParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getIdentityParserRuleCall_4()); }
		ruleIdentity
		{ after(grammarAccess.getSchemaNodeAccess().getIdentityParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getNotificationParserRuleCall_5()); }
		ruleNotification
		{ after(grammarAccess.getSchemaNodeAccess().getNotificationParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getRpcParserRuleCall_6()); }
		ruleRpc
		{ after(grammarAccess.getSchemaNodeAccess().getRpcParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getActionParserRuleCall_7()); }
		ruleAction
		{ after(grammarAccess.getSchemaNodeAccess().getActionParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getInputParserRuleCall_8()); }
		ruleInput
		{ after(grammarAccess.getSchemaNodeAccess().getInputParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getOutputParserRuleCall_9()); }
		ruleOutput
		{ after(grammarAccess.getSchemaNodeAccess().getOutputParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getSchemaNodeAccess().getTypedefParserRuleCall_10()); }
		ruleTypedef
		{ after(grammarAccess.getSchemaNodeAccess().getTypedefParserRuleCall_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataSchemaNode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getAnydataParserRuleCall_0()); }
		ruleAnydata
		{ after(grammarAccess.getDataSchemaNodeAccess().getAnydataParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getAnyxmlParserRuleCall_1()); }
		ruleAnyxml
		{ after(grammarAccess.getDataSchemaNodeAccess().getAnyxmlParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getContainerParserRuleCall_2()); }
		ruleContainer
		{ after(grammarAccess.getDataSchemaNodeAccess().getContainerParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getChoiceParserRuleCall_3()); }
		ruleChoice
		{ after(grammarAccess.getDataSchemaNodeAccess().getChoiceParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getCaseParserRuleCall_4()); }
		ruleCase
		{ after(grammarAccess.getDataSchemaNodeAccess().getCaseParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getListParserRuleCall_5()); }
		ruleList
		{ after(grammarAccess.getDataSchemaNodeAccess().getListParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getLeafParserRuleCall_6()); }
		ruleLeaf
		{ after(grammarAccess.getDataSchemaNodeAccess().getLeafParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getDataSchemaNodeAccess().getLeafListParserRuleCall_7()); }
		ruleLeafList
		{ after(grammarAccess.getDataSchemaNodeAccess().getLeafListParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOtherStatementAccess().getAbstractModuleParserRuleCall_0()); }
		ruleAbstractModule
		{ after(grammarAccess.getOtherStatementAccess().getAbstractModuleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getAbstractImportParserRuleCall_1()); }
		ruleAbstractImport
		{ after(grammarAccess.getOtherStatementAccess().getAbstractImportParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getArgumentParserRuleCall_2()); }
		ruleArgument
		{ after(grammarAccess.getOtherStatementAccess().getArgumentParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getAugmentParserRuleCall_3()); }
		ruleAugment
		{ after(grammarAccess.getOtherStatementAccess().getAugmentParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getBaseParserRuleCall_4()); }
		ruleBase
		{ after(grammarAccess.getOtherStatementAccess().getBaseParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getBelongsToParserRuleCall_5()); }
		ruleBelongsTo
		{ after(grammarAccess.getOtherStatementAccess().getBelongsToParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getConfigParserRuleCall_6()); }
		ruleConfig
		{ after(grammarAccess.getOtherStatementAccess().getConfigParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getContactParserRuleCall_7()); }
		ruleContact
		{ after(grammarAccess.getOtherStatementAccess().getContactParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getDefaultParserRuleCall_8()); }
		ruleDefault
		{ after(grammarAccess.getOtherStatementAccess().getDefaultParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getDescriptionParserRuleCall_9()); }
		ruleDescription
		{ after(grammarAccess.getOtherStatementAccess().getDescriptionParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getEnumerableParserRuleCall_10()); }
		ruleEnumerable
		{ after(grammarAccess.getOtherStatementAccess().getEnumerableParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getErrorAppTagParserRuleCall_11()); }
		ruleErrorAppTag
		{ after(grammarAccess.getOtherStatementAccess().getErrorAppTagParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getErrorMessageParserRuleCall_12()); }
		ruleErrorMessage
		{ after(grammarAccess.getOtherStatementAccess().getErrorMessageParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getDeviationParserRuleCall_13()); }
		ruleDeviation
		{ after(grammarAccess.getOtherStatementAccess().getDeviationParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getDeviateParserRuleCall_14()); }
		ruleDeviate
		{ after(grammarAccess.getOtherStatementAccess().getDeviateParserRuleCall_14()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getFractionDigitsParserRuleCall_15()); }
		ruleFractionDigits
		{ after(grammarAccess.getOtherStatementAccess().getFractionDigitsParserRuleCall_15()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getIfFeatureParserRuleCall_16()); }
		ruleIfFeature
		{ after(grammarAccess.getOtherStatementAccess().getIfFeatureParserRuleCall_16()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getKeyParserRuleCall_17()); }
		ruleKey
		{ after(grammarAccess.getOtherStatementAccess().getKeyParserRuleCall_17()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getMandatoryParserRuleCall_18()); }
		ruleMandatory
		{ after(grammarAccess.getOtherStatementAccess().getMandatoryParserRuleCall_18()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getMaxElementsParserRuleCall_19()); }
		ruleMaxElements
		{ after(grammarAccess.getOtherStatementAccess().getMaxElementsParserRuleCall_19()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getMinElementsParserRuleCall_20()); }
		ruleMinElements
		{ after(grammarAccess.getOtherStatementAccess().getMinElementsParserRuleCall_20()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getModifierParserRuleCall_21()); }
		ruleModifier
		{ after(grammarAccess.getOtherStatementAccess().getModifierParserRuleCall_21()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getMustParserRuleCall_22()); }
		ruleMust
		{ after(grammarAccess.getOtherStatementAccess().getMustParserRuleCall_22()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getNamespaceParserRuleCall_23()); }
		ruleNamespace
		{ after(grammarAccess.getOtherStatementAccess().getNamespaceParserRuleCall_23()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getOrderedParserRuleCall_24()); }
		ruleOrdered
		{ after(grammarAccess.getOtherStatementAccess().getOrderedParserRuleCall_24()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getOrderedByParserRuleCall_25()); }
		ruleOrderedBy
		{ after(grammarAccess.getOtherStatementAccess().getOrderedByParserRuleCall_25()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getOrganizationParserRuleCall_26()); }
		ruleOrganization
		{ after(grammarAccess.getOtherStatementAccess().getOrganizationParserRuleCall_26()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getPathParserRuleCall_27()); }
		rulePath
		{ after(grammarAccess.getOtherStatementAccess().getPathParserRuleCall_27()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getPatternParserRuleCall_28()); }
		rulePattern
		{ after(grammarAccess.getOtherStatementAccess().getPatternParserRuleCall_28()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getPrefixParserRuleCall_29()); }
		rulePrefix
		{ after(grammarAccess.getOtherStatementAccess().getPrefixParserRuleCall_29()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getPresenceParserRuleCall_30()); }
		rulePresence
		{ after(grammarAccess.getOtherStatementAccess().getPresenceParserRuleCall_30()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getReferenceParserRuleCall_31()); }
		ruleReference
		{ after(grammarAccess.getOtherStatementAccess().getReferenceParserRuleCall_31()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getRefineParserRuleCall_32()); }
		ruleRefine
		{ after(grammarAccess.getOtherStatementAccess().getRefineParserRuleCall_32()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getRefinableParserRuleCall_33()); }
		ruleRefinable
		{ after(grammarAccess.getOtherStatementAccess().getRefinableParserRuleCall_33()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getRequireInstanceParserRuleCall_34()); }
		ruleRequireInstance
		{ after(grammarAccess.getOtherStatementAccess().getRequireInstanceParserRuleCall_34()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getRevisionParserRuleCall_35()); }
		ruleRevision
		{ after(grammarAccess.getOtherStatementAccess().getRevisionParserRuleCall_35()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getRevisionDateParserRuleCall_36()); }
		ruleRevisionDate
		{ after(grammarAccess.getOtherStatementAccess().getRevisionDateParserRuleCall_36()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getStatusParserRuleCall_37()); }
		ruleStatus
		{ after(grammarAccess.getOtherStatementAccess().getStatusParserRuleCall_37()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getTypeParserRuleCall_38()); }
		ruleType
		{ after(grammarAccess.getOtherStatementAccess().getTypeParserRuleCall_38()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getUniqueParserRuleCall_39()); }
		ruleUnique
		{ after(grammarAccess.getOtherStatementAccess().getUniqueParserRuleCall_39()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getUnitsParserRuleCall_40()); }
		ruleUnits
		{ after(grammarAccess.getOtherStatementAccess().getUnitsParserRuleCall_40()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getUnknownParserRuleCall_41()); }
		ruleUnknown
		{ after(grammarAccess.getOtherStatementAccess().getUnknownParserRuleCall_41()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getUsesParserRuleCall_42()); }
		ruleUses
		{ after(grammarAccess.getOtherStatementAccess().getUsesParserRuleCall_42()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getWhenParserRuleCall_43()); }
		ruleWhen
		{ after(grammarAccess.getOtherStatementAccess().getWhenParserRuleCall_43()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getYangVersionParserRuleCall_44()); }
		ruleYangVersion
		{ after(grammarAccess.getOtherStatementAccess().getYangVersionParserRuleCall_44()); }
	)
	|
	(
		{ before(grammarAccess.getOtherStatementAccess().getYinElementParserRuleCall_45()); }
		ruleYinElement
		{ after(grammarAccess.getOtherStatementAccess().getYinElementParserRuleCall_45()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumerable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerableAccess().getEnumParserRuleCall_0()); }
		ruleEnum
		{ after(grammarAccess.getEnumerableAccess().getEnumParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumerableAccess().getBitParserRuleCall_1()); }
		ruleBit
		{ after(grammarAccess.getEnumerableAccess().getBitParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ordered__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderedAccess().getPositionParserRuleCall_0()); }
		rulePosition
		{ after(grammarAccess.getOrderedAccess().getPositionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrderedAccess().getValueParserRuleCall_1()); }
		ruleValue
		{ after(grammarAccess.getOrderedAccess().getValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Refinable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefinableAccess().getRangeParserRuleCall_0()); }
		ruleRange
		{ after(grammarAccess.getRefinableAccess().getRangeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRefinableAccess().getLengthParserRuleCall_1()); }
		ruleLength
		{ after(grammarAccess.getRefinableAccess().getLengthParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getBuiltinAssignment_0()); }
		(rule__TypeReference__BuiltinAssignment_0)
		{ after(grammarAccess.getTypeReferenceAccess().getBuiltinAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeReferenceAccess().getTypeAssignment_1()); }
		(rule__TypeReference__TypeAssignment_1)
		{ after(grammarAccess.getTypeReferenceAccess().getTypeAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getGroup_0()); }
		(rule__IfFeatureExpression__Group_0__0)
		{ after(grammarAccess.getIfFeatureExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getGroup_1()); }
		(rule__IfFeatureExpression__Group_1__0)
		{ after(grammarAccess.getIfFeatureExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getGroup_2()); }
		(rule__IfFeatureExpression__Group_2__0)
		{ after(grammarAccess.getIfFeatureExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplicitRefinementExpressionAccess().getGroup_0()); }
		(rule__ExplicitRefinementExpression__Group_0__0)
		{ after(grammarAccess.getExplicitRefinementExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExplicitRefinementExpressionAccess().getGroup_1()); }
		(rule__ExplicitRefinementExpression__Group_1__0)
		{ after(grammarAccess.getExplicitRefinementExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getExplicitRefinementExpressionAccess().getGroup_2()); }
		(rule__ExplicitRefinementExpression__Group_2__0)
		{ after(grammarAccess.getExplicitRefinementExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathExpressionAccess().getGroup_0()); }
		(rule__XpathExpression__Group_0__0)
		{ after(grammarAccess.getXpathExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathExpressionAccess().getParsedXpathExpressionParserRuleCall_1()); }
		ruleParsedXpathExpression
		{ after(grammarAccess.getXpathExpressionAccess().getParsedXpathExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathEqualityExprAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
		EqualsSign
		{ after(grammarAccess.getXpathEqualityExprAccess().getOperatorEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathEqualityExprAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		ExclamationMarkEqualsSign
		{ after(grammarAccess.getXpathEqualityExprAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
		LessThanSign
		{ after(grammarAccess.getXpathRelationalExprAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getOperatorGreaterThanSignKeyword_1_1_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getXpathRelationalExprAccess().getOperatorGreaterThanSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getXpathRelationalExprAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getXpathRelationalExprAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathAdditiveExprAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getXpathAdditiveExprAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAdditiveExprAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getXpathAdditiveExprAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorDivKeyword_1_1_0_1()); }
		Div
		{ after(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorDivKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorModKeyword_1_1_0_2()); }
		Mod
		{ after(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorModKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathUnaryExprAccess().getGroup_0()); }
		(rule__XpathUnaryExpr__Group_0__0)
		{ after(grammarAccess.getXpathUnaryExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathUnaryExprAccess().getXpathUnionExprParserRuleCall_1()); }
		ruleXpathUnionExpr
		{ after(grammarAccess.getXpathUnaryExprAccess().getXpathUnionExprParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_0()); }
		(rule__XpathPrimaryExpr__Group_0__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_1()); }
		(rule__XpathPrimaryExpr__Group_1__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_2()); }
		(rule__XpathPrimaryExpr__Group_2__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_3()); }
		(rule__XpathPrimaryExpr__Group_3__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_4()); }
		(rule__XpathPrimaryExpr__Group_4__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_5()); }
		(rule__XpathPrimaryExpr__Group_5__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_6()); }
		(rule__XpathPrimaryExpr__Group_6__0)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathStepAccess().getGroup_0()); }
		(rule__XpathStep__Group_0__0)
		{ after(grammarAccess.getXpathStepAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathStepAccess().getGroup_1()); }
		(rule__XpathStep__Group_1__0)
		{ after(grammarAccess.getXpathStepAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathStepAccess().getGroup_2()); }
		(rule__XpathStep__Group_2__0)
		{ after(grammarAccess.getXpathStepAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getXpathStepAccess().getGroup_3()); }
		(rule__XpathStep__Group_3__0)
		{ after(grammarAccess.getXpathStepAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathNodeTestAccess().getXpathNameTestParserRuleCall_0()); }
		ruleXpathNameTest
		{ after(grammarAccess.getXpathNodeTestAccess().getXpathNameTestParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathNodeTestAccess().getGroup_1()); }
		(rule__XpathNodeTest__Group_1__0)
		{ after(grammarAccess.getXpathNodeTestAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathNodeTestAccess().getGroup_2()); }
		(rule__XpathNodeTest__Group_2__0)
		{ after(grammarAccess.getXpathNodeTestAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathNodeTypeAccess().getCommentKeyword_0()); }
		Comment
		{ after(grammarAccess.getXpathNodeTypeAccess().getCommentKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathNodeTypeAccess().getTextKeyword_1()); }
		Text
		{ after(grammarAccess.getXpathNodeTypeAccess().getTextKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathNodeTypeAccess().getNodeKeyword_2()); }
		Node
		{ after(grammarAccess.getXpathNodeTypeAccess().getNodeKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAxisName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getAncestorKeyword_0()); }
		Ancestor
		{ after(grammarAccess.getXpathAxisNameAccess().getAncestorKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getAncestorOrSelfKeyword_1()); }
		AncestorOrSelf
		{ after(grammarAccess.getXpathAxisNameAccess().getAncestorOrSelfKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getAttributeKeyword_2()); }
		Attribute
		{ after(grammarAccess.getXpathAxisNameAccess().getAttributeKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getChildKeyword_3()); }
		Child
		{ after(grammarAccess.getXpathAxisNameAccess().getChildKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getDescendantKeyword_4()); }
		Descendant
		{ after(grammarAccess.getXpathAxisNameAccess().getDescendantKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getDescendantOrSelfKeyword_5()); }
		DescendantOrSelf
		{ after(grammarAccess.getXpathAxisNameAccess().getDescendantOrSelfKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getFollowingKeyword_6()); }
		Following
		{ after(grammarAccess.getXpathAxisNameAccess().getFollowingKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getFollowingSiblingKeyword_7()); }
		FollowingSibling
		{ after(grammarAccess.getXpathAxisNameAccess().getFollowingSiblingKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getNamespaceKeyword_8()); }
		Namespace
		{ after(grammarAccess.getXpathAxisNameAccess().getNamespaceKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getParentKeyword_9()); }
		Parent
		{ after(grammarAccess.getXpathAxisNameAccess().getParentKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getPrecedingKeyword_10()); }
		Preceding
		{ after(grammarAccess.getXpathAxisNameAccess().getPrecedingKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getPrecedingSiblingKeyword_11()); }
		PrecedingSibling
		{ after(grammarAccess.getXpathAxisNameAccess().getPrecedingSiblingKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getXpathAxisNameAccess().getSelfKeyword_12()); }
		Self
		{ after(grammarAccess.getXpathAxisNameAccess().getSelfKeyword_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathIDOrKw__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getXpathIDOrKwAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getDivKeyword_1()); }
		Div
		{ after(grammarAccess.getXpathIDOrKwAccess().getDivKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getAndKeyword_2()); }
		And
		{ after(grammarAccess.getXpathIDOrKwAccess().getAndKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getOrKeyword_3()); }
		Or
		{ after(grammarAccess.getXpathIDOrKwAccess().getOrKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getModKeyword_4()); }
		Mod
		{ after(grammarAccess.getXpathIDOrKwAccess().getModKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getXpathAxisNameParserRuleCall_5()); }
		ruleXpathAxisName
		{ after(grammarAccess.getXpathIDOrKwAccess().getXpathAxisNameParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getXpathNodeTypeParserRuleCall_6()); }
		ruleXpathNodeType
		{ after(grammarAccess.getXpathIDOrKwAccess().getXpathNodeTypeParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getXpathIDOrKwAccess().getAsteriskKeyword_7()); }
		Asterisk
		{ after(grammarAccess.getXpathIDOrKwAccess().getAsteriskKeyword_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdOrKw__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdOrKwAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdOrKwAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIdOrKwAccess().getBUILTIN_TYPEParserRuleCall_1()); }
		ruleBUILTIN_TYPE
		{ after(grammarAccess.getIdOrKwAccess().getBUILTIN_TYPEParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getIdOrKwAccess().getKEYWORDParserRuleCall_2()); }
		ruleKEYWORD
		{ after(grammarAccess.getIdOrKwAccess().getKEYWORDParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQualifiedTypeNameAccess().getIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getQualifiedTypeNameAccess().getIDTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedTypeNameAccess().getKEYWORDParserRuleCall_0_0_1()); }
		ruleKEYWORD
		{ after(grammarAccess.getQualifiedTypeNameAccess().getKEYWORDParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQualifiedTypeNameAccess().getIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getQualifiedTypeNameAccess().getIDTerminalRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getQualifiedTypeNameAccess().getKEYWORDParserRuleCall_1_1()); }
		ruleKEYWORD
		{ after(grammarAccess.getQualifiedTypeNameAccess().getKEYWORDParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BUILTIN_TYPE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getBinaryKeyword_0()); }
		Binary
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getBinaryKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getBitsKeyword_1()); }
		Bits
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getBitsKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getBooleanKeyword_2()); }
		Boolean
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getBooleanKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getDecimal64Keyword_3()); }
		Decimal64
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getDecimal64Keyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getEmptyKeyword_4()); }
		Empty
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getEmptyKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getEnumerationKeyword_5()); }
		Enumeration
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getEnumerationKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getIdentityrefKeyword_6()); }
		Identityref
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getIdentityrefKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getInstanceIdentifierKeyword_7()); }
		InstanceIdentifier
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getInstanceIdentifierKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getInt8Keyword_8()); }
		Int8
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getInt8Keyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getInt16Keyword_9()); }
		Int16
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getInt16Keyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getInt32Keyword_10()); }
		Int32
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getInt32Keyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getInt64Keyword_11()); }
		Int64
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getInt64Keyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getLeafrefKeyword_12()); }
		Leafref
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getLeafrefKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getStringKeyword_13()); }
		String
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getStringKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getUint8Keyword_14()); }
		Uint8
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getUint8Keyword_14()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getUint16Keyword_15()); }
		Uint16
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getUint16Keyword_15()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getUint32Keyword_16()); }
		Uint32
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getUint32Keyword_16()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getUint64Keyword_17()); }
		Uint64
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getUint64Keyword_17()); }
	)
	|
	(
		{ before(grammarAccess.getBUILTIN_TYPEAccess().getUnionKeyword_18()); }
		Union
		{ after(grammarAccess.getBUILTIN_TYPEAccess().getUnionKeyword_18()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KEYWORD__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKEYWORDAccess().getSTATEMENT_KEYWORDParserRuleCall_0()); }
		ruleSTATEMENT_KEYWORD
		{ after(grammarAccess.getKEYWORDAccess().getSTATEMENT_KEYWORDParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getAddKeyword_1()); }
		Add
		{ after(grammarAccess.getKEYWORDAccess().getAddKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getCurrentKeyword_2()); }
		Current
		{ after(grammarAccess.getKEYWORDAccess().getCurrentKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getDeleteKeyword_3()); }
		Delete
		{ after(grammarAccess.getKEYWORDAccess().getDeleteKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getDeprecatedKeyword_4()); }
		Deprecated
		{ after(grammarAccess.getKEYWORDAccess().getDeprecatedKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getFalseKeyword_5()); }
		False
		{ after(grammarAccess.getKEYWORDAccess().getFalseKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getMaxKeyword_6()); }
		Max
		{ after(grammarAccess.getKEYWORDAccess().getMaxKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getMinKeyword_7()); }
		Min
		{ after(grammarAccess.getKEYWORDAccess().getMinKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getNotSupportedKeyword_8()); }
		NotSupported
		{ after(grammarAccess.getKEYWORDAccess().getNotSupportedKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getObsoleteKeyword_9()); }
		Obsolete
		{ after(grammarAccess.getKEYWORDAccess().getObsoleteKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getReplaceKeyword_10()); }
		Replace
		{ after(grammarAccess.getKEYWORDAccess().getReplaceKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getSystemKeyword_11()); }
		KW_System
		{ after(grammarAccess.getKEYWORDAccess().getSystemKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getTrueKeyword_12()); }
		True
		{ after(grammarAccess.getKEYWORDAccess().getTrueKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getUnboundedKeyword_13()); }
		Unbounded
		{ after(grammarAccess.getKEYWORDAccess().getUnboundedKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getKEYWORDAccess().getUserKeyword_14()); }
		User
		{ after(grammarAccess.getKEYWORDAccess().getUserKeyword_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STATEMENT_KEYWORD__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getActionKeyword_0()); }
		Action
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getActionKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getAnydataKeyword_1()); }
		Anydata
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getAnydataKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getAnyxmlKeyword_2()); }
		Anyxml
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getAnyxmlKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getArgumentKeyword_3()); }
		Argument
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getArgumentKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getAugmentKeyword_4()); }
		Augment
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getAugmentKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getBaseKeyword_5()); }
		Base
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getBaseKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getBelongsToKeyword_6()); }
		BelongsTo
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getBelongsToKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getBitKeyword_7()); }
		Bit
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getBitKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getCaseKeyword_8()); }
		Case
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getCaseKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getChoiceKeyword_9()); }
		Choice
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getChoiceKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getConfigKeyword_10()); }
		Config
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getConfigKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getContactKeyword_11()); }
		Contact
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getContactKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getContainerKeyword_12()); }
		Container
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getContainerKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getDefaultKeyword_13()); }
		Default
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getDefaultKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getDescriptionKeyword_14()); }
		Description
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getDescriptionKeyword_14()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getEnumKeyword_15()); }
		Enum
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getEnumKeyword_15()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getErrorAppTagKeyword_16()); }
		ErrorAppTag
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getErrorAppTagKeyword_16()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getErrorMessageKeyword_17()); }
		ErrorMessage
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getErrorMessageKeyword_17()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getExtensionKeyword_18()); }
		Extension
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getExtensionKeyword_18()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getDeviationKeyword_19()); }
		Deviation
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getDeviationKeyword_19()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getDeviateKeyword_20()); }
		Deviate
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getDeviateKeyword_20()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getFeatureKeyword_21()); }
		Feature
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getFeatureKeyword_21()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getFractionDigitsKeyword_22()); }
		FractionDigits
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getFractionDigitsKeyword_22()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getGroupingKeyword_23()); }
		Grouping
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getGroupingKeyword_23()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getIdentityKeyword_24()); }
		Identity
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getIdentityKeyword_24()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getIfFeatureKeyword_25()); }
		IfFeature
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getIfFeatureKeyword_25()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getImportKeyword_26()); }
		Import
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getImportKeyword_26()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getIncludeKeyword_27()); }
		Include
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getIncludeKeyword_27()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getInputKeyword_28()); }
		Input
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getInputKeyword_28()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getKeyKeyword_29()); }
		Key
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getKeyKeyword_29()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getLeafKeyword_30()); }
		Leaf
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getLeafKeyword_30()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getLeafListKeyword_31()); }
		LeafList
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getLeafListKeyword_31()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getLengthKeyword_32()); }
		Length
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getLengthKeyword_32()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getListKeyword_33()); }
		List
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getListKeyword_33()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getMandatoryKeyword_34()); }
		Mandatory
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getMandatoryKeyword_34()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getMaxElementsKeyword_35()); }
		MaxElements
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getMaxElementsKeyword_35()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getMinElementsKeyword_36()); }
		MinElements
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getMinElementsKeyword_36()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getModifierKeyword_37()); }
		Modifier
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getModifierKeyword_37()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getModuleKeyword_38()); }
		Module
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getModuleKeyword_38()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getMustKeyword_39()); }
		Must
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getMustKeyword_39()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getNamespaceKeyword_40()); }
		Namespace
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getNamespaceKeyword_40()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getNotificationKeyword_41()); }
		Notification
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getNotificationKeyword_41()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getOrderedByKeyword_42()); }
		OrderedBy
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getOrderedByKeyword_42()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getOrganizationKeyword_43()); }
		Organization
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getOrganizationKeyword_43()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getOutputKeyword_44()); }
		Output
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getOutputKeyword_44()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getPathKeyword_45()); }
		Path
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getPathKeyword_45()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getPatternKeyword_46()); }
		Pattern
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getPatternKeyword_46()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getPositionKeyword_47()); }
		Position
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getPositionKeyword_47()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getPrefixKeyword_48()); }
		Prefix
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getPrefixKeyword_48()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getPresenceKeyword_49()); }
		Presence
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getPresenceKeyword_49()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getRangeKeyword_50()); }
		Range
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getRangeKeyword_50()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getReferenceKeyword_51()); }
		Reference
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getReferenceKeyword_51()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getRefineKeyword_52()); }
		Refine
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getRefineKeyword_52()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getRequireInstanceKeyword_53()); }
		RequireInstance
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getRequireInstanceKeyword_53()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getRevisionKeyword_54()); }
		Revision
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getRevisionKeyword_54()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getRevisionDateKeyword_55()); }
		RevisionDate
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getRevisionDateKeyword_55()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getRpcKeyword_56()); }
		Rpc
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getRpcKeyword_56()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getStatusKeyword_57()); }
		Status
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getStatusKeyword_57()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getSubmoduleKeyword_58()); }
		Submodule
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getSubmoduleKeyword_58()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getTypeKeyword_59()); }
		Type
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getTypeKeyword_59()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getTypedefKeyword_60()); }
		Typedef
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getTypedefKeyword_60()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getUniqueKeyword_61()); }
		Unique
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getUniqueKeyword_61()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getUnitsKeyword_62()); }
		Units
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getUnitsKeyword_62()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getUsesKeyword_63()); }
		Uses
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getUsesKeyword_63()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getValueKeyword_64()); }
		Value
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getValueKeyword_64()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getWhenKeyword_65()); }
		When
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getWhenKeyword_65()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getYangVersionKeyword_66()); }
		YangVersion
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getYangVersionKeyword_66()); }
	)
	|
	(
		{ before(grammarAccess.getSTATEMENT_KEYWORDAccess().getYinElementKeyword_67()); }
		YinElement
		{ after(grammarAccess.getSTATEMENT_KEYWORDAccess().getYinElementKeyword_67()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementEnd__Group_0__0__Impl
	rule__StatementEnd__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementEndAccess().getLeftCurlyBracketKeyword_0_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getStatementEndAccess().getLeftCurlyBracketKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementEnd__Group_0__1__Impl
	rule__StatementEnd__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementEndAccess().getSubstatementsAssignment_0_1()); }
	(rule__StatementEnd__SubstatementsAssignment_0_1)*
	{ after(grammarAccess.getStatementEndAccess().getSubstatementsAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementEnd__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementEnd__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementEndAccess().getRightCurlyBracketKeyword_0_2()); }
	RightCurlyBracket
	{ after(grammarAccess.getStatementEndAccess().getRightCurlyBracketKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getModuleKeyword_0()); }
	Module
	{ after(grammarAccess.getModuleAccess().getModuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getNameAssignment_1()); }
	(rule__Module__NameAssignment_1)
	{ after(grammarAccess.getModuleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getModuleAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YangVersion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YangVersion__Group__0__Impl
	rule__YangVersion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YangVersion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYangVersionAccess().getYangVersionKeyword_0()); }
	YangVersion
	{ after(grammarAccess.getYangVersionAccess().getYangVersionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YangVersion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YangVersion__Group__1__Impl
	rule__YangVersion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__YangVersion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYangVersionAccess().getYangVersionAssignment_1()); }
	(rule__YangVersion__YangVersionAssignment_1)
	{ after(grammarAccess.getYangVersionAccess().getYangVersionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YangVersion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YangVersion__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YangVersion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYangVersionAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getYangVersionAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0()); }
	Namespace
	{ after(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__1__Impl
	rule__Namespace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getUriAssignment_1()); }
	(rule__Namespace__UriAssignment_1)
	{ after(grammarAccess.getNamespaceAccess().getUriAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Namespace__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNamespaceAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getNamespaceAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__0__Impl
	rule__Prefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }
	Prefix
	{ after(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__1__Impl
	rule__Prefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getPrefixAssignment_1()); }
	(rule__Prefix__PrefixAssignment_1)
	{ after(grammarAccess.getPrefixAccess().getPrefixAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getPrefixAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	Import
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getModuleAssignment_1()); }
	(rule__Import__ModuleAssignment_1)
	{ after(grammarAccess.getImportAccess().getModuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getImportAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RevisionDate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RevisionDate__Group__0__Impl
	rule__RevisionDate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RevisionDate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRevisionDateAccess().getRevisionDateKeyword_0()); }
	RevisionDate
	{ after(grammarAccess.getRevisionDateAccess().getRevisionDateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RevisionDate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RevisionDate__Group__1__Impl
	rule__RevisionDate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RevisionDate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRevisionDateAccess().getDateAssignment_1()); }
	(rule__RevisionDate__DateAssignment_1)
	{ after(grammarAccess.getRevisionDateAccess().getDateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RevisionDate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RevisionDate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RevisionDate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRevisionDateAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getRevisionDateAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
	Include
	{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getModuleAssignment_1()); }
	(rule__Include__ModuleAssignment_1)
	{ after(grammarAccess.getIncludeAccess().getModuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getIncludeAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Organization__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Organization__Group__0__Impl
	rule__Organization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Organization__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrganizationAccess().getOrganizationKeyword_0()); }
	Organization
	{ after(grammarAccess.getOrganizationAccess().getOrganizationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Organization__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Organization__Group__1__Impl
	rule__Organization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Organization__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrganizationAccess().getOrganizationAssignment_1()); }
	(rule__Organization__OrganizationAssignment_1)
	{ after(grammarAccess.getOrganizationAccess().getOrganizationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Organization__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Organization__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Organization__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrganizationAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getOrganizationAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Contact__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contact__Group__0__Impl
	rule__Contact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactAccess().getContactKeyword_0()); }
	Contact
	{ after(grammarAccess.getContactAccess().getContactKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contact__Group__1__Impl
	rule__Contact__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactAccess().getContactAssignment_1()); }
	(rule__Contact__ContactAssignment_1)
	{ after(grammarAccess.getContactAccess().getContactAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Contact__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getContactAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Revision__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Revision__Group__0__Impl
	rule__Revision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Revision__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRevisionAccess().getRevisionKeyword_0()); }
	Revision
	{ after(grammarAccess.getRevisionAccess().getRevisionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Revision__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Revision__Group__1__Impl
	rule__Revision__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Revision__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRevisionAccess().getRevisionAssignment_1()); }
	(rule__Revision__RevisionAssignment_1)
	{ after(grammarAccess.getRevisionAccess().getRevisionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Revision__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Revision__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Revision__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRevisionAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getRevisionAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Submodule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Submodule__Group__0__Impl
	rule__Submodule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Submodule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubmoduleAccess().getSubmoduleKeyword_0()); }
	Submodule
	{ after(grammarAccess.getSubmoduleAccess().getSubmoduleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Submodule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Submodule__Group__1__Impl
	rule__Submodule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Submodule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubmoduleAccess().getNameAssignment_1()); }
	(rule__Submodule__NameAssignment_1)
	{ after(grammarAccess.getSubmoduleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Submodule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Submodule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Submodule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubmoduleAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getSubmoduleAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BelongsTo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BelongsTo__Group__0__Impl
	rule__BelongsTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBelongsToAccess().getBelongsToKeyword_0()); }
	BelongsTo
	{ after(grammarAccess.getBelongsToAccess().getBelongsToKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BelongsTo__Group__1__Impl
	rule__BelongsTo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBelongsToAccess().getModuleAssignment_1()); }
	(rule__BelongsTo__ModuleAssignment_1)
	{ after(grammarAccess.getBelongsToAccess().getModuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BelongsTo__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBelongsToAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getBelongsToAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Typedef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Typedef__Group__0__Impl
	rule__Typedef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Typedef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedefAccess().getTypedefKeyword_0()); }
	Typedef
	{ after(grammarAccess.getTypedefAccess().getTypedefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Typedef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Typedef__Group__1__Impl
	rule__Typedef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Typedef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedefAccess().getNameAssignment_1()); }
	(rule__Typedef__NameAssignment_1)
	{ after(grammarAccess.getTypedefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Typedef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Typedef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Typedef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedefAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getTypedefAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Units__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Units__Group__0__Impl
	rule__Units__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Units__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsAccess().getUnitsKeyword_0()); }
	Units
	{ after(grammarAccess.getUnitsAccess().getUnitsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Units__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Units__Group__1__Impl
	rule__Units__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Units__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsAccess().getDefinitionAssignment_1()); }
	(rule__Units__DefinitionAssignment_1)
	{ after(grammarAccess.getUnitsAccess().getDefinitionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Units__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Units__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Units__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnitsAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getUnitsAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Default__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__0__Impl
	rule__Default__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getDefaultKeyword_0()); }
	Default
	{ after(grammarAccess.getDefaultAccess().getDefaultKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__1__Impl
	rule__Default__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getDefaultStringValueAssignment_1()); }
	(rule__Default__DefaultStringValueAssignment_1)
	{ after(grammarAccess.getDefaultAccess().getDefaultStringValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getDefaultAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
	Type
	{ after(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__1__Impl
	rule__Type__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTypeRefAssignment_1()); }
	(rule__Type__TypeRefAssignment_1)
	{ after(grammarAccess.getTypeAccess().getTypeRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getTypeAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Container__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__0__Impl
	rule__Container__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getContainerKeyword_0()); }
	Container
	{ after(grammarAccess.getContainerAccess().getContainerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__1__Impl
	rule__Container__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getNameAssignment_1()); }
	(rule__Container__NameAssignment_1)
	{ after(grammarAccess.getContainerAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getContainerAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Must__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Must__Group__0__Impl
	rule__Must__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Must__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMustAccess().getMustKeyword_0()); }
	Must
	{ after(grammarAccess.getMustAccess().getMustKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Must__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Must__Group__1__Impl
	rule__Must__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Must__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMustAccess().getConstraintAssignment_1()); }
	(rule__Must__ConstraintAssignment_1)
	{ after(grammarAccess.getMustAccess().getConstraintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Must__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Must__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Must__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMustAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getMustAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorMessage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorMessage__Group__0__Impl
	rule__ErrorMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorMessageAccess().getErrorMessageKeyword_0()); }
	ErrorMessage
	{ after(grammarAccess.getErrorMessageAccess().getErrorMessageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorMessage__Group__1__Impl
	rule__ErrorMessage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorMessageAccess().getMessageAssignment_1()); }
	(rule__ErrorMessage__MessageAssignment_1)
	{ after(grammarAccess.getErrorMessageAccess().getMessageAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorMessage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorMessageAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getErrorMessageAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorAppTag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorAppTag__Group__0__Impl
	rule__ErrorAppTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorAppTag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorAppTagAccess().getErrorAppTagKeyword_0()); }
	ErrorAppTag
	{ after(grammarAccess.getErrorAppTagAccess().getErrorAppTagKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorAppTag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorAppTag__Group__1__Impl
	rule__ErrorAppTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorAppTag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorAppTagAccess().getTagAssignment_1()); }
	(rule__ErrorAppTag__TagAssignment_1)
	{ after(grammarAccess.getErrorAppTagAccess().getTagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorAppTag__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorAppTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorAppTag__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorAppTagAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getErrorAppTagAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Presence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Presence__Group__0__Impl
	rule__Presence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Presence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPresenceAccess().getPresenceKeyword_0()); }
	Presence
	{ after(grammarAccess.getPresenceAccess().getPresenceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Presence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Presence__Group__1__Impl
	rule__Presence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Presence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPresenceAccess().getDescriptionAssignment_1()); }
	(rule__Presence__DescriptionAssignment_1)
	{ after(grammarAccess.getPresenceAccess().getDescriptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Presence__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Presence__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Presence__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPresenceAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getPresenceAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Leaf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__0__Impl
	rule__Leaf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getLeafKeyword_0()); }
	Leaf
	{ after(grammarAccess.getLeafAccess().getLeafKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__1__Impl
	rule__Leaf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getNameAssignment_1()); }
	(rule__Leaf__NameAssignment_1)
	{ after(grammarAccess.getLeafAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Leaf__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getLeafAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mandatory__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mandatory__Group__0__Impl
	rule__Mandatory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryAccess().getMandatoryKeyword_0()); }
	Mandatory
	{ after(grammarAccess.getMandatoryAccess().getMandatoryKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mandatory__Group__1__Impl
	rule__Mandatory__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryAccess().getIsMandatoryAssignment_1()); }
	(rule__Mandatory__IsMandatoryAssignment_1)
	{ after(grammarAccess.getMandatoryAccess().getIsMandatoryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mandatory__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getMandatoryAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeafList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeafList__Group__0__Impl
	rule__LeafList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeafList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafListAccess().getLeafListKeyword_0()); }
	LeafList
	{ after(grammarAccess.getLeafListAccess().getLeafListKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeafList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeafList__Group__1__Impl
	rule__LeafList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeafList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafListAccess().getNameAssignment_1()); }
	(rule__LeafList__NameAssignment_1)
	{ after(grammarAccess.getLeafListAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeafList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeafList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeafList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeafListAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getLeafListAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MinElements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinElements__Group__0__Impl
	rule__MinElements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinElements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinElementsAccess().getMinElementsKeyword_0()); }
	MinElements
	{ after(grammarAccess.getMinElementsAccess().getMinElementsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinElements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinElements__Group__1__Impl
	rule__MinElements__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinElements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinElementsAccess().getMinElementsAssignment_1()); }
	(rule__MinElements__MinElementsAssignment_1)
	{ after(grammarAccess.getMinElementsAccess().getMinElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinElements__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinElements__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinElements__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinElementsAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getMinElementsAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaxElements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxElements__Group__0__Impl
	rule__MaxElements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxElements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxElementsAccess().getMaxElementsKeyword_0()); }
	MaxElements
	{ after(grammarAccess.getMaxElementsAccess().getMaxElementsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxElements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxElements__Group__1__Impl
	rule__MaxElements__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxElements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxElementsAccess().getMaxElementsAssignment_1()); }
	(rule__MaxElements__MaxElementsAssignment_1)
	{ after(grammarAccess.getMaxElementsAccess().getMaxElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxElements__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxElements__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxElements__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxElementsAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getMaxElementsAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderedBy__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderedBy__Group__0__Impl
	rule__OrderedBy__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderedBy__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderedByAccess().getOrderedByKeyword_0()); }
	OrderedBy
	{ after(grammarAccess.getOrderedByAccess().getOrderedByKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderedBy__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderedBy__Group__1__Impl
	rule__OrderedBy__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderedBy__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderedByAccess().getOrderedByAssignment_1()); }
	(rule__OrderedBy__OrderedByAssignment_1)
	{ after(grammarAccess.getOrderedByAccess().getOrderedByAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderedBy__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrderedBy__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderedBy__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrderedByAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getOrderedByAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getListKeyword_0()); }
	List
	{ after(grammarAccess.getListAccess().getListKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getNameAssignment_1()); }
	(rule__List__NameAssignment_1)
	{ after(grammarAccess.getListAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getListAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Key__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__0__Impl
	rule__Key__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getKeyAction_0()); }
	()
	{ after(grammarAccess.getKeyAccess().getKeyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__1__Impl
	rule__Key__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getKeyKeyword_1()); }
	Key
	{ after(grammarAccess.getKeyAccess().getKeyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__2__Impl
	rule__Key__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getKeyAccess().getReferencesAssignment_2()); }
		(rule__Key__ReferencesAssignment_2)
		{ after(grammarAccess.getKeyAccess().getReferencesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getKeyAccess().getReferencesAssignment_2()); }
		(rule__Key__ReferencesAssignment_2)*
		{ after(grammarAccess.getKeyAccess().getReferencesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getStatementEndParserRuleCall_3()); }
	ruleStatementEnd
	{ after(grammarAccess.getKeyAccess().getStatementEndParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unique__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unique__Group__0__Impl
	rule__Unique__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueAccess().getUniqueAction_0()); }
	()
	{ after(grammarAccess.getUniqueAccess().getUniqueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unique__Group__1__Impl
	rule__Unique__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueAccess().getUniqueKeyword_1()); }
	Unique
	{ after(grammarAccess.getUniqueAccess().getUniqueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unique__Group__2__Impl
	rule__Unique__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueAccess().getDescendantSchemaNodeIdentifierReferencesParserRuleCall_2()); }
	ruleDescendantSchemaNodeIdentifierReferences
	{ after(grammarAccess.getUniqueAccess().getDescendantSchemaNodeIdentifierReferencesParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unique__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unique__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniqueAccess().getStatementEndParserRuleCall_3()); }
	ruleStatementEnd
	{ after(grammarAccess.getUniqueAccess().getStatementEndParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choice__Group__0__Impl
	rule__Choice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChoiceAccess().getChoiceKeyword_0()); }
	Choice
	{ after(grammarAccess.getChoiceAccess().getChoiceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choice__Group__1__Impl
	rule__Choice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChoiceAccess().getNameAssignment_1()); }
	(rule__Choice__NameAssignment_1)
	{ after(grammarAccess.getChoiceAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Choice__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChoiceAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getChoiceAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__0__Impl
	rule__Case__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getCaseKeyword_0()); }
	Case
	{ after(grammarAccess.getCaseAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__1__Impl
	rule__Case__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getNameAssignment_1()); }
	(rule__Case__NameAssignment_1)
	{ after(grammarAccess.getCaseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Case__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getCaseAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Anydata__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anydata__Group__0__Impl
	rule__Anydata__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anydata__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnydataAccess().getAnydataKeyword_0()); }
	Anydata
	{ after(grammarAccess.getAnydataAccess().getAnydataKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anydata__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anydata__Group__1__Impl
	rule__Anydata__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Anydata__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnydataAccess().getNameAssignment_1()); }
	(rule__Anydata__NameAssignment_1)
	{ after(grammarAccess.getAnydataAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anydata__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anydata__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anydata__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnydataAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getAnydataAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Anyxml__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anyxml__Group__0__Impl
	rule__Anyxml__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anyxml__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyxmlAccess().getAnyxmlKeyword_0()); }
	Anyxml
	{ after(grammarAccess.getAnyxmlAccess().getAnyxmlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anyxml__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anyxml__Group__1__Impl
	rule__Anyxml__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Anyxml__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyxmlAccess().getNameAssignment_1()); }
	(rule__Anyxml__NameAssignment_1)
	{ after(grammarAccess.getAnyxmlAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anyxml__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anyxml__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anyxml__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnyxmlAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getAnyxmlAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grouping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grouping__Group__0__Impl
	rule__Grouping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupingAccess().getGroupingKeyword_0()); }
	Grouping
	{ after(grammarAccess.getGroupingAccess().getGroupingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grouping__Group__1__Impl
	rule__Grouping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupingAccess().getNameAssignment_1()); }
	(rule__Grouping__NameAssignment_1)
	{ after(grammarAccess.getGroupingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grouping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroupingAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getGroupingAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Uses__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Uses__Group__0__Impl
	rule__Uses__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Uses__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsesAccess().getUsesKeyword_0()); }
	Uses
	{ after(grammarAccess.getUsesAccess().getUsesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Uses__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Uses__Group__1__Impl
	rule__Uses__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Uses__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsesAccess().getGroupingAssignment_1()); }
	(rule__Uses__GroupingAssignment_1)
	{ after(grammarAccess.getUsesAccess().getGroupingAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Uses__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Uses__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Uses__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsesAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getUsesAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Refine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Refine__Group__0__Impl
	rule__Refine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Refine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefineAccess().getRefineKeyword_0()); }
	Refine
	{ after(grammarAccess.getRefineAccess().getRefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Refine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Refine__Group__1__Impl
	rule__Refine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Refine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefineAccess().getNodeAssignment_1()); }
	(rule__Refine__NodeAssignment_1)
	{ after(grammarAccess.getRefineAccess().getNodeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Refine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Refine__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Refine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefineAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getRefineAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rpc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rpc__Group__0__Impl
	rule__Rpc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rpc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRpcAccess().getRpcKeyword_0()); }
	Rpc
	{ after(grammarAccess.getRpcAccess().getRpcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rpc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rpc__Group__1__Impl
	rule__Rpc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rpc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRpcAccess().getNameAssignment_1()); }
	(rule__Rpc__NameAssignment_1)
	{ after(grammarAccess.getRpcAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rpc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rpc__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rpc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRpcAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getRpcAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputAction_0()); }
	()
	{ after(grammarAccess.getInputAccess().getInputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputKeyword_1()); }
	Input
	{ after(grammarAccess.getInputAccess().getInputKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getNameAssignment_2()); }
	(rule__Input__NameAssignment_2)?
	{ after(grammarAccess.getInputAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getStatementEndParserRuleCall_3()); }
	ruleStatementEnd
	{ after(grammarAccess.getInputAccess().getStatementEndParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputAction_0()); }
	()
	{ after(grammarAccess.getOutputAccess().getOutputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
	rule__Output__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputKeyword_1()); }
	Output
	{ after(grammarAccess.getOutputAccess().getOutputKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__2__Impl
	rule__Output__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getNameAssignment_2()); }
	(rule__Output__NameAssignment_2)?
	{ after(grammarAccess.getOutputAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getStatementEndParserRuleCall_3()); }
	ruleStatementEnd
	{ after(grammarAccess.getOutputAccess().getStatementEndParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionKeyword_0()); }
	Action
	{ after(grammarAccess.getActionAccess().getActionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getNameAssignment_1()); }
	(rule__Action__NameAssignment_1)
	{ after(grammarAccess.getActionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getActionAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Notification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Notification__Group__0__Impl
	rule__Notification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Notification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotificationAccess().getNotificationKeyword_0()); }
	Notification
	{ after(grammarAccess.getNotificationAccess().getNotificationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Notification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Notification__Group__1__Impl
	rule__Notification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Notification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotificationAccess().getNameAssignment_1()); }
	(rule__Notification__NameAssignment_1)
	{ after(grammarAccess.getNotificationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Notification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Notification__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Notification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotificationAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getNotificationAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Augment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Augment__Group__0__Impl
	rule__Augment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Augment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAugmentAccess().getAugmentKeyword_0()); }
	Augment
	{ after(grammarAccess.getAugmentAccess().getAugmentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Augment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Augment__Group__1__Impl
	rule__Augment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Augment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAugmentAccess().getPathAssignment_1()); }
	(rule__Augment__PathAssignment_1)
	{ after(grammarAccess.getAugmentAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Augment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Augment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Augment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAugmentAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getAugmentAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Identity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identity__Group__0__Impl
	rule__Identity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentityAccess().getIdentityKeyword_0()); }
	Identity
	{ after(grammarAccess.getIdentityAccess().getIdentityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identity__Group__1__Impl
	rule__Identity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Identity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentityAccess().getNameAssignment_1()); }
	(rule__Identity__NameAssignment_1)
	{ after(grammarAccess.getIdentityAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentityAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getIdentityAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Base__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Base__Group__0__Impl
	rule__Base__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseAccess().getBaseKeyword_0()); }
	Base
	{ after(grammarAccess.getBaseAccess().getBaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Base__Group__1__Impl
	rule__Base__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseAccess().getReferenceAssignment_1()); }
	(rule__Base__ReferenceAssignment_1)
	{ after(grammarAccess.getBaseAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Base__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getBaseAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Extension__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extension__Group__0__Impl
	rule__Extension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtensionAccess().getExtensionKeyword_0()); }
	Extension
	{ after(grammarAccess.getExtensionAccess().getExtensionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extension__Group__1__Impl
	rule__Extension__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtensionAccess().getNameAssignment_1()); }
	(rule__Extension__NameAssignment_1)
	{ after(grammarAccess.getExtensionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extension__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtensionAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getExtensionAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getArgumentKeyword_0()); }
	Argument
	{ after(grammarAccess.getArgumentAccess().getArgumentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group__1__Impl
	rule__Argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
	(rule__Argument__NameAssignment_1)
	{ after(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Argument__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getArgumentAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__YinElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YinElement__Group__0__Impl
	rule__YinElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__YinElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYinElementAccess().getYinElementKeyword_0()); }
	YinElement
	{ after(grammarAccess.getYinElementAccess().getYinElementKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YinElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YinElement__Group__1__Impl
	rule__YinElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__YinElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYinElementAccess().getIsYinElementAssignment_1()); }
	(rule__YinElement__IsYinElementAssignment_1)
	{ after(grammarAccess.getYinElementAccess().getIsYinElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__YinElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__YinElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__YinElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYinElementAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getYinElementAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getFeatureKeyword_0()); }
	Feature
	{ after(grammarAccess.getFeatureAccess().getFeatureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getNameAssignment_1()); }
	(rule__Feature__NameAssignment_1)
	{ after(grammarAccess.getFeatureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getFeatureAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeature__Group__0__Impl
	rule__IfFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAccess().getIfFeatureKeyword_0()); }
	IfFeature
	{ after(grammarAccess.getIfFeatureAccess().getIfFeatureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeature__Group__1__Impl
	rule__IfFeature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAccess().getConditionAssignment_1()); }
	(rule__IfFeature__ConditionAssignment_1)
	{ after(grammarAccess.getIfFeatureAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getIfFeatureAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureOrExpression__Group__0__Impl
	rule__IfFeatureOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureOrExpressionAccess().getIfFeatureAndExpressionParserRuleCall_0()); }
	ruleIfFeatureAndExpression
	{ after(grammarAccess.getIfFeatureOrExpressionAccess().getIfFeatureAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureOrExpressionAccess().getGroup_1()); }
	(rule__IfFeatureOrExpression__Group_1__0)*
	{ after(grammarAccess.getIfFeatureOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureOrExpression__Group_1__0__Impl
	rule__IfFeatureOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureOrExpressionAccess().getBinaryOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIfFeatureOrExpressionAccess().getBinaryOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureOrExpression__Group_1__1__Impl
	rule__IfFeatureOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__IfFeatureOrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getIfFeatureOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__IfFeatureOrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getIfFeatureOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureAndExpression__Group__0__Impl
	rule__IfFeatureAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAndExpressionAccess().getIfFeatureExpressionParserRuleCall_0()); }
	ruleIfFeatureExpression
	{ after(grammarAccess.getIfFeatureAndExpressionAccess().getIfFeatureExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAndExpressionAccess().getGroup_1()); }
	(rule__IfFeatureAndExpression__Group_1__0)*
	{ after(grammarAccess.getIfFeatureAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureAndExpression__Group_1__0__Impl
	rule__IfFeatureAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAndExpressionAccess().getBinaryOperatorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIfFeatureAndExpressionAccess().getBinaryOperatorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureAndExpression__Group_1__1__Impl
	rule__IfFeatureAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__IfFeatureAndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__IfFeatureAndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getIfFeatureAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_0__0__Impl
	rule__IfFeatureExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getFeatureReferenceAction_0_0()); }
	()
	{ after(grammarAccess.getIfFeatureExpressionAccess().getFeatureReferenceAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getFeatureAssignment_0_1()); }
	(rule__IfFeatureExpression__FeatureAssignment_0_1)
	{ after(grammarAccess.getIfFeatureExpressionAccess().getFeatureAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_1__0__Impl
	rule__IfFeatureExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getUnaryOperationAction_1_0()); }
	()
	{ after(grammarAccess.getIfFeatureExpressionAccess().getUnaryOperationAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_1__1__Impl
	rule__IfFeatureExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__IfFeatureExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getIfFeatureExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getTargetAssignment_1_2()); }
	(rule__IfFeatureExpression__TargetAssignment_1_2)
	{ after(grammarAccess.getIfFeatureExpressionAccess().getTargetAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfFeatureExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_2__0__Impl
	rule__IfFeatureExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	LeftParenthesis
	{ after(grammarAccess.getIfFeatureExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_2__1__Impl
	rule__IfFeatureExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getIfFeatureOrExpressionParserRuleCall_2_1()); }
	ruleIfFeatureOrExpression
	{ after(grammarAccess.getIfFeatureExpressionAccess().getIfFeatureOrExpressionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfFeatureExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); }
	RightParenthesis
	{ after(grammarAccess.getIfFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Deviation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Deviation__Group__0__Impl
	rule__Deviation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviationAccess().getDeviationKeyword_0()); }
	Deviation
	{ after(grammarAccess.getDeviationAccess().getDeviationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Deviation__Group__1__Impl
	rule__Deviation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviationAccess().getReferenceAssignment_1()); }
	(rule__Deviation__ReferenceAssignment_1)
	{ after(grammarAccess.getDeviationAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Deviation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviationAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getDeviationAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Deviate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Deviate__Group__0__Impl
	rule__Deviate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviateAccess().getDeviateKeyword_0()); }
	Deviate
	{ after(grammarAccess.getDeviateAccess().getDeviateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Deviate__Group__1__Impl
	rule__Deviate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviateAccess().getArgumentAssignment_1()); }
	(rule__Deviate__ArgumentAssignment_1)
	{ after(grammarAccess.getDeviateAccess().getArgumentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Deviate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviateAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getDeviateAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__0__Impl
	rule__Config__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getConfigKeyword_0()); }
	Config
	{ after(grammarAccess.getConfigAccess().getConfigKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__1__Impl
	rule__Config__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getIsConfigAssignment_1()); }
	(rule__Config__IsConfigAssignment_1)
	{ after(grammarAccess.getConfigAccess().getIsConfigAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getConfigAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Status__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Status__Group__0__Impl
	rule__Status__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Status__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatusAccess().getStatusKeyword_0()); }
	Status
	{ after(grammarAccess.getStatusAccess().getStatusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Status__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Status__Group__1__Impl
	rule__Status__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Status__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatusAccess().getArgumentAssignment_1()); }
	(rule__Status__ArgumentAssignment_1)
	{ after(grammarAccess.getStatusAccess().getArgumentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Status__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Status__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Status__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatusAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getStatusAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Description__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__0__Impl
	rule__Description__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
	Description
	{ after(grammarAccess.getDescriptionAccess().getDescriptionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__1__Impl
	rule__Description__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1()); }
	(rule__Description__DescriptionAssignment_1)
	{ after(grammarAccess.getDescriptionAccess().getDescriptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Description__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescriptionAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getDescriptionAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getReferenceKeyword_0()); }
	Reference
	{ after(grammarAccess.getReferenceAccess().getReferenceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__1__Impl
	rule__Reference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getReferenceAssignment_1()); }
	(rule__Reference__ReferenceAssignment_1)
	{ after(grammarAccess.getReferenceAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getReferenceAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__When__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__0__Impl
	rule__When__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
	When
	{ after(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__1__Impl
	rule__When__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getConditionAssignment_1()); }
	(rule__When__ConditionAssignment_1)
	{ after(grammarAccess.getWhenAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getWhenAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getRangeKeyword_0()); }
	Range
	{ after(grammarAccess.getRangeAccess().getRangeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getExpressionAssignment_1()); }
	(rule__Range__ExpressionAssignment_1)
	{ after(grammarAccess.getRangeAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getRangeAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefinementExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinementExpression__Group__0__Impl
	rule__RefinementExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinementExpressionAccess().getRangeRefinementExpressionParserRuleCall_0()); }
	ruleRangeRefinementExpression
	{ after(grammarAccess.getRefinementExpressionAccess().getRangeRefinementExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinementExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinementExpressionAccess().getGroup_1()); }
	(rule__RefinementExpression__Group_1__0)*
	{ after(grammarAccess.getRefinementExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefinementExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinementExpression__Group_1__0__Impl
	rule__RefinementExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinementExpressionAccess().getBinaryOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRefinementExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinementExpression__Group_1__1__Impl
	rule__RefinementExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinementExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__RefinementExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getRefinementExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinementExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinementExpressionAccess().getRightAssignment_1_2()); }
	(rule__RefinementExpression__RightAssignment_1_2)
	{ after(grammarAccess.getRefinementExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeRefinementExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeRefinementExpression__Group__0__Impl
	rule__RangeRefinementExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeRefinementExpressionAccess().getExplicitRefinementExpressionParserRuleCall_0()); }
	ruleExplicitRefinementExpression
	{ after(grammarAccess.getRangeRefinementExpressionAccess().getExplicitRefinementExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeRefinementExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeRefinementExpressionAccess().getGroup_1()); }
	(rule__RangeRefinementExpression__Group_1__0)?
	{ after(grammarAccess.getRangeRefinementExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeRefinementExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeRefinementExpression__Group_1__0__Impl
	rule__RangeRefinementExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeRefinementExpressionAccess().getBinaryOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRangeRefinementExpressionAccess().getBinaryOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeRefinementExpression__Group_1__1__Impl
	rule__RangeRefinementExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeRefinementExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__RangeRefinementExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getRangeRefinementExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeRefinementExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeRefinementExpressionAccess().getRightAssignment_1_2()); }
	(rule__RangeRefinementExpression__RightAssignment_1_2)
	{ after(grammarAccess.getRangeRefinementExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitRefinementExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitRefinementExpression__Group_0__0__Impl
	rule__ExplicitRefinementExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitRefinementExpressionAccess().getLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getExplicitRefinementExpressionAccess().getLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitRefinementExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitRefinementExpressionAccess().getValueAssignment_0_1()); }
	(rule__ExplicitRefinementExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getExplicitRefinementExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitRefinementExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitRefinementExpression__Group_1__0__Impl
	rule__ExplicitRefinementExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitRefinementExpressionAccess().getMinAction_1_0()); }
	()
	{ after(grammarAccess.getExplicitRefinementExpressionAccess().getMinAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitRefinementExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitRefinementExpressionAccess().getMinKeyword_1_1()); }
	Min
	{ after(grammarAccess.getExplicitRefinementExpressionAccess().getMinKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitRefinementExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitRefinementExpression__Group_2__0__Impl
	rule__ExplicitRefinementExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitRefinementExpressionAccess().getMaxAction_2_0()); }
	()
	{ after(grammarAccess.getExplicitRefinementExpressionAccess().getMaxAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExplicitRefinementExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExplicitRefinementExpressionAccess().getMaxKeyword_2_1()); }
	Max
	{ after(grammarAccess.getExplicitRefinementExpressionAccess().getMaxKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FractionDigits__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FractionDigits__Group__0__Impl
	rule__FractionDigits__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionDigits__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFractionDigitsAccess().getFractionDigitsKeyword_0()); }
	FractionDigits
	{ after(grammarAccess.getFractionDigitsAccess().getFractionDigitsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionDigits__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FractionDigits__Group__1__Impl
	rule__FractionDigits__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionDigits__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFractionDigitsAccess().getRangeAssignment_1()); }
	(rule__FractionDigits__RangeAssignment_1)
	{ after(grammarAccess.getFractionDigitsAccess().getRangeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionDigits__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FractionDigits__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionDigits__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFractionDigitsAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getFractionDigitsAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Length__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Length__Group__0__Impl
	rule__Length__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Length__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthAccess().getLengthKeyword_0()); }
	Length
	{ after(grammarAccess.getLengthAccess().getLengthKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Length__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Length__Group__1__Impl
	rule__Length__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Length__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthAccess().getExpressionAssignment_1()); }
	(rule__Length__ExpressionAssignment_1)
	{ after(grammarAccess.getLengthAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Length__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Length__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Length__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLengthAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getLengthAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
	Pattern
	{ after(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
	rule__Pattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRegexpAssignment_1()); }
	(rule__Pattern__RegexpAssignment_1)
	{ after(grammarAccess.getPatternAccess().getRegexpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getPatternAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Modifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modifier__Group__0__Impl
	rule__Modifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierAccess().getModifierKeyword_0()); }
	Modifier
	{ after(grammarAccess.getModifierAccess().getModifierKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modifier__Group__1__Impl
	rule__Modifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierAccess().getModifierAssignment_1()); }
	(rule__Modifier__ModifierAssignment_1)
	{ after(grammarAccess.getModifierAccess().getModifierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifierAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getModifierAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
	Enum
	{ after(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getNameAssignment_1()); }
	(rule__Enum__NameAssignment_1)
	{ after(grammarAccess.getEnumAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getEnumAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getValueKeyword_0()); }
	Value
	{ after(grammarAccess.getValueAccess().getValueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__1__Impl
	rule__Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getOrdinalAssignment_1()); }
	(rule__Value__OrdinalAssignment_1)
	{ after(grammarAccess.getValueAccess().getOrdinalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getValueAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bit__Group__0__Impl
	rule__Bit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAccess().getBitKeyword_0()); }
	Bit
	{ after(grammarAccess.getBitAccess().getBitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bit__Group__1__Impl
	rule__Bit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAccess().getNameAssignment_1()); }
	(rule__Bit__NameAssignment_1)
	{ after(grammarAccess.getBitAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bit__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getBitAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Position__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Position__Group__0__Impl
	rule__Position__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionAccess().getPositionKeyword_0()); }
	Position
	{ after(grammarAccess.getPositionAccess().getPositionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Position__Group__1__Impl
	rule__Position__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionAccess().getOrdinalAssignment_1()); }
	(rule__Position__OrdinalAssignment_1)
	{ after(grammarAccess.getPositionAccess().getOrdinalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Position__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getPositionAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Path__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Path__Group__0__Impl
	rule__Path__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathAccess().getPathKeyword_0()); }
	Path
	{ after(grammarAccess.getPathAccess().getPathKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Path__Group__1__Impl
	rule__Path__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathAccess().getReferenceAssignment_1()); }
	(rule__Path__ReferenceAssignment_1)
	{ after(grammarAccess.getPathAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Path__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getPathAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RequireInstance__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequireInstance__Group__0__Impl
	rule__RequireInstance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequireInstance__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequireInstanceAccess().getRequireInstanceKeyword_0()); }
	RequireInstance
	{ after(grammarAccess.getRequireInstanceAccess().getRequireInstanceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequireInstance__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequireInstance__Group__1__Impl
	rule__RequireInstance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RequireInstance__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequireInstanceAccess().getIsRequireInstanceAssignment_1()); }
	(rule__RequireInstance__IsRequireInstanceAssignment_1)
	{ after(grammarAccess.getRequireInstanceAccess().getIsRequireInstanceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequireInstance__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RequireInstance__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequireInstance__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequireInstanceAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getRequireInstanceAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Unknown__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unknown__Group__0__Impl
	rule__Unknown__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnknownAccess().getExtensionAssignment_0()); }
	(rule__Unknown__ExtensionAssignment_0)
	{ after(grammarAccess.getUnknownAccess().getExtensionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unknown__Group__1__Impl
	rule__Unknown__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnknownAccess().getNameAssignment_1()); }
	(rule__Unknown__NameAssignment_1)?
	{ after(grammarAccess.getUnknownAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Unknown__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnknownAccess().getStatementEndParserRuleCall_2()); }
	ruleStatementEnd
	{ after(grammarAccess.getUnknownAccess().getStatementEndParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DescendantSchemaNodeIdentifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DescendantSchemaNodeIdentifier__Group__0__Impl
	rule__DescendantSchemaNodeIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getDescendantRootSchemaNodeIdentifierParserRuleCall_0()); }
	ruleDescendantRootSchemaNodeIdentifier
	{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getDescendantRootSchemaNodeIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DescendantSchemaNodeIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getGroup_1()); }
	(rule__DescendantSchemaNodeIdentifier__Group_1__0)*
	{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DescendantSchemaNodeIdentifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DescendantSchemaNodeIdentifier__Group_1__0__Impl
	rule__DescendantSchemaNodeIdentifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeIdentifierTargetAction_1_0()); }
	()
	{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeIdentifierTargetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DescendantSchemaNodeIdentifier__Group_1__1__Impl
	rule__DescendantSchemaNodeIdentifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSolidusKeyword_1_1()); }
	Solidus
	{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DescendantSchemaNodeIdentifier__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeAssignment_1_2()); }
	(rule__DescendantSchemaNodeIdentifier__SchemaNodeAssignment_1_2)
	{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaNodeIdentifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SchemaNodeIdentifier__Group__0__Impl
	rule__SchemaNodeIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaNodeIdentifierAccess().getRootSchemaNodeIdentifierParserRuleCall_0()); }
	ruleRootSchemaNodeIdentifier
	{ after(grammarAccess.getSchemaNodeIdentifierAccess().getRootSchemaNodeIdentifierParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SchemaNodeIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaNodeIdentifierAccess().getGroup_1()); }
	(rule__SchemaNodeIdentifier__Group_1__0)*
	{ after(grammarAccess.getSchemaNodeIdentifierAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SchemaNodeIdentifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SchemaNodeIdentifier__Group_1__0__Impl
	rule__SchemaNodeIdentifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeIdentifierTargetAction_1_0()); }
	()
	{ after(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeIdentifierTargetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SchemaNodeIdentifier__Group_1__1__Impl
	rule__SchemaNodeIdentifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaNodeIdentifierAccess().getSolidusKeyword_1_1()); }
	Solidus
	{ after(grammarAccess.getSchemaNodeIdentifierAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SchemaNodeIdentifier__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeAssignment_1_2()); }
	(rule__SchemaNodeIdentifier__SchemaNodeAssignment_1_2)
	{ after(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RootSchemaNodeIdentifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootSchemaNodeIdentifier__Group__0__Impl
	rule__RootSchemaNodeIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootSchemaNodeIdentifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteAssignment_0()); }
	(rule__RootSchemaNodeIdentifier__IsAbsoluteAssignment_0)?
	{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootSchemaNodeIdentifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RootSchemaNodeIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootSchemaNodeIdentifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeAssignment_1()); }
	(rule__RootSchemaNodeIdentifier__SchemaNodeAssignment_1)
	{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathExpression__Group_0__0__Impl
	rule__XpathExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathExpressionAccess().getUnparsedXpathAction_0_0()); }
	()
	{ after(grammarAccess.getXpathExpressionAccess().getUnparsedXpathAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathExpression__Group_0__1__Impl
	rule__XpathExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathExpressionAccess().getLessThanSignLessThanSignLessThanSignLessThanSignKeyword_0_1()); }
	LessThanSignLessThanSignLessThanSignLessThanSign
	{ after(grammarAccess.getXpathExpressionAccess().getLessThanSignLessThanSignLessThanSignLessThanSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathExpression__Group_0__2__Impl
	rule__XpathExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathExpressionAccess().getTextAssignment_0_2()); }
	(rule__XpathExpression__TextAssignment_0_2)
	{ after(grammarAccess.getXpathExpressionAccess().getTextAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathExpression__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_3()); }
	GreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSign
	{ after(grammarAccess.getXpathExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathOrExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathOrExpr__Group__0__Impl
	rule__XpathOrExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathOrExprAccess().getXpathAndExprParserRuleCall_0()); }
	ruleXpathAndExpr
	{ after(grammarAccess.getXpathOrExprAccess().getXpathAndExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathOrExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathOrExprAccess().getGroup_1()); }
	(rule__XpathOrExpr__Group_1__0)*
	{ after(grammarAccess.getXpathOrExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathOrExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathOrExpr__Group_1__0__Impl
	rule__XpathOrExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathOrExprAccess().getXpathOrOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathOrExprAccess().getXpathOrOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathOrExpr__Group_1__1__Impl
	rule__XpathOrExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathOrExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathOrExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathOrExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathOrExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathOrExprAccess().getRightAssignment_1_2()); }
	(rule__XpathOrExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathOrExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathAndExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAndExpr__Group__0__Impl
	rule__XpathAndExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAndExprAccess().getXpathEqualityExprParserRuleCall_0()); }
	ruleXpathEqualityExpr
	{ after(grammarAccess.getXpathAndExprAccess().getXpathEqualityExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAndExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAndExprAccess().getGroup_1()); }
	(rule__XpathAndExpr__Group_1__0)*
	{ after(grammarAccess.getXpathAndExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathAndExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAndExpr__Group_1__0__Impl
	rule__XpathAndExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAndExprAccess().getXpathAndOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathAndExprAccess().getXpathAndOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAndExpr__Group_1__1__Impl
	rule__XpathAndExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAndExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathAndExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathAndExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAndExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAndExprAccess().getRightAssignment_1_2()); }
	(rule__XpathAndExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathAndExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathEqualityExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathEqualityExpr__Group__0__Impl
	rule__XpathEqualityExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathEqualityExprAccess().getXpathRelationalExprParserRuleCall_0()); }
	ruleXpathRelationalExpr
	{ after(grammarAccess.getXpathEqualityExprAccess().getXpathRelationalExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathEqualityExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathEqualityExprAccess().getGroup_1()); }
	(rule__XpathEqualityExpr__Group_1__0)*
	{ after(grammarAccess.getXpathEqualityExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathEqualityExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathEqualityExpr__Group_1__0__Impl
	rule__XpathEqualityExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathEqualityExprAccess().getXpathEqualityOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathEqualityExprAccess().getXpathEqualityOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathEqualityExpr__Group_1__1__Impl
	rule__XpathEqualityExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathEqualityExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathEqualityExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathEqualityExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathEqualityExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathEqualityExprAccess().getRightAssignment_1_2()); }
	(rule__XpathEqualityExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathEqualityExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathRelationalExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathRelationalExpr__Group__0__Impl
	rule__XpathRelationalExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathRelationalExprAccess().getXpathAdditiveExprParserRuleCall_0()); }
	ruleXpathAdditiveExpr
	{ after(grammarAccess.getXpathRelationalExprAccess().getXpathAdditiveExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathRelationalExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathRelationalExprAccess().getGroup_1()); }
	(rule__XpathRelationalExpr__Group_1__0)*
	{ after(grammarAccess.getXpathRelationalExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathRelationalExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathRelationalExpr__Group_1__0__Impl
	rule__XpathRelationalExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathRelationalExprAccess().getXpathRelationalOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathRelationalExprAccess().getXpathRelationalOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathRelationalExpr__Group_1__1__Impl
	rule__XpathRelationalExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathRelationalExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathRelationalExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathRelationalExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathRelationalExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathRelationalExprAccess().getRightAssignment_1_2()); }
	(rule__XpathRelationalExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathRelationalExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathAdditiveExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAdditiveExpr__Group__0__Impl
	rule__XpathAdditiveExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAdditiveExprAccess().getXpathMultiplicativeExprParserRuleCall_0()); }
	ruleXpathMultiplicativeExpr
	{ after(grammarAccess.getXpathAdditiveExprAccess().getXpathMultiplicativeExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAdditiveExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAdditiveExprAccess().getGroup_1()); }
	(rule__XpathAdditiveExpr__Group_1__0)*
	{ after(grammarAccess.getXpathAdditiveExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathAdditiveExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAdditiveExpr__Group_1__0__Impl
	rule__XpathAdditiveExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAdditiveExprAccess().getXpathAdditiveOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathAdditiveExprAccess().getXpathAdditiveOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAdditiveExpr__Group_1__1__Impl
	rule__XpathAdditiveExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAdditiveExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathAdditiveExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathAdditiveExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathAdditiveExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathAdditiveExprAccess().getRightAssignment_1_2()); }
	(rule__XpathAdditiveExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathAdditiveExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathMultiplicativeExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathMultiplicativeExpr__Group__0__Impl
	rule__XpathMultiplicativeExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathMultiplicativeExprAccess().getXpathUnaryExprParserRuleCall_0()); }
	ruleXpathUnaryExpr
	{ after(grammarAccess.getXpathMultiplicativeExprAccess().getXpathUnaryExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathMultiplicativeExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathMultiplicativeExprAccess().getGroup_1()); }
	(rule__XpathMultiplicativeExpr__Group_1__0)?
	{ after(grammarAccess.getXpathMultiplicativeExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathMultiplicativeExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathMultiplicativeExpr__Group_1__0__Impl
	rule__XpathMultiplicativeExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathMultiplicativeExprAccess().getXpathMultiplicativeOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathMultiplicativeExprAccess().getXpathMultiplicativeOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathMultiplicativeExpr__Group_1__1__Impl
	rule__XpathMultiplicativeExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathMultiplicativeExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathMultiplicativeExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathMultiplicativeExprAccess().getRightAssignment_1_2()); }
	(rule__XpathMultiplicativeExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathMultiplicativeExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathUnaryExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnaryExpr__Group_0__0__Impl
	rule__XpathUnaryExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnaryExprAccess().getXpathUnaryOperationAction_0_0()); }
	()
	{ after(grammarAccess.getXpathUnaryExprAccess().getXpathUnaryOperationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnaryExpr__Group_0__1__Impl
	rule__XpathUnaryExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnaryExprAccess().getOperatorAssignment_0_1()); }
	(rule__XpathUnaryExpr__OperatorAssignment_0_1)
	{ after(grammarAccess.getXpathUnaryExprAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnaryExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnaryExprAccess().getTargetAssignment_0_2()); }
	(rule__XpathUnaryExpr__TargetAssignment_0_2)
	{ after(grammarAccess.getXpathUnaryExprAccess().getTargetAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathUnionExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnionExpr__Group__0__Impl
	rule__XpathUnionExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnionExprAccess().getXpathPathExprParserRuleCall_0()); }
	ruleXpathPathExpr
	{ after(grammarAccess.getXpathUnionExprAccess().getXpathPathExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnionExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnionExprAccess().getGroup_1()); }
	(rule__XpathUnionExpr__Group_1__0)?
	{ after(grammarAccess.getXpathUnionExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathUnionExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnionExpr__Group_1__0__Impl
	rule__XpathUnionExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnionExprAccess().getXpathUnionOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXpathUnionExprAccess().getXpathUnionOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnionExpr__Group_1__1__Impl
	rule__XpathUnionExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnionExprAccess().getOperatorAssignment_1_1()); }
	(rule__XpathUnionExpr__OperatorAssignment_1_1)
	{ after(grammarAccess.getXpathUnionExprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathUnionExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathUnionExprAccess().getRightAssignment_1_2()); }
	(rule__XpathUnionExpr__RightAssignment_1_2)
	{ after(grammarAccess.getXpathUnionExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPathExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group__0__Impl
	rule__XpathPathExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getXpathFilterExprParserRuleCall_0()); }
	ruleXpathFilterExpr
	{ after(grammarAccess.getXpathPathExprAccess().getXpathFilterExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getGroup_1()); }
	(rule__XpathPathExpr__Group_1__0)*
	{ after(grammarAccess.getXpathPathExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPathExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1__0__Impl
	rule__XpathPathExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getXpathLocationTargetAction_1_0()); }
	()
	{ after(grammarAccess.getXpathPathExprAccess().getXpathLocationTargetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1__1__Impl
	rule__XpathPathExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getSolidusKeyword_1_1()); }
	Solidus
	{ after(grammarAccess.getXpathPathExprAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1__2__Impl
	rule__XpathPathExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getGroup_1_2()); }
	(rule__XpathPathExpr__Group_1_2__0)?
	{ after(grammarAccess.getXpathPathExprAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1__3__Impl
	rule__XpathPathExpr__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getStepAssignment_1_3()); }
	(rule__XpathPathExpr__StepAssignment_1_3)
	{ after(grammarAccess.getXpathPathExprAccess().getStepAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getGroup_1_4()); }
	(rule__XpathPathExpr__Group_1_4__0)*
	{ after(grammarAccess.getXpathPathExprAccess().getGroup_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPathExpr__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1_2__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getIsDescendantsAssignment_1_2_0()); }
	(rule__XpathPathExpr__IsDescendantsAssignment_1_2_0)
	{ after(grammarAccess.getXpathPathExprAccess().getIsDescendantsAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPathExpr__Group_1_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1_4__0__Impl
	rule__XpathPathExpr__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getXpathFilterTargetAction_1_4_0()); }
	()
	{ after(grammarAccess.getXpathPathExprAccess().getXpathFilterTargetAction_1_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1_4__1__Impl
	rule__XpathPathExpr__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getLeftSquareBracketKeyword_1_4_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getXpathPathExprAccess().getLeftSquareBracketKeyword_1_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1_4__2__Impl
	rule__XpathPathExpr__Group_1_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getPredicateAssignment_1_4_2()); }
	(rule__XpathPathExpr__PredicateAssignment_1_4_2)
	{ after(grammarAccess.getXpathPathExprAccess().getPredicateAssignment_1_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPathExpr__Group_1_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__Group_1_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPathExprAccess().getRightSquareBracketKeyword_1_4_3()); }
	RightSquareBracket
	{ after(grammarAccess.getXpathPathExprAccess().getRightSquareBracketKeyword_1_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathFilterExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathFilterExpr__Group__0__Impl
	rule__XpathFilterExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathFilterExprAccess().getXpathPrimaryExprParserRuleCall_0()); }
	ruleXpathPrimaryExpr
	{ after(grammarAccess.getXpathFilterExprAccess().getXpathPrimaryExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathFilterExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathFilterExprAccess().getGroup_1()); }
	(rule__XpathFilterExpr__Group_1__0)*
	{ after(grammarAccess.getXpathFilterExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathFilterExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathFilterExpr__Group_1__0__Impl
	rule__XpathFilterExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathFilterExprAccess().getXpathFilterTargetAction_1_0()); }
	()
	{ after(grammarAccess.getXpathFilterExprAccess().getXpathFilterTargetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathFilterExpr__Group_1__1__Impl
	rule__XpathFilterExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathFilterExprAccess().getLeftSquareBracketKeyword_1_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getXpathFilterExprAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathFilterExpr__Group_1__2__Impl
	rule__XpathFilterExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathFilterExprAccess().getPredicateAssignment_1_2()); }
	(rule__XpathFilterExpr__PredicateAssignment_1_2)
	{ after(grammarAccess.getXpathFilterExprAccess().getPredicateAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathFilterExpr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathFilterExprAccess().getRightSquareBracketKeyword_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getXpathFilterExprAccess().getRightSquareBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_0__0__Impl
	rule__XpathPrimaryExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getXpathVariableReferenceAction_0_0()); }
	()
	{ after(grammarAccess.getXpathPrimaryExprAccess().getXpathVariableReferenceAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_0__1__Impl
	rule__XpathPrimaryExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getDollarSignKeyword_0_1()); }
	DollarSign
	{ after(grammarAccess.getXpathPrimaryExprAccess().getDollarSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getNameAssignment_0_2()); }
	(rule__XpathPrimaryExpr__NameAssignment_0_2)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getNameAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_1__0__Impl
	rule__XpathPrimaryExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_1__1__Impl
	rule__XpathPrimaryExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getXpathExpressionParserRuleCall_1_1()); }
	ruleXpathExpression
	{ after(grammarAccess.getXpathPrimaryExprAccess().getXpathExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getXpathPrimaryExprAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_2__0__Impl
	rule__XpathPrimaryExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getXpathStringLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getXpathPrimaryExprAccess().getXpathStringLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getValueAssignment_2_1()); }
	(rule__XpathPrimaryExpr__ValueAssignment_2_1)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_3__0__Impl
	rule__XpathPrimaryExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getXpathNumberLiteralAction_3_0()); }
	()
	{ after(grammarAccess.getXpathPrimaryExprAccess().getXpathNumberLiteralAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getValueAssignment_3_1()); }
	(rule__XpathPrimaryExpr__ValueAssignment_3_1)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4__0__Impl
	rule__XpathPrimaryExpr__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getXpathFunctionCallAction_4_0()); }
	()
	{ after(grammarAccess.getXpathPrimaryExprAccess().getXpathFunctionCallAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4__1__Impl
	rule__XpathPrimaryExpr__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getNameAssignment_4_1()); }
	(rule__XpathPrimaryExpr__NameAssignment_4_1)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getNameAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4__2__Impl
	rule__XpathPrimaryExpr__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_4_2()); }
	LeftParenthesis
	{ after(grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4__3__Impl
	rule__XpathPrimaryExpr__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_4_3()); }
	(rule__XpathPrimaryExpr__Group_4_3__0)?
	{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getRightParenthesisKeyword_4_4()); }
	RightParenthesis
	{ after(grammarAccess.getXpathPrimaryExprAccess().getRightParenthesisKeyword_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_4_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4_3__0__Impl
	rule__XpathPrimaryExpr__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getArgsAssignment_4_3_0()); }
	(rule__XpathPrimaryExpr__ArgsAssignment_4_3_0)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getArgsAssignment_4_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_4_3_1()); }
	(rule__XpathPrimaryExpr__Group_4_3_1__0)*
	{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_4_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_4_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4_3_1__0__Impl
	rule__XpathPrimaryExpr__Group_4_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getCommaKeyword_4_3_1_0()); }
	Comma
	{ after(grammarAccess.getXpathPrimaryExprAccess().getCommaKeyword_4_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_4_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_4_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getArgsAssignment_4_3_1_1()); }
	(rule__XpathPrimaryExpr__ArgsAssignment_4_3_1_1)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getArgsAssignment_4_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_5__0__Impl
	rule__XpathPrimaryExpr__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getRelativePathAction_5_0()); }
	()
	{ after(grammarAccess.getXpathPrimaryExprAccess().getRelativePathAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getStepAssignment_5_1()); }
	(rule__XpathPrimaryExpr__StepAssignment_5_1)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getStepAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_6__0__Impl
	rule__XpathPrimaryExpr__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getAbsolutePathAction_6_0()); }
	()
	{ after(grammarAccess.getXpathPrimaryExprAccess().getAbsolutePathAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_6__1__Impl
	rule__XpathPrimaryExpr__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getSolidusKeyword_6_1()); }
	Solidus
	{ after(grammarAccess.getXpathPrimaryExprAccess().getSolidusKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_6__2__Impl
	rule__XpathPrimaryExpr__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getGroup_6_2()); }
	(rule__XpathPrimaryExpr__Group_6_2__0)?
	{ after(grammarAccess.getXpathPrimaryExprAccess().getGroup_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getStepAssignment_6_3()); }
	(rule__XpathPrimaryExpr__StepAssignment_6_3)?
	{ after(grammarAccess.getXpathPrimaryExprAccess().getStepAssignment_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathPrimaryExpr__Group_6_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathPrimaryExpr__Group_6_2__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__Group_6_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsAssignment_6_2_0()); }
	(rule__XpathPrimaryExpr__IsDescendantsAssignment_6_2_0)
	{ after(grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsAssignment_6_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathStep__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_0__0__Impl
	rule__XpathStep__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getCurrentRefAction_0_0()); }
	()
	{ after(grammarAccess.getXpathStepAccess().getCurrentRefAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getRefAssignment_0_1()); }
	(rule__XpathStep__RefAssignment_0_1)
	{ after(grammarAccess.getXpathStepAccess().getRefAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathStep__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_1__0__Impl
	rule__XpathStep__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getParentRefAction_1_0()); }
	()
	{ after(grammarAccess.getXpathStepAccess().getParentRefAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getRefAssignment_1_1()); }
	(rule__XpathStep__RefAssignment_1_1)
	{ after(grammarAccess.getXpathStepAccess().getRefAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathStep__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_2__0__Impl
	rule__XpathStep__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getAbbrevAttributeStepAction_2_0()); }
	()
	{ after(grammarAccess.getXpathStepAccess().getAbbrevAttributeStepAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_2__1__Impl
	rule__XpathStep__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getCommercialAtKeyword_2_1()); }
	CommercialAt
	{ after(grammarAccess.getXpathStepAccess().getCommercialAtKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getAttributeNameAssignment_2_2()); }
	(rule__XpathStep__AttributeNameAssignment_2_2)
	{ after(grammarAccess.getXpathStepAccess().getAttributeNameAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathStep__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_3__0__Impl
	rule__XpathStep__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getGroup_3_0()); }
	(rule__XpathStep__Group_3_0__0)?
	{ after(grammarAccess.getXpathStepAccess().getGroup_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getNodeAssignment_3_1()); }
	(rule__XpathStep__NodeAssignment_3_1)
	{ after(grammarAccess.getXpathStepAccess().getNodeAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathStep__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_3_0__0__Impl
	rule__XpathStep__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getAxisAssignment_3_0_0()); }
	(rule__XpathStep__AxisAssignment_3_0_0)
	{ after(grammarAccess.getXpathStepAccess().getAxisAssignment_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_3_0__1__Impl
	rule__XpathStep__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getColonKeyword_3_0_1()); }
	Colon
	{ after(grammarAccess.getXpathStepAccess().getColonKeyword_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathStep__Group_3_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__Group_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathStepAccess().getColonKeyword_3_0_2()); }
	Colon
	{ after(grammarAccess.getXpathStepAccess().getColonKeyword_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathNodeTest__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_1__0__Impl
	rule__XpathNodeTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getXpathNodeTypeAction_1_0()); }
	()
	{ after(grammarAccess.getXpathNodeTestAccess().getXpathNodeTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_1__1__Impl
	rule__XpathNodeTest__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getNameAssignment_1_1()); }
	(rule__XpathNodeTest__NameAssignment_1_1)
	{ after(grammarAccess.getXpathNodeTestAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_1__2__Impl
	rule__XpathNodeTest__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getLeftParenthesisKeyword_1_2()); }
	LeftParenthesis
	{ after(grammarAccess.getXpathNodeTestAccess().getLeftParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getRightParenthesisKeyword_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getXpathNodeTestAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathNodeTest__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_2__0__Impl
	rule__XpathNodeTest__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getProcessingInstructionAction_2_0()); }
	()
	{ after(grammarAccess.getXpathNodeTestAccess().getProcessingInstructionAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_2__1__Impl
	rule__XpathNodeTest__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getProcessingInstructionKeyword_2_1()); }
	ProcessingInstruction
	{ after(grammarAccess.getXpathNodeTestAccess().getProcessingInstructionKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_2__2__Impl
	rule__XpathNodeTest__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getLeftParenthesisKeyword_2_2()); }
	LeftParenthesis
	{ after(grammarAccess.getXpathNodeTestAccess().getLeftParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_2__3__Impl
	rule__XpathNodeTest__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getInstructionAssignment_2_3()); }
	(rule__XpathNodeTest__InstructionAssignment_2_3)
	{ after(grammarAccess.getXpathNodeTestAccess().getInstructionAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNodeTest__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNodeTestAccess().getRightParenthesisKeyword_2_4()); }
	RightParenthesis
	{ after(grammarAccess.getXpathNodeTestAccess().getRightParenthesisKeyword_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathNameTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNameTest__Group__0__Impl
	rule__XpathNameTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNameTestAccess().getGroup_0()); }
	(rule__XpathNameTest__Group_0__0)?
	{ after(grammarAccess.getXpathNameTestAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNameTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNameTestAccess().getRefAssignment_1()); }
	(rule__XpathNameTest__RefAssignment_1)
	{ after(grammarAccess.getXpathNameTestAccess().getRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XpathNameTest__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNameTest__Group_0__0__Impl
	rule__XpathNameTest__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNameTestAccess().getPrefixAssignment_0_0()); }
	(rule__XpathNameTest__PrefixAssignment_0_0)
	{ after(grammarAccess.getXpathNameTestAccess().getPrefixAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XpathNameTest__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXpathNameTestAccess().getColonKeyword_0_1()); }
	Colon
	{ after(grammarAccess.getXpathNameTestAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QNAME__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QNAME__Group__0__Impl
	rule__QNAME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QNAME__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQNAMEAccess().getGroup_0()); }
	(rule__QNAME__Group_0__0)?
	{ after(grammarAccess.getQNAMEAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QNAME__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QNAME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QNAME__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQNAMEAccess().getIdOrKwParserRuleCall_1()); }
	ruleIdOrKw
	{ after(grammarAccess.getQNAMEAccess().getIdOrKwParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QNAME__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QNAME__Group_0__0__Impl
	rule__QNAME__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QNAME__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQNAMEAccess().getIdOrKwParserRuleCall_0_0()); }
	ruleIdOrKw
	{ after(grammarAccess.getQNAMEAccess().getIdOrKwParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QNAME__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QNAME__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QNAME__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQNAMEAccess().getColonKeyword_0_1()); }
	Colon
	{ after(grammarAccess.getQNAMEAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedTypeName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedTypeName__Group__0__Impl
	rule__QualifiedTypeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedTypeNameAccess().getGroup_0()); }
	(rule__QualifiedTypeName__Group_0__0)?
	{ after(grammarAccess.getQualifiedTypeNameAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedTypeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedTypeNameAccess().getAlternatives_1()); }
	(rule__QualifiedTypeName__Alternatives_1)
	{ after(grammarAccess.getQualifiedTypeNameAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedTypeName__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedTypeName__Group_0__0__Impl
	rule__QualifiedTypeName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedTypeNameAccess().getAlternatives_0_0()); }
	(rule__QualifiedTypeName__Alternatives_0_0)
	{ after(grammarAccess.getQualifiedTypeNameAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedTypeName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedTypeName__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedTypeNameAccess().getColonKeyword_0_1()); }
	Colon
	{ after(grammarAccess.getQualifiedTypeNameAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StatementEnd__SubstatementsAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementEndAccess().getSubstatementsStatementParserRuleCall_0_1_0()); }
		ruleStatement
		{ after(grammarAccess.getStatementEndAccess().getSubstatementsStatementParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getModuleAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YangVersion__YangVersionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYangVersionAccess().getYangVersionStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getYangVersionAccess().getYangVersionStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__UriAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamespaceAccess().getUriStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getNamespaceAccess().getUriStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__PrefixAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixAccess().getPrefixStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getPrefixAccess().getPrefixStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ModuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getModuleAbstractModuleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getImportAccess().getModuleAbstractModuleStringValueParserRuleCall_1_0_1()); }
			ruleStringValue
			{ after(grammarAccess.getImportAccess().getModuleAbstractModuleStringValueParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getImportAccess().getModuleAbstractModuleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RevisionDate__DateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRevisionDateAccess().getDateRevisionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRevisionDateAccess().getDateRevisionStringValueParserRuleCall_1_0_1()); }
			ruleStringValue
			{ after(grammarAccess.getRevisionDateAccess().getDateRevisionStringValueParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRevisionDateAccess().getDateRevisionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ModuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncludeAccess().getModuleAbstractModuleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getIncludeAccess().getModuleAbstractModuleStringValueParserRuleCall_1_0_1()); }
			ruleStringValue
			{ after(grammarAccess.getIncludeAccess().getModuleAbstractModuleStringValueParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getIncludeAccess().getModuleAbstractModuleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Organization__OrganizationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrganizationAccess().getOrganizationStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getOrganizationAccess().getOrganizationStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Contact__ContactAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactAccess().getContactStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getContactAccess().getContactStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Revision__RevisionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRevisionAccess().getRevisionStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getRevisionAccess().getRevisionStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Submodule__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubmoduleAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getSubmoduleAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BelongsTo__ModuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBelongsToAccess().getModuleModuleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getBelongsToAccess().getModuleModuleStringValueParserRuleCall_1_0_1()); }
			ruleStringValue
			{ after(grammarAccess.getBelongsToAccess().getModuleModuleStringValueParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getBelongsToAccess().getModuleModuleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Typedef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedefAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getTypedefAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Units__DefinitionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnitsAccess().getDefinitionStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getUnitsAccess().getDefinitionStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__DefaultStringValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefaultAccess().getDefaultStringValueStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getDefaultAccess().getDefaultStringValueStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TypeRefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeRefTypeReferenceParserRuleCall_1_0()); }
		ruleTypeReference
		{ after(grammarAccess.getTypeAccess().getTypeRefTypeReferenceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__BuiltinAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getBuiltinBUILTIN_TYPEParserRuleCall_0_0()); }
		ruleBUILTIN_TYPE
		{ after(grammarAccess.getTypeReferenceAccess().getBuiltinBUILTIN_TYPEParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getTypeTypedefCrossReference_1_0()); }
		(
			{ before(grammarAccess.getTypeReferenceAccess().getTypeTypedefQualifiedTypeNameParserRuleCall_1_0_1()); }
			ruleQualifiedTypeName
			{ after(grammarAccess.getTypeReferenceAccess().getTypeTypedefQualifiedTypeNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getTypeReferenceAccess().getTypeTypedefCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getContainerAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Must__ConstraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMustAccess().getConstraintXpathExpressionParserRuleCall_1_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getMustAccess().getConstraintXpathExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__MessageAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorMessageAccess().getMessageStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getErrorMessageAccess().getMessageStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorAppTag__TagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorAppTagAccess().getTagStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getErrorAppTagAccess().getTagStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Presence__DescriptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPresenceAccess().getDescriptionStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getPresenceAccess().getDescriptionStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Leaf__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeafAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getLeafAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mandatory__IsMandatoryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMandatoryAccess().getIsMandatoryStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getMandatoryAccess().getIsMandatoryStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeafList__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeafListAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getLeafListAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinElements__MinElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinElementsAccess().getMinElementsStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getMinElementsAccess().getMinElementsStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxElements__MaxElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxElementsAccess().getMaxElementsStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getMaxElementsAccess().getMaxElementsStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderedBy__OrderedByAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrderedByAccess().getOrderedByStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getOrderedByAccess().getOrderedByStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getListAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__ReferencesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getReferencesKeyReferenceParserRuleCall_2_0()); }
		ruleKeyReference
		{ after(grammarAccess.getKeyAccess().getReferencesKeyReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyReference__NodeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyReferenceAccess().getNodeLeafCrossReference_0()); }
		(
			{ before(grammarAccess.getKeyReferenceAccess().getNodeLeafQNAMEParserRuleCall_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getKeyReferenceAccess().getNodeLeafQNAMEParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getKeyReferenceAccess().getNodeLeafCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifierReferences__ReferencesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesDescendantSchemaNodeIdentifierParserRuleCall_0()); }
		ruleDescendantSchemaNodeIdentifier
		{ after(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesDescendantSchemaNodeIdentifierParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChoiceAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getChoiceAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getCaseAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anydata__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnydataAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getAnydataAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anyxml__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnyxmlAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getAnyxmlAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grouping__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupingAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getGroupingAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Uses__GroupingAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUsesAccess().getGroupingGroupingRefParserRuleCall_1_0()); }
		ruleGroupingRef
		{ after(grammarAccess.getUsesAccess().getGroupingGroupingRefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Refine__NodeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefineAccess().getNodeSchemaNodeIdentifierParserRuleCall_1_0()); }
		ruleSchemaNodeIdentifier
		{ after(grammarAccess.getRefineAccess().getNodeSchemaNodeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rpc__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRpcAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getRpcAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getNameStringValueParserRuleCall_2_0()); }
		ruleStringValue
		{ after(grammarAccess.getInputAccess().getNameStringValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getNameStringValueParserRuleCall_2_0()); }
		ruleStringValue
		{ after(grammarAccess.getOutputAccess().getNameStringValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getActionAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Notification__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotificationAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getNotificationAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Augment__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAugmentAccess().getPathSchemaNodeIdentifierParserRuleCall_1_0()); }
		ruleSchemaNodeIdentifier
		{ after(grammarAccess.getAugmentAccess().getPathSchemaNodeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identity__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentityAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getIdentityAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Base__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseAccess().getReferenceIdentityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getBaseAccess().getReferenceIdentityQNAMEParserRuleCall_1_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getBaseAccess().getReferenceIdentityQNAMEParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getBaseAccess().getReferenceIdentityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtensionAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getExtensionAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getArgumentAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__YinElement__IsYinElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYinElementAccess().getIsYinElementStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getYinElementAccess().getIsYinElementStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getFeatureAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeature__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureAccess().getConditionIfFeatureOrExpressionParserRuleCall_1_0()); }
		ruleIfFeatureOrExpression
		{ after(grammarAccess.getIfFeatureAccess().getConditionIfFeatureOrExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureOrExpressionAccess().getOperatorOrKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getIfFeatureOrExpressionAccess().getOperatorOrKeyword_1_1_0()); }
			Or
			{ after(grammarAccess.getIfFeatureOrExpressionAccess().getOperatorOrKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getIfFeatureOrExpressionAccess().getOperatorOrKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureOrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureOrExpressionAccess().getRightIfFeatureAndExpressionParserRuleCall_1_2_0()); }
		ruleIfFeatureAndExpression
		{ after(grammarAccess.getIfFeatureOrExpressionAccess().getRightIfFeatureAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAndKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAndKeyword_1_1_0()); }
			And
			{ after(grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAndKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAndKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureAndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureAndExpressionAccess().getRightIfFeatureExpressionParserRuleCall_1_2_0()); }
		ruleIfFeatureExpression
		{ after(grammarAccess.getIfFeatureAndExpressionAccess().getRightIfFeatureExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__FeatureAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getFeatureFeatureCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getIfFeatureExpressionAccess().getFeatureFeatureQNAMEParserRuleCall_0_1_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getIfFeatureExpressionAccess().getFeatureFeatureQNAMEParserRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getIfFeatureExpressionAccess().getFeatureFeatureCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getOperatorNotKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getIfFeatureExpressionAccess().getOperatorNotKeyword_1_1_0()); }
			Not
			{ after(grammarAccess.getIfFeatureExpressionAccess().getOperatorNotKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getIfFeatureExpressionAccess().getOperatorNotKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfFeatureExpression__TargetAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfFeatureExpressionAccess().getTargetIfFeatureExpressionParserRuleCall_1_2_0()); }
		ruleIfFeatureExpression
		{ after(grammarAccess.getIfFeatureExpressionAccess().getTargetIfFeatureExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviation__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviationAccess().getReferenceSchemaNodeIdentifierParserRuleCall_1_0()); }
		ruleSchemaNodeIdentifier
		{ after(grammarAccess.getDeviationAccess().getReferenceSchemaNodeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Deviate__ArgumentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviateAccess().getArgumentStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getDeviateAccess().getArgumentStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__IsConfigAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigAccess().getIsConfigStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getConfigAccess().getIsConfigStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Status__ArgumentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatusAccess().getArgumentStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getStatusAccess().getArgumentStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Description__DescriptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescriptionAccess().getDescriptionStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getDescriptionAccess().getDescriptionStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getReferenceStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getReferenceAccess().getReferenceStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getConditionXpathExpressionParserRuleCall_1_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getWhenAccess().getConditionXpathExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getExpressionRefinementExpressionParserRuleCall_1_0()); }
		ruleRefinementExpression
		{ after(grammarAccess.getRangeAccess().getExpressionRefinementExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefinementExpressionAccess().getOperatorVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRefinementExpressionAccess().getOperatorVerticalLineKeyword_1_1_0()); }
			VerticalLine
			{ after(grammarAccess.getRefinementExpressionAccess().getOperatorVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRefinementExpressionAccess().getOperatorVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinementExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefinementExpressionAccess().getRightRangeRefinementExpressionParserRuleCall_1_2_0()); }
		ruleRangeRefinementExpression
		{ after(grammarAccess.getRefinementExpressionAccess().getRightRangeRefinementExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeRefinementExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRangeRefinementExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
			FullStopFullStop
			{ after(grammarAccess.getRangeRefinementExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRangeRefinementExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRefinementExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeRefinementExpressionAccess().getRightExplicitRefinementExpressionParserRuleCall_1_2_0()); }
		ruleExplicitRefinementExpression
		{ after(grammarAccess.getRangeRefinementExpressionAccess().getRightExplicitRefinementExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitRefinementExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExplicitRefinementExpressionAccess().getValueNUMBERTerminalRuleCall_0_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getExplicitRefinementExpressionAccess().getValueNUMBERTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FractionDigits__RangeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFractionDigitsAccess().getRangeStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getFractionDigitsAccess().getRangeStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Length__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLengthAccess().getExpressionRefinementExpressionParserRuleCall_1_0()); }
		ruleRefinementExpression
		{ after(grammarAccess.getLengthAccess().getExpressionRefinementExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__RegexpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getRegexpStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getPatternAccess().getRegexpStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ModifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getModifierStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getModifierAccess().getModifierStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getEnumAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__OrdinalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getOrdinalStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getValueAccess().getOrdinalStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bit__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getBitAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__OrdinalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositionAccess().getOrdinalStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getPositionAccess().getOrdinalStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathAccess().getReferenceXpathExpressionParserRuleCall_1_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getPathAccess().getReferenceXpathExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RequireInstance__IsRequireInstanceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequireInstanceAccess().getIsRequireInstanceStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getRequireInstanceAccess().getIsRequireInstanceStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__ExtensionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnknownAccess().getExtensionExtensionCrossReference_0_0()); }
		(
			{ before(grammarAccess.getUnknownAccess().getExtensionExtensionEXTENSION_NAMETerminalRuleCall_0_0_1()); }
			RULE_EXTENSION_NAME
			{ after(grammarAccess.getUnknownAccess().getExtensionExtensionEXTENSION_NAMETerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getUnknownAccess().getExtensionExtensionCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Unknown__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnknownAccess().getNameStringValueParserRuleCall_1_0()); }
		ruleStringValue
		{ after(grammarAccess.getUnknownAccess().getNameStringValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantSchemaNodeIdentifier__SchemaNodeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DescendantRootSchemaNodeIdentifier__SchemaNodeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_0()); }
		(
			{ before(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SchemaNodeIdentifier__SchemaNodeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootSchemaNodeIdentifier__IsAbsoluteAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteSolidusKeyword_0_0()); }
		(
			{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteSolidusKeyword_0_0()); }
			Solidus
			{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteSolidusKeyword_0_0()); }
		)
		{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteSolidusKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootSchemaNodeIdentifier__SchemaNodeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupingRef__NodeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroupingRefAccess().getNodeGroupingCrossReference_0()); }
		(
			{ before(grammarAccess.getGroupingRefAccess().getNodeGroupingQNAMEParserRuleCall_0_1()); }
			ruleQNAME
			{ after(grammarAccess.getGroupingRefAccess().getNodeGroupingQNAMEParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getGroupingRefAccess().getNodeGroupingCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathExpression__TextAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathExpressionAccess().getTextSTRINGTerminalRuleCall_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getXpathExpressionAccess().getTextSTRINGTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathOrExprAccess().getOperatorOrKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getXpathOrExprAccess().getOperatorOrKeyword_1_1_0()); }
			Or
			{ after(grammarAccess.getXpathOrExprAccess().getOperatorOrKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getXpathOrExprAccess().getOperatorOrKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathOrExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathOrExprAccess().getRightXpathAndExprParserRuleCall_1_2_0()); }
		ruleXpathAndExpr
		{ after(grammarAccess.getXpathOrExprAccess().getRightXpathAndExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathAndExprAccess().getOperatorAndKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getXpathAndExprAccess().getOperatorAndKeyword_1_1_0()); }
			And
			{ after(grammarAccess.getXpathAndExprAccess().getOperatorAndKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getXpathAndExprAccess().getOperatorAndKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAndExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathAndExprAccess().getRightXpathEqualityExprParserRuleCall_1_2_0()); }
		ruleXpathEqualityExpr
		{ after(grammarAccess.getXpathAndExprAccess().getRightXpathEqualityExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathEqualityExprAccess().getOperatorAlternatives_1_1_0()); }
		(rule__XpathEqualityExpr__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getXpathEqualityExprAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathEqualityExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathEqualityExprAccess().getRightXpathRelationalExprParserRuleCall_1_2_0()); }
		ruleXpathRelationalExpr
		{ after(grammarAccess.getXpathEqualityExprAccess().getRightXpathRelationalExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getOperatorAlternatives_1_1_0()); }
		(rule__XpathRelationalExpr__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getXpathRelationalExprAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathRelationalExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathRelationalExprAccess().getRightXpathAdditiveExprParserRuleCall_1_2_0()); }
		ruleXpathAdditiveExpr
		{ after(grammarAccess.getXpathRelationalExprAccess().getRightXpathAdditiveExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathAdditiveExprAccess().getOperatorAlternatives_1_1_0()); }
		(rule__XpathAdditiveExpr__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getXpathAdditiveExprAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathAdditiveExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathAdditiveExprAccess().getRightXpathMultiplicativeExprParserRuleCall_1_2_0()); }
		ruleXpathMultiplicativeExpr
		{ after(grammarAccess.getXpathAdditiveExprAccess().getRightXpathMultiplicativeExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAlternatives_1_1_0()); }
		(rule__XpathMultiplicativeExpr__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathMultiplicativeExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathMultiplicativeExprAccess().getRightXpathMultiplicativeExprParserRuleCall_1_2_0()); }
		ruleXpathMultiplicativeExpr
		{ after(grammarAccess.getXpathMultiplicativeExprAccess().getRightXpathMultiplicativeExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathUnaryExprAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getXpathUnaryExprAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
			HyphenMinus
			{ after(grammarAccess.getXpathUnaryExprAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getXpathUnaryExprAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnaryExpr__TargetAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathUnaryExprAccess().getTargetXpathUnionExprParserRuleCall_0_2_0()); }
		ruleXpathUnionExpr
		{ after(grammarAccess.getXpathUnaryExprAccess().getTargetXpathUnionExprParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathUnionExprAccess().getOperatorVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getXpathUnionExprAccess().getOperatorVerticalLineKeyword_1_1_0()); }
			VerticalLine
			{ after(grammarAccess.getXpathUnionExprAccess().getOperatorVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getXpathUnionExprAccess().getOperatorVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathUnionExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathUnionExprAccess().getRightXpathUnionExprParserRuleCall_1_2_0()); }
		ruleXpathUnionExpr
		{ after(grammarAccess.getXpathUnionExprAccess().getRightXpathUnionExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__IsDescendantsAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPathExprAccess().getIsDescendantsSolidusKeyword_1_2_0_0()); }
		(
			{ before(grammarAccess.getXpathPathExprAccess().getIsDescendantsSolidusKeyword_1_2_0_0()); }
			Solidus
			{ after(grammarAccess.getXpathPathExprAccess().getIsDescendantsSolidusKeyword_1_2_0_0()); }
		)
		{ after(grammarAccess.getXpathPathExprAccess().getIsDescendantsSolidusKeyword_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__StepAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPathExprAccess().getStepXpathStepParserRuleCall_1_3_0()); }
		ruleXpathStep
		{ after(grammarAccess.getXpathPathExprAccess().getStepXpathStepParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPathExpr__PredicateAssignment_1_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPathExprAccess().getPredicateXpathExpressionParserRuleCall_1_4_2_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getXpathPathExprAccess().getPredicateXpathExpressionParserRuleCall_1_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathFilterExpr__PredicateAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathFilterExprAccess().getPredicateXpathExpressionParserRuleCall_1_2_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getXpathFilterExprAccess().getPredicateXpathExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__NameAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getNameQNAMEParserRuleCall_0_2_0()); }
		ruleQNAME
		{ after(grammarAccess.getXpathPrimaryExprAccess().getNameQNAMEParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getXpathPrimaryExprAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getValueNUMBERTerminalRuleCall_3_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getXpathPrimaryExprAccess().getValueNUMBERTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__NameAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getNameQNAMEParserRuleCall_4_1_0()); }
		ruleQNAME
		{ after(grammarAccess.getXpathPrimaryExprAccess().getNameQNAMEParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__ArgsAssignment_4_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getArgsXpathExpressionParserRuleCall_4_3_0_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getXpathPrimaryExprAccess().getArgsXpathExpressionParserRuleCall_4_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__ArgsAssignment_4_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getArgsXpathExpressionParserRuleCall_4_3_1_1_0()); }
		ruleXpathExpression
		{ after(grammarAccess.getXpathPrimaryExprAccess().getArgsXpathExpressionParserRuleCall_4_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__StepAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getStepXpathStepParserRuleCall_5_1_0()); }
		ruleXpathStep
		{ after(grammarAccess.getXpathPrimaryExprAccess().getStepXpathStepParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__IsDescendantsAssignment_6_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsSolidusKeyword_6_2_0_0()); }
		(
			{ before(grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsSolidusKeyword_6_2_0_0()); }
			Solidus
			{ after(grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsSolidusKeyword_6_2_0_0()); }
		)
		{ after(grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsSolidusKeyword_6_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathPrimaryExpr__StepAssignment_6_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathPrimaryExprAccess().getStepXpathStepParserRuleCall_6_3_0()); }
		ruleXpathStep
		{ after(grammarAccess.getXpathPrimaryExprAccess().getStepXpathStepParserRuleCall_6_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__RefAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathStepAccess().getRefSchemaNodeCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getXpathStepAccess().getRefSchemaNodeDotParserRuleCall_0_1_0_1()); }
			ruleDot
			{ after(grammarAccess.getXpathStepAccess().getRefSchemaNodeDotParserRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getXpathStepAccess().getRefSchemaNodeCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__RefAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathStepAccess().getRefSchemaNodeCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getXpathStepAccess().getRefSchemaNodeDotDotParserRuleCall_1_1_0_1()); }
			ruleDotDot
			{ after(grammarAccess.getXpathStepAccess().getRefSchemaNodeDotDotParserRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getXpathStepAccess().getRefSchemaNodeCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__AttributeNameAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathStepAccess().getAttributeNameXpathIDOrKwParserRuleCall_2_2_0()); }
		ruleXpathIDOrKw
		{ after(grammarAccess.getXpathStepAccess().getAttributeNameXpathIDOrKwParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__AxisAssignment_3_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathStepAccess().getAxisXpathAxisNameParserRuleCall_3_0_0_0()); }
		ruleXpathAxisName
		{ after(grammarAccess.getXpathStepAccess().getAxisXpathAxisNameParserRuleCall_3_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathStep__NodeAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathStepAccess().getNodeXpathNodeTestParserRuleCall_3_1_0()); }
		ruleXpathNodeTest
		{ after(grammarAccess.getXpathStepAccess().getNodeXpathNodeTestParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathNodeTestAccess().getNameXpathNodeTypeParserRuleCall_1_1_0()); }
		ruleXpathNodeType
		{ after(grammarAccess.getXpathNodeTestAccess().getNameXpathNodeTypeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNodeTest__InstructionAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathNodeTestAccess().getInstructionSTRINGTerminalRuleCall_2_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getXpathNodeTestAccess().getInstructionSTRINGTerminalRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__PrefixAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathNameTestAccess().getPrefixIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getXpathNameTestAccess().getPrefixIDTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XpathNameTest__RefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXpathNameTestAccess().getRefSchemaNodeCrossReference_1_0()); }
		(
			{ before(grammarAccess.getXpathNameTestAccess().getRefSchemaNodeXpathIDOrKwParserRuleCall_1_0_1()); }
			ruleXpathIDOrKw
			{ after(grammarAccess.getXpathNameTestAccess().getRefSchemaNodeXpathIDOrKwParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getXpathNameTestAccess().getRefSchemaNodeCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
