package io.typefox.yang.tests.completion;

import com.google.common.base.Splitter;
import io.typefox.yang.tests.AbstractYangLSPTest;
import io.typefox.yang.utils.YangDateUtils;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import org.eclipse.lsp4j.Position;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ide.server.Document;
import org.eclipse.xtext.testing.TestCompletionConfiguration;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;

@SuppressWarnings("all")
public class StatementCompletionTest extends AbstractYangLSPTest {
  private static final String MODEL = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module amodule {");
      _builder.newLine();
      _builder.append("/*03*/");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("namespace \"urn:test:amodule\";");
      _builder.newLine();
      _builder.append("/*04*/");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("prefix \"amodule\";");
      _builder.newLine();
      _builder.append("/*05*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("organization \"organização güi\";");
      _builder.newLine();
      _builder.append("/*06*/");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("contact \"àéïç¢ô\";");
      _builder.newLine();
      _builder.append("/*07*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("grouping x {");
      _builder.newLine();
      _builder.append("/*08*/");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("leaf y { type string; }");
      _builder.newLine();
      _builder.append("/*09*/");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("/*10*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("rpc run {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("input { uses x; }");
      _builder.newLine();
      _builder.append("/*11*/");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("output { uses x; }");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("/*12*/");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("container amodule {");
      _builder.newLine();
      _builder.append("/*13*/");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("choice z;");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("augment /amodule/z {");
      _builder.newLine();
      _builder.append("/*14*/");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container foo {");
      _builder.newLine();
      _builder.append("/*15*/");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("leaf a {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  @Test
  public void testStatement_01() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("m");
      it.setModel(_builder.toString());
      it.setLine(0);
      it.setColumn(1);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module (Creates a new \"module\" statement.) -> module ${1:MyModel} {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("yang-version 1.1;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("namespace urn:ietf:params:xml:ns:yang:${1:MyModel};");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("prefix ${1:MyModel};");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("$0");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("[[0, 0] .. [0, 1]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testStatement_02() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("mo");
      it.setModel(_builder.toString());
      it.setLine(0);
      it.setColumn(2);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module (Creates a new \"module\" statement.) -> module ${1:MyModel} {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("yang-version 1.1;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("namespace urn:ietf:params:xml:ns:yang:${1:MyModel};");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("prefix ${1:MyModel};");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("$0");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("[[0, 0] .. [0, 2]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testStatement_03() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("yang-version (Creates a new \"yang-version\" statement.) -> yang-version ${1:1.1};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[1, 6] .. [1, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*03*/", _function));
  }
  
  @Test
  public void testStatement_04() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("yang-version (Creates a new \"yang-version\" statement.) -> yang-version ${1:1.1};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[3, 6] .. [3, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*04*/", _function));
  }
  
  @Test
  public void testStatement_05() {
    final List<String> now = this.getNow();
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[5, 6] .. [5, 6]]");
      _builder.newLine();
      _builder.append("import (Creates a new \"import\" statement.) -> import ${1:} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix ${1:};");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("revision-date ${2:");
      String _get = now.get(0);
      _builder.append(_get, "    ");
      _builder.append("}-${3:");
      String _get_1 = now.get(1);
      _builder.append(_get_1, "    ");
      _builder.append("}-${4:");
      String _get_2 = now.get(2);
      _builder.append(_get_2, "    ");
      _builder.append("};");
      _builder.newLineIfNotEmpty();
      _builder.append("}$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[5, 6] .. [5, 6]]");
      _builder.newLine();
      _builder.append("include (Creates a new \"include\" statement.) -> include ${1:} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("revision-date ${2:");
      String _get_3 = now.get(0);
      _builder.append(_get_3, "    ");
      _builder.append("}-${3:");
      String _get_4 = now.get(1);
      _builder.append(_get_4, "    ");
      _builder.append("}-${4:");
      String _get_5 = now.get(2);
      _builder.append(_get_5, "    ");
      _builder.append("};");
      _builder.newLineIfNotEmpty();
      _builder.append("}$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[5, 6] .. [5, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[5, 6] .. [5, 6]]");
      _builder.newLine();
      _builder.append("yang-version (Creates a new \"yang-version\" statement.) -> yang-version ${1:1.1};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[5, 6] .. [5, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*05*/", _function));
  }
  
  @Test
  public void testStatement_06() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[8, 6] .. [8, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[8, 6] .. [8, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*06*/", _function));
  }
  
  @Test
  public void testStatement_07() {
    final List<String> now = this.getNow();
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("augment (Creates a new \"augment\" statement.) -> augment ${1:} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("deviation (Creates a new \"deviation\" statement.) -> deviation ${1:node-identifier} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("deviate ${2:deviate-action} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$3");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("extension (Creates a new \"extension\" statement.) -> extension ${1:extension-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("feature (Creates a new \"feature\" statement.) -> feature ${1:feature-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("identity (Creates a new \"identity\" statement.) -> identity ${1:identity-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("notification (Creates a new \"notification\" statement.) -> notification ${1:action-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("revision (Creates a new \"revision\" statement.) -> revision ${1:");
      String _get = now.get(0);
      _builder.append(_get);
      _builder.append("}-${2:");
      String _get_1 = now.get(1);
      _builder.append(_get_1);
      _builder.append("}-${3:");
      String _get_2 = now.get(2);
      _builder.append(_get_2);
      _builder.append("} {");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("description \"${4}\";$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("rpc (Creates a new \"rpc\" statement.) -> rpc ${1:rpc-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[10, 6] .. [10, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*07*/", _function));
  }
  
  @Test
  public void testStatement_08() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("status (Creates a new \"status\" statement.) -> status ${1:current};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[13, 6] .. [13, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*08*/", _function));
  }
  
  @Test
  public void testStatement_09() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("status (Creates a new \"status\" statement.) -> status ${1:current};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[15, 6] .. [15, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*09*/", _function));
  }
  
  @Test
  public void testStatement_10() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("augment (Creates a new \"augment\" statement.) -> augment ${1:} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("deviation (Creates a new \"deviation\" statement.) -> deviation ${1:node-identifier} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("deviate ${2:deviate-action} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$3");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("extension (Creates a new \"extension\" statement.) -> extension ${1:extension-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("feature (Creates a new \"feature\" statement.) -> feature ${1:feature-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("identity (Creates a new \"identity\" statement.) -> identity ${1:identity-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("notification (Creates a new \"notification\" statement.) -> notification ${1:action-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("rpc (Creates a new \"rpc\" statement.) -> rpc ${1:rpc-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[17, 6] .. [17, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*10*/", _function));
  }
  
  @Test
  public void testStatement_11() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[21, 6] .. [21, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[21, 6] .. [21, 6]]");
      _builder.newLine();
      _builder.append("if-feature (Creates a new \"if-feature\" statement.) -> if-feature ${1:}$2;$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[21, 6] .. [21, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[21, 6] .. [21, 6]]");
      _builder.newLine();
      _builder.append("status (Creates a new \"status\" statement.) -> status ${1:current};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[21, 6] .. [21, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[21, 6] .. [21, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*11*/", _function));
  }
  
  @Test
  public void testStatement_12() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("augment (Creates a new \"augment\" statement.) -> augment ${1:} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("deviation (Creates a new \"deviation\" statement.) -> deviation ${1:node-identifier} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("deviate ${2:deviate-action} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$3");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("extension (Creates a new \"extension\" statement.) -> extension ${1:extension-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("feature (Creates a new \"feature\" statement.) -> feature ${1:feature-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("identity (Creates a new \"identity\" statement.) -> identity ${1:identity-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("notification (Creates a new \"notification\" statement.) -> notification ${1:action-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("rpc (Creates a new \"rpc\" statement.) -> rpc ${1:rpc-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[24, 6] .. [24, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*12*/", _function));
  }
  
  @Test
  public void testStatement_13() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("config (Creates a new \"config\" statement.) -> config ${1:false};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("if-feature (Creates a new \"if-feature\" statement.) -> if-feature ${1:}$2;$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("must (Creates a new \"must\" statement.) -> must \"${1:expression}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("presence (Creates a new \"presence\" statement.) -> presence ${1:meaning};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("status (Creates a new \"status\" statement.) -> status ${1:current};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      _builder.append("when (Creates a new \"when\" statement.) -> when \"${1:expression}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[26, 6] .. [26, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*13*/", _function));
  }
  
  @Test
  public void testStatement_14() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("case (Creates a new \"case\" statement.) -> case ${1:case-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("if-feature (Creates a new \"if-feature\" statement.) -> if-feature ${1:}$2;$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("status (Creates a new \"status\" statement.) -> status ${1:current};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      _builder.append("when (Creates a new \"when\" statement.) -> when \"${1:expression}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[31, 6] .. [31, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*14*/", _function));
  }
  
  @Test
  public void testStatement_15() {
    final Function0<CharSequence> _function = () -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("anyxml (Creates a new \"anyxml\" statement.) -> anyxml ${1:xml};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("choice (Creates a new \"choice\" statement.) -> choice ${1:choice-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("config (Creates a new \"config\" statement.) -> config ${1:false};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("container (Creates a new \"container\" statement.) -> container ${1:container-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("description (Creates a new \"description\" statement.) -> description \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("grouping (Creates a new \"grouping\" statement.) -> grouping ${1:grouping-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("if-feature (Creates a new \"if-feature\" statement.) -> if-feature ${1:}$2;$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("leaf (Creates a new \"leaf\" statement.) -> leaf ${1:leaf-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("leaf-list (Creates a new \"leaf-list\" statement.) -> leaf-list ${1:leaf-list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:type-name} {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("list (Creates a new \"list\" statement.) -> list ${1:list-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("must (Creates a new \"must\" statement.) -> must \"${1:expression}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("presence (Creates a new \"presence\" statement.) -> presence ${1:meaning};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("reference (Creates a new \"reference\" statement.) -> reference \"${1:}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("status (Creates a new \"status\" statement.) -> status ${1:current};$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("typedef (Creates a new \"typedef\" statement.) -> typedef ${1:type-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type ${2:};$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("uses (Creates a new \"uses\" statement.) -> uses ${1:group-name} {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("$0");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      _builder.append("when (Creates a new \"when\" statement.) -> when \"${1:expression}\";$0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("[[33, 6] .. [33, 6]]");
      _builder.newLine();
      return _builder.toString();
    };
    this.testCompletion(this.createConfiguration(StatementCompletionTest.MODEL, "/*15*/", _function));
  }
  
  private void testCompletion(final TestCompletionConfiguration config) {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      it.setModel(config.getModel());
      it.setLine(config.getLine());
      it.setColumn(config.getColumn());
      it.setExpectedCompletionItems(config.getExpectedCompletionItems());
    };
    this.testCompletion(_function);
  }
  
  private TestCompletionConfiguration createConfiguration(final String content, final String searchTerm, final Function0<? extends CharSequence> expected) {
    final int indexOf = content.indexOf(searchTerm);
    if ((indexOf < 0)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Search term: \'");
      _builder.append(searchTerm);
      _builder.append("\' does not exist in the content: ");
      _builder.append(content);
      _builder.append(".");
      throw new IllegalArgumentException(_builder.toString());
    }
    int _length = searchTerm.length();
    final int offset = (indexOf + _length);
    final Document doc = new Document(Integer.valueOf(0), content);
    final Position position = doc.getPosition(offset);
    TestCompletionConfiguration _testCompletionConfiguration = new TestCompletionConfiguration();
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      it.setModel(doc.getContents());
      it.setLine(position.getLine());
      it.setColumn(position.getCharacter());
      it.setExpectedCompletionItems(expected.apply().toString());
    };
    return ObjectExtensions.<TestCompletionConfiguration>operator_doubleArrow(_testCompletionConfiguration, _function);
  }
  
  private List<String> getNow() {
    SimpleDateFormat _revisionDateFormat = YangDateUtils.getRevisionDateFormat();
    Date _date = new Date();
    return Splitter.on("-").trimResults().splitToList(_revisionDateFormat.format(_date));
  }
}
