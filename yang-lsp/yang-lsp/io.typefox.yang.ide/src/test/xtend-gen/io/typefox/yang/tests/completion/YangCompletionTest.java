package io.typefox.yang.tests.completion;

import io.typefox.yang.tests.AbstractYangLSPTest;
import java.util.Collections;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.TestCompletionConfiguration;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;

@SuppressWarnings("all")
public class YangCompletionTest extends AbstractYangLSPTest {
  @Test
  public void testTypeCompletion_01() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("typedef myType {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("leaf x {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(5);
      it.setColumn(13);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("myType (Typedef) -> myType [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("binary -> binary [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("bits -> bits [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("boolean -> boolean [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("decimal64 -> decimal64 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("empty -> empty [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("enumeration -> enumeration [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("identityref -> identityref [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("instance-identifier -> instance-identifier [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("int16 -> int16 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("int32 -> int32 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("int64 -> int64 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("int8 -> int8 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("leafref -> leafref [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("string -> string [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint16 -> uint16 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint32 -> uint32 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint64 -> uint64 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint8 -> uint8 [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      _builder_1.append("union -> union [[5, 13] .. [5, 13]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testTypeCompletion_02() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module otherModule {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("prefix bla;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("typedef myType {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("otherModule.yang", _builder.toString());
      it.setFilesInScope(Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo)));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module foo {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("import otherModule {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("prefix other;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("leaf x {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("type ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      it.setModel(_builder_1.toString());
      it.setLine(5);
      it.setColumn(13);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("other:myType (Typedef) -> other:myType [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("binary -> binary [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("bits -> bits [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("boolean -> boolean [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("decimal64 -> decimal64 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("empty -> empty [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("enumeration -> enumeration [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("identityref -> identityref [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("instance-identifier -> instance-identifier [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("int16 -> int16 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("int32 -> int32 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("int64 -> int64 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("int8 -> int8 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("leafref -> leafref [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("string -> string [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("uint16 -> uint16 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("uint32 -> uint32 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("uint64 -> uint64 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("uint8 -> uint8 [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      _builder_2.append("union -> union [[5, 13] .. [5, 13]]");
      _builder_2.newLine();
      it.setExpectedCompletionItems(_builder_2.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testTypeCompletion_03() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("typedef A {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("container bla {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("typedef B {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("leaf x {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(10);
      it.setColumn(13);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("A (Typedef) -> A [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("binary -> binary [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("bits -> bits [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("boolean -> boolean [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("decimal64 -> decimal64 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("empty -> empty [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("enumeration -> enumeration [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("identityref -> identityref [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("instance-identifier -> instance-identifier [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("int16 -> int16 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("int32 -> int32 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("int64 -> int64 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("int8 -> int8 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("leafref -> leafref [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("string -> string [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint16 -> uint16 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint32 -> uint32 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint64 -> uint64 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("uint8 -> uint8 [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      _builder_1.append("union -> union [[10, 13] .. [10, 13]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testTypeCompletion_04() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("typedef A {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("container bla {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("typedef B {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("leaf x {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("type ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(9);
      it.setColumn(8);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("A (Typedef) -> A [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("B (Typedef) -> B [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("binary -> binary [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("bits -> bits [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("boolean -> boolean [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("decimal64 -> decimal64 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("empty -> empty [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("enumeration -> enumeration [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("identityref -> identityref [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("instance-identifier -> instance-identifier [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("int16 -> int16 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("int32 -> int32 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("int64 -> int64 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("int8 -> int8 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("leafref -> leafref [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("string -> string [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("uint16 -> uint16 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("uint32 -> uint32 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("uint64 -> uint64 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("uint8 -> uint8 [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      _builder_1.append("union -> union [[9, 8] .. [9, 8]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testGroupingCompletion_01() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grouping A {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("container a{}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("uses ");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(4);
      it.setColumn(6);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("A (Grouping) -> A [[4, 6] .. [4, 6]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testGroupingCompletion_02() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("submodule subm {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("belongs-to foo {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("prefix foo;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grouping A {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("container a{}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("submodule.yang", _builder.toString());
      it.setFilesInScope(Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo)));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module foo {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("prefix f;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("include subm;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("uses ");
      _builder_1.newLine();
      _builder_1.append("}");
      it.setModel(_builder_1.toString());
      it.setLine(3);
      it.setColumn(6);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("A (Grouping) -> A [[3, 6] .. [3, 6]]");
      _builder_2.newLine();
      it.setExpectedCompletionItems(_builder_2.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testImportedGroupingCompletion() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module otherModule {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("prefix other;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grouping A {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("container a{}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("otherModule.yang", _builder.toString());
      it.setFilesInScope(Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo)));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module foo {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("prefix f;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("import otherModule {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("prefix bla;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("uses ");
      _builder_1.newLine();
      _builder_1.append("}");
      it.setModel(_builder_1.toString());
      it.setLine(5);
      it.setColumn(6);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("bla:A (Grouping) -> bla:A [[5, 6] .. [5, 6]]");
      _builder_2.newLine();
      it.setExpectedCompletionItems(_builder_2.toString());
    };
    this.testCompletion(_function);
  }
}
