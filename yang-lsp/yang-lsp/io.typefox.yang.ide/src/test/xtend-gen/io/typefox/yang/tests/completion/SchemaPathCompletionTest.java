package io.typefox.yang.tests.completion;

import io.typefox.yang.tests.AbstractYangLSPTest;
import java.util.Collections;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.TestCompletionConfiguration;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;

@SuppressWarnings("all")
public class SchemaPathCompletionTest extends AbstractYangLSPTest {
  @Test
  public void testNodeCompletion_01() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("prefix f;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("leaf x {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("augment ");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(5);
      it.setColumn(9);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("/x -> /x [[5, 9] .. [5, 9]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testNodeCompletion_02() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("prefix f;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("container bar {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("leaf x {");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("augment \"/bar/\"");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(7);
      it.setColumn(15);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("x -> x [[7, 15] .. [7, 15]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testNodeCompletion_03() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("prefix f;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("container bar {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("leaf x {");
      _builder.newLine();
      _builder.append("\t        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("augment \"/bar/x\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("container foo {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("leaf y {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("augment /bar/");
      _builder.newLine();
      _builder.append("}");
      it.setModel(_builder.toString());
      it.setLine(14);
      it.setColumn(14);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("x -> x [[14, 14] .. [14, 14]]");
      _builder_1.newLine();
      _builder_1.append("x/foo -> x/foo [[14, 14] .. [14, 14]]");
      _builder_1.newLine();
      _builder_1.append("x/foo/y -> x/foo/y [[14, 14] .. [14, 14]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testNodeCompletion_04() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module other {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("container bla {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      Pair<String, String> _mappedTo = Pair.<String, String>of("other.yang", _builder.toString());
      it.setFilesInScope(Collections.<String, CharSequence>unmodifiableMap(CollectionLiterals.<String, CharSequence>newHashMap(_mappedTo)));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module foo {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("prefix f;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("import other {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("prefix o;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("augment \"/o:bla\" {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("container foo {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("leaf y {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("augment ");
      _builder_1.newLine();
      _builder_1.append("}");
      it.setModel(_builder_1.toString());
      it.setLine(12);
      it.setColumn(9);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("/o:bla -> /o:bla [[12, 9] .. [12, 9]]");
      _builder_2.newLine();
      _builder_2.append("/o:bla/foo -> /o:bla/foo [[12, 9] .. [12, 9]]");
      _builder_2.newLine();
      _builder_2.append("/o:bla/foo/y -> /o:bla/foo/y [[12, 9] .. [12, 9]]");
      _builder_2.newLine();
      it.setExpectedCompletionItems(_builder_2.toString());
    };
    this.testCompletion(_function);
  }
  
  @Test
  public void testRelativeCompletion() {
    final Procedure1<TestCompletionConfiguration> _function = (TestCompletionConfiguration it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module augtest {");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("namespace \"http://example.com/augtest\";");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("prefix \"at\";");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("grouping foobar {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container outer {");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("container inner {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf foo {");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("type uint8;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("rpc agoj {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("input {");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("uses foobar {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("augment \"outer/inner\" {");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("when \"foo!=42\";");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("leaf bar {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setModel(_builder.toString());
      it.setLine(15);
      it.setColumn(17);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("outer -> outer [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("outer/inner -> outer/inner [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("outer/inner/bar -> outer/inner/bar [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("outer/inner/foo -> outer/inner/foo [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj -> /agoj [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj/input -> /agoj/input [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj/input/outer -> /agoj/input/outer [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj/input/outer/inner -> /agoj/input/outer/inner [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj/input/outer/inner/bar -> /agoj/input/outer/inner/bar [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj/input/outer/inner/foo -> /agoj/input/outer/inner/foo [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      _builder_1.append("/agoj/output -> /agoj/output [[15, 17] .. [15, 17]]");
      _builder_1.newLine();
      it.setExpectedCompletionItems(_builder_1.toString());
    };
    this.testCompletion(_function);
  }
}
