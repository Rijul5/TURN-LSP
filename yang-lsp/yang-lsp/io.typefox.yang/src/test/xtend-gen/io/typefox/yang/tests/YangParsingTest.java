/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang.tests;

import com.google.inject.Inject;
import io.typefox.yang.tests.YangInjectorProvider;
import io.typefox.yang.yang.AbstractModule;
import io.typefox.yang.yang.Path;
import io.typefox.yang.yang.Statement;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.diagnostics.Diagnostic;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.EmfFormatter;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(YangInjectorProvider.class)
@SuppressWarnings("all")
public class YangParsingTest {
  @Inject
  @Extension
  private ParseHelper<AbstractModule> parser;
  
  @Inject
  private ValidationTestHelper helper;
  
  @Test
  public void testCustom() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("foo:bar 43tg3g3;");
      _builder.newLine();
      final AbstractModule model = this.parser.parse(this.wrapModule(_builder));
      this.helper.assertNoErrors(model, Diagnostic.SYNTAX_DIAGNOSTIC);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testXpath() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("path \"/ll:x/ll:q[ll:a = current()/../a]/ll:b\";");
      _builder.newLine();
      final AbstractModule model = this.parser.parse(this.wrapModule(_builder));
      this.helper.assertNoErrors(model, Diagnostic.SYNTAX_DIAGNOSTIC);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("XpathLocation {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("cref XpathExpression target XpathFilter {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("cref XpathExpression target XpathLocation {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref XpathExpression target AbsolutePath {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("cref XpathStep step XpathStep {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("cref XpathNodeTest node XpathNameTest {");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("attr EString prefix \'ll\'");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("ref SchemaNode ref ref: SchemaNode@(unresolved proxy __synthetic0.yang#|0)");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref XpathStep step XpathStep {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("cref XpathNodeTest node XpathNameTest {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("attr EString prefix \'ll\'");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("ref SchemaNode ref ref: SchemaNode@(unresolved proxy __synthetic0.yang#|1)");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("cref XpathExpression predicate XpathEqualityOperation {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref XpathExpression left RelativePath {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("cref XpathStep step XpathStep {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("cref XpathNodeTest node XpathNameTest {");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("attr EString prefix \'ll\'");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("ref SchemaNode ref ref: SchemaNode@(unresolved proxy __synthetic0.yang#|2)");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString operator \'=\'");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref XpathExpression right XpathLocation {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("cref XpathExpression target XpathLocation {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("cref XpathExpression target XpathFunctionCall {");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("attr EString name \'current\'");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("cref XpathStep step ParentRef {");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("ref SchemaNode ref ref: SchemaNode@(unresolved proxy __synthetic0.yang#|3)");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("cref XpathStep step XpathStep {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("cref XpathNodeTest node XpathNameTest {");
      _builder_1.newLine();
      _builder_1.append("                        ");
      _builder_1.append("ref SchemaNode ref ref: SchemaNode@(unresolved proxy __synthetic0.yang#|4)");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("cref XpathStep step XpathStep {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("cref XpathNodeTest node XpathNameTest {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString prefix \'ll\'");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("ref SchemaNode ref ref: SchemaNode@(unresolved proxy __synthetic0.yang#|5)");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      Statement _head = IterableExtensions.<Statement>head(model.getSubstatements());
      Assert.assertEquals(_builder_1.toString(), Strings.toPlatformLineSeparator(EmfFormatter.objToStr(((Path) _head).getReference())));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testXpath_02() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("must \"child::para[position()=last()-1]\";");
      _builder.newLine();
      final AbstractModule m = this.parser.parse(this.wrapModule(_builder));
      this.helper.assertNoErrors(m, Diagnostic.SYNTAX_DIAGNOSTIC);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module example-system {");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("namespace \"urn:example:system\";");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("prefix \"sys\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("       ");
      _builder.append("import ietf-yang-types {");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("prefix \"yang\";");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("reference \"RFC 6991: Common YANG Data Types\";");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("       ");
      _builder.append("include example-types;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("       ");
      _builder.append("organization \"Example Inc.\";");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("contact");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("\"Joe L. User");
      _builder.newLine();
      _builder.newLine();
      _builder.append("          ");
      _builder.append("Example Inc.");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("42 Anywhere Drive");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("Nowhere, CA 95134");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("USA");
      _builder.newLine();
      _builder.newLine();
      _builder.append("          ");
      _builder.append("Phone: +1 800 555 0100");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("EMail: joe@example.com\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("       ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("\"The module for entities implementing the Example system.\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("       ");
      _builder.append("revision 2007-06-09 {");
      _builder.newLine();
      _builder.append("         ");
      _builder.append("description \"Initial revision.\";");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("       ");
      _builder.append("my:custom rule {");
      _builder.newLine();
      _builder.append("       \t\t");
      _builder.append("other:strange rf3-4.5345we2;");
      _builder.newLine();
      _builder.append("       ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("}");
      _builder.newLine();
      final AbstractModule model = this.parser.parse(_builder);
      this.helper.assertNoErrors(model, Diagnostic.SYNTAX_DIAGNOSTIC);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Module {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("cref Statement substatements [");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("0 : YangVersion {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString yangVersion \'1.1\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("1 : Namespace {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString uri \'urn:example:system\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("2 : Prefix {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString prefix \'sys\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("3 : Import {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref Statement substatements [");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("0: Prefix {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("attr EString prefix \'yang\'");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("1: Reference {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("attr EString reference \'RFC 6991: Common YANG Data Types\'");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("ref AbstractModule module ref: AbstractModule@(unresolved proxy __synthetic0.yang#|0)");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("4 : Include {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("ref AbstractModule module ref: AbstractModule@(unresolved proxy __synthetic0.yang#|1)");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("5 : Organization {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString organization \'Example Inc.\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("6 : Contact {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString contact \'Joe L. User");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("Example Inc.");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("42 Anywhere Drive");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("Nowhere, CA 95134");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("USA");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("Phone: +1 800 555 0100");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("EMail: joe@example.com\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("7 : Description {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString description \'The module for entities implementing the Example system.\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("8 : Revision {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref Statement substatements [");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("0: Description {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("attr EString description \'Initial revision.\'");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString revision \'2007-06-09\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("9 : Unknown {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("cref Statement substatements [");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("0: Unknown {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("ref Extension extension ref: Extension@(unresolved proxy __synthetic0.yang#|3)");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("attr EString name \'rf3-4.5345we2\'");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("ref Extension extension ref: Extension@(unresolved proxy __synthetic0.yang#|2)");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("attr EString name \'rule\'");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("attr EString name \'example-system\'");
      _builder_1.newLine();
      _builder_1.append("}");
      Assert.assertEquals(_builder_1.toString(), Strings.toPlatformLineSeparator(EmfFormatter.objToStr(model)));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testParseRange_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range 1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \'1\';");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \"1\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \'1 | 2\';");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \"1 | 2..4\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_06() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \'1 | 2..4\';");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_07() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \"1 | 2..4 | 5\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_08() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \"1 | 2..max | 5\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_09() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \"1 | min..4 | 5\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_10() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \"1 | min..max | 5\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_11() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \'1 | min  ..  max | 5\';");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  @Test
  public void testParseRange_12() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("range \'1 | 2 ..  3|4 ..  5      | 6 | 7..  max\';");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    this.assertNoParserErrors(this.wrapModule(_builder));
  }
  
  private CharSequence wrapModule(final CharSequence it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(it, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private void assertNoParserErrors(final CharSequence it) {
    try {
      this.helper.assertNoErrors(this.parser.parse(it), Diagnostic.SYNTAX_DIAGNOSTIC);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
