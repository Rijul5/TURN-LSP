package io.typefox.yang.tests.formatter;

import io.typefox.yang.tests.AbstractYangTest;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.formatter.FormatterTestRequest;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;

@SuppressWarnings("all")
public class ExampleTest extends AbstractYangTest {
  @Test
  public void test_example_model() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module examples {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"http://netconfcentral.org/ns/examples\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix \"ex\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("import ietf-inet-types {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("prefix inet;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("organization");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"Netconf Central\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("contact");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"Andy Bierman\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"Some YANG draft examples.\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("revision 2008-11-09 {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"Initial version.\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container system {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf host-name {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"Hostname for this system\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf-list domain-search {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"List of domain names to search\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("container login {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf message {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"Message given at start of login session\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("list user {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("key \"name\";");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf name {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf full-name {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf class {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("container services {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"Configure externally available services\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("container \"ssh\" {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("presence");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"Enables SSH\";");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"SSH service specific configuration\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("// more leafs, containers and stuff here...");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("list server {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("key \"name\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("unique \"ip port\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf name {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf ip {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type inet:ip-address;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf port {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type inet:port-number;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("leaf mgmt-interface {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type leafref {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("path \"../interfaces/interface/name\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container default-address {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf ifname {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type leafref {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("path \"../../interfaces/interface/name\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf address {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type leafref {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("path \"../../interfaces/interface[name = current()/../ifname]\"");
      _builder.newLine();
      _builder.append("                   ");
      _builder.append("+ \"/address/ip\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container interfaces {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("list interface {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("must \"ifType != \'ethernet\' or \" +");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"(ifType = \'ethernet\' and ifMTU = 1500)\" {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("error-message");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"An ethernet MTU must be 1500\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("must \"ifType != \'atm\' or \" +");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"(ifType = \'atm\' and ifMTU <= 17966 and ifMTU >= 64)\" {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("error-message");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"An atm MTU must be  64 .. 17966\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("key \"name\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("config true;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf name {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf type {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf speed {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type enumeration {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("enum 10m;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("enum 100m;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("enum auto;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf observed-speed {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type uint32;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("config false;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("list address {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("key \"ip\";");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf ip {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type inet:ip-address;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf ifType {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type enumeration {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("enum ethernet;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("enum atm;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf ifMTU {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type uint32;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef percent {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type uint16 {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("range \"0 .. 100\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"Percentage\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("leaf completed {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type percent;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("grouping target {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf address {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type inet:ip-address;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"Target IP address\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf port {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type inet:port-number;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"Target port number\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container peer {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("container destination {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("uses target;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("/*");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*     container connection {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*         container source {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*             uses target {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 refine \"address\" {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                     description \"Source IP address\";");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 refine \"port\" {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                     description \"Source port number\";");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*             }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*         }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*         container destination {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*             uses target {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 refine \"address\" {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                     description \"Destination IP address\";");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 refine \"port\" {");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                     description \"Destination port number\";");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*                 }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*             }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*         }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*     }");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container food {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice snack {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("mandatory true;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case sports-arena {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf pretzel {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type empty;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf beer {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type empty;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case late-night {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf chocolate {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type enumeration {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("enum dark;");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("enum milk;");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("enum first-available;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("augment /system/login/user {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("when \"class != \'wheel\'\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf uid {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type uint16 {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("range \"1000 .. 30000\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rpc activate-software-image {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("input {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf image-name {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("output {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf status {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("notification link-failure {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"A link failure has been detected\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf if-name {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type leafref {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("path \"/interfaces/interface/name\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf if-admin-status {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string; // ifAdminStatus;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container transfer {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice how {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("default interval;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case interval {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf interval {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type uint16;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("default 30;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("units minutes;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case daily {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf daily {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type empty;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf time-of-day {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("units 24-hour-clock;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("default 1am;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case manual {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf manual {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type empty;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container protocol {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("choice name {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case a {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf udp {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type empty;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("case b {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf tcp {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type empty;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("grouping address {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"A reusable address group.\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf ip {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type inet:ip-address;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf port {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type inet:port-number;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container http-server {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf name {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("uses ex:address {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("refine port {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("default 80;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("list server {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("if-feature ex:local-storage;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("key \"ip port\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf name {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("uses ex:address;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rpc rock-the-house {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("input {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf zip-code {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("notification event {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf event-class {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("anyxml reporting-entity;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf severity {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("if-feature local-storage;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("// not in draft");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef ChannelNumber {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type int32 {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("range 0..max;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("augment \"/ex:interfaces/ex:interface\" {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("when \"ex:type=\'ds0\'\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf ds0ChannelNumber {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type ChannelNumber;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("identity crypto-alg {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"Base identity from which all crypto algorithms");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("are derived.\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("identity des {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("base \" ex:crypto-alg \";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"DES crypto algorithm\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("identity des3 {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("base \" ex:crypto-alg \";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"Triple DES crypto algorithm\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("leaf crypto {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type identityref {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("base \" ex:crypto-alg \";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("feature local-storage {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"This feature means the device supports local");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("storage (memory, flash or disk) that can be used to");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("store syslog messages.\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reference");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"yang-02\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("status current;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("container syslog {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf local-storage-limit {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("if-feature local-storage;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("config false;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\"The amount of local storage that can be");
      _builder.newLine();
      _builder.append("               ");
      _builder.append("used to hold syslog messages.\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("// !! not in the draft !!");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type uint32;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("units bytes;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module examples {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("namespace \"http://netconfcentral.org/ns/examples\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("prefix \"ex\";");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("import ietf-inet-types { prefix inet; }");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("organization");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\"Netconf Central\";");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("contact");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\"Andy Bierman\";");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("\"Some YANG draft examples.\";");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("revision 2008-11-09 {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("description \"Initial version.\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container system {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf host-name {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description \"Hostname for this system\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf-list domain-search {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description \"List of domain names to search\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("container login {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf message {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("\"Message given at start of login session\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("list user {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("key \"name\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf name {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf full-name {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf class {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("container services {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description \"Configure externally available services\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("container \"ssh\" {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("presence \"Enables SSH\";");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("description \"SSH service specific configuration\";");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("// more leafs, containers and stuff here...");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("list server {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("key \"name\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("unique \"ip port\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf name {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf ip {");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("type inet:ip-address;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf port {");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("type inet:port-number;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("leaf mgmt-interface {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("type leafref {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("path \"../interfaces/interface/name\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container default-address {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf ifname {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type leafref {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("path \"../../interfaces/interface/name\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf address {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type leafref {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("path \"../../interfaces/interface[name = current()/../ifname]\"");
      _builder_1.newLine();
      _builder_1.append("                   ");
      _builder_1.append("+ \"/address/ip\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container interfaces {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("list interface {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("must \"ifType != \'ethernet\' or \" +");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("\"(ifType = \'ethernet\' and ifMTU = 1500)\" {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("error-message \"An ethernet MTU must be 1500\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("must \"ifType != \'atm\' or \" +");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("\"(ifType = \'atm\' and ifMTU <= 17966 and ifMTU >= 64)\" {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("error-message \"An atm MTU must be  64 .. 17966\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("key \"name\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("config true;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf name {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf type {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf speed {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type enumeration {");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("enum 10m;");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("enum 100m;");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("enum auto;");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf observed-speed {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type uint32;");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("config false;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("list address {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("key \"ip\";");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("leaf ip {");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("type inet:ip-address;");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf ifType {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type enumeration {");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("enum ethernet;");
      _builder_1.newLine();
      _builder_1.append("                 ");
      _builder_1.append("enum atm;");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf ifMTU {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type uint32;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("typedef percent {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("type uint16 {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("range \"0 .. 100\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("description \"Percentage\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("leaf completed {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("type percent;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("grouping target {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf address {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type inet:ip-address;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description \"Target IP address\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf port {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type inet:port-number;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description \"Target port number\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container peer {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("container destination {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("uses target;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("/*");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container connection {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("container source {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("uses target {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("refine \"address\" {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("description \"Source IP address\";");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("refine \"port\" {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("description \"Source port number\";");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("container destination {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("uses target {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("refine \"address\" {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("description \"Destination IP address\";");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("refine \"port\" {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("description \"Destination port number\";");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("*/");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container food {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("choice snack {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("mandatory true;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("case sports-arena {");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("leaf pretzel {");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("type empty;");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("leaf beer {");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("type empty;");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("case late-night {");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("leaf chocolate {");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("type enumeration {");
      _builder_1.newLine();
      _builder_1.append("                      ");
      _builder_1.append("enum dark;");
      _builder_1.newLine();
      _builder_1.append("                      ");
      _builder_1.append("enum milk;");
      _builder_1.newLine();
      _builder_1.append("                      ");
      _builder_1.append("enum first-available;");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("   ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("   ");
      _builder_1.append("augment /system/login/user {");
      _builder_1.newLine();
      _builder_1.append("       ");
      _builder_1.append("when \"class != \'wheel\'\";");
      _builder_1.newLine();
      _builder_1.append("       ");
      _builder_1.append("leaf uid {");
      _builder_1.newLine();
      _builder_1.append("           ");
      _builder_1.append("type uint16 {");
      _builder_1.newLine();
      _builder_1.append("               ");
      _builder_1.append("range \"1000 .. 30000\";");
      _builder_1.newLine();
      _builder_1.append("           ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("       ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("   ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("rpc activate-software-image {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("input {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf image-name {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("output {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("leaf status {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("notification link-failure {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("description \"A link failure has been detected\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf if-name {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type leafref {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("path \"/interfaces/interface/name\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf if-admin-status {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;   // ifAdminStatus;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container transfer {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("choice how {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("default interval;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("case interval {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf interval {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type uint16;");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("default 30;");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("units minutes;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("case daily {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf daily {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type empty;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf time-of-day {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("units 24-hour-clock;");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("default 1am;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("case manual {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf manual {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type empty;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container protocol {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("choice name {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("case a {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf udp {");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("type empty;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("case b {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("leaf tcp {");
      _builder_1.newLine();
      _builder_1.append("                   ");
      _builder_1.append("type empty;");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("grouping address {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("description \"A reusable address group.\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf ip {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type inet:ip-address;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf port {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type inet:port-number;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container http-server {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf name {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("uses ex:address {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("refine port {");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("default 80;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("list server {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("if-feature ex:local-storage;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("key \"ip port\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf name {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("uses ex:address;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("rpc rock-the-house {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("input {");
      _builder_1.newLine();
      _builder_1.append("           ");
      _builder_1.append("leaf zip-code {");
      _builder_1.newLine();
      _builder_1.append("               ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("           ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("notification event {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf event-class {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("anyxml reporting-entity;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf severity {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("if-feature local-storage;");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("// not in draft");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("typedef ChannelNumber {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("type int32 {");
      _builder_1.newLine();
      _builder_1.append("           ");
      _builder_1.append("range 0..max;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("augment \"/ex:interfaces/ex:interface\" {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("when \"ex:type=\'ds0\'\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("leaf ds0ChannelNumber {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("type ChannelNumber;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("identity crypto-alg {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("\"Base identity from which all crypto algorithms");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("are derived.\";");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("identity des {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("base \"ex:crypto-alg\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("description \"DES crypto algorithm\";");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("identity des3 {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("base \"ex:crypto-alg\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("description \"Triple DES crypto algorithm\";");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("leaf crypto {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("type identityref {");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("base \"ex:crypto-alg\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("feature local-storage {");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("description \"This feature means the device supports local");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("storage (memory, flash or disk) that can be used to");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("store syslog messages.\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("reference \"yang-02\";");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("status current;");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container syslog {");
      _builder_1.newLine();
      _builder_1.append("       ");
      _builder_1.append("leaf local-storage-limit {");
      _builder_1.newLine();
      _builder_1.append("           ");
      _builder_1.append("if-feature local-storage;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("config false;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description \"The amount of local storage that can be");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("used to hold syslog messages.\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("// !! not in the draft !!");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type uint32;");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("units bytes;");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("     ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
}
