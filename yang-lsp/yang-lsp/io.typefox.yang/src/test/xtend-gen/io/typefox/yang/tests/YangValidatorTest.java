package io.typefox.yang.tests;

import io.typefox.yang.tests.AbstractYangTest;
import io.typefox.yang.validation.IssueCodes;
import io.typefox.yang.yang.Augment;
import io.typefox.yang.yang.Bit;
import io.typefox.yang.yang.Contact;
import io.typefox.yang.yang.Description;
import io.typefox.yang.yang.Deviate;
import io.typefox.yang.yang.Expression;
import io.typefox.yang.yang.FractionDigits;
import io.typefox.yang.yang.Import;
import io.typefox.yang.yang.Key;
import io.typefox.yang.yang.KeyReference;
import io.typefox.yang.yang.Leaf;
import io.typefox.yang.yang.Literal;
import io.typefox.yang.yang.Modifier;
import io.typefox.yang.yang.Position;
import io.typefox.yang.yang.Prefix;
import io.typefox.yang.yang.Refinable;
import io.typefox.yang.yang.Revision;
import io.typefox.yang.yang.Statement;
import io.typefox.yang.yang.Status;
import io.typefox.yang.yang.Type;
import io.typefox.yang.yang.Typedef;
import io.typefox.yang.yang.Value;
import io.typefox.yang.yang.YangVersion;
import java.util.Collections;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Test;

/**
 * Validation test for the YANG language.
 * 
 * @author akos.kitta
 */
@SuppressWarnings("all")
public class YangValidatorTest extends AbstractYangTest {
  @Test
  public void checkYangVersion() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-system {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.2;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:system\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"sys\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(this._yangExtensions.<YangVersion>firstSubstatementsOfType(this.root(it), YangVersion.class), IssueCodes.INCORRECT_VERSION, "1.2");
  }
  
  @Test
  public void checkSubstatement_Cardinality_MissingMandatory() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-system {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:system\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(this.root(it), IssueCodes.SUBSTATEMENT_CARDINALITY);
  }
  
  @Test
  public void checkSubstatement_RequiredCardinality_Duplicate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-system {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:system\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"sys\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"sys\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(this._yangExtensions.<Prefix>firstSubstatementsOfType(this.root(it), Prefix.class), IssueCodes.SUBSTATEMENT_CARDINALITY);
    this.assertError(this._yangExtensions.<Prefix>lastSubstatementsOfType(this.root(it), Prefix.class), IssueCodes.SUBSTATEMENT_CARDINALITY);
  }
  
  @Test
  public void checkSubstatement_Order_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-system {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:system\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("contact \"joe@example.com\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"asd\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(this._yangExtensions.<Prefix>firstSubstatementsOfType(this.root(it), Prefix.class), IssueCodes.SUBSTATEMENT_ORDERING, "prefix");
  }
  
  @Test
  public void checkSubstatement_Order_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module d {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.load(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("module example-system {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("namespace \"urn:example:system\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("yang-version 1.1;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("prefix \"asd\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("organization \"organização güi\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("contact \"àéïç¢ô\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("import d {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("prefix \"test\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final Resource it = this.load(_builder_1);
    Import _firstSubstatementsOfType = this._yangExtensions.<Import>firstSubstatementsOfType(this.root(it), Import.class);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("Substatement \'import\' must be declared before \'organization\'.");
    this.assertError(_firstSubstatementsOfType, IssueCodes.SUBSTATEMENT_ORDERING, 
      "import", _builder_2.toString());
  }
  
  @Test
  public void checkSubstatement_OptionalCardinality_Duplicate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-system {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:system\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"sys\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("contact \"joe@example.com\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("contact \"joe@example.com\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(this._yangExtensions.<Contact>firstSubstatementsOfType(this.root(it), Contact.class), IssueCodes.SUBSTATEMENT_CARDINALITY);
    this.assertError(this._yangExtensions.<Contact>lastSubstatementsOfType(this.root(it), Contact.class), IssueCodes.SUBSTATEMENT_CARDINALITY);
  }
  
  @Test
  public void checkSubstatement_VersionAwareCardinality_Invalid_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module ietf-yang-types {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.load(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("module example-system {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("namespace \"urn:example:system\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("prefix \"sys\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("import ietf-yang-types {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("prefix \"yang\";");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("description \"Imported from YANG types.\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final Resource it = this.load(_builder_1);
    this.assertError(this._yangExtensions.<Description>firstSubstatementsOfType(this._yangExtensions.<Import>firstSubstatementsOfType(this.root(it), Import.class), Description.class), 
      IssueCodes.SUBSTATEMENT_CARDINALITY);
  }
  
  @Test
  public void checkSubstatement_VersionAwareCardinality_Invalid_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module ietf-yang-types {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.load(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("module example-system {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("namespace \"urn:example:system\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("prefix \"sys\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("import ietf-yang-types {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("prefix \"yang\";");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("description \"Imported from YANG types.\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final Resource it = this.load(_builder_1);
    this.assertError(this._yangExtensions.<Description>firstSubstatementsOfType(this._yangExtensions.<Import>firstSubstatementsOfType(this.root(it), Import.class), Description.class), 
      IssueCodes.SUBSTATEMENT_CARDINALITY);
  }
  
  @Test
  public void checkSubstatement_VersionAwareCardinality_Valid() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module ietf-yang-types {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.load(_builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("module example-system {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("yang-version 1.1;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("namespace \"urn:example:system\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("prefix \"sys\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("import ietf-yang-types {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("prefix \"yang\";");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("description \"Imported from YANG types.\";");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    final Resource it = this.load(_builder_1);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkRangeOperator_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-int32-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 .. 4\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkRangeOperator_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-int32-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkTypeRestriction() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-int32-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Refinable _head = IterableExtensions.<Refinable>head(EcoreUtil2.<Refinable>getAllContentsOfType(this.root(it), Refinable.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("1 | 4");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkRangeRestriction_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-int32-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type uint8 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range -1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Expression _head = IterableExtensions.<Expression>head(EcoreUtil2.<Expression>getAllContentsOfType(this.root(it), Expression.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("-1");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkRangeRestriction_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type decimal64 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"-10 | 9\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fraction-digits 18;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Expression>head(EcoreUtil2.<Expression>getAllContentsOfType(this.root(it), Expression.class)), IssueCodes.TYPE_ERROR, "-10");
  }
  
  @Test
  public void checkRangeRestriction_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type decimal64 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"-10 | 9\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fraction-digits 17;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkRangeRestriction_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-int32-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type string {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("length -1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Expression _head = IterableExtensions.<Expression>head(EcoreUtil2.<Expression>getAllContentsOfType(this.root(it), Expression.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("-1");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkLengthRestriction_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("length \"-10 | 9\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Refinable _head = IterableExtensions.<Refinable>head(EcoreUtil2.<Refinable>getAllContentsOfType(this.root(it), Refinable.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("-10 | 9");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkLengthRestriction_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type binary {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("length \"255\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkLengthRestriction_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type binary {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("length -1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Literal _head = IterableExtensions.<Literal>head(EcoreUtil2.<Literal>getAllContentsOfType(this.root(it), Literal.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("-1");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkRangeOrder_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 1 .. 2\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Expression _head = IterableExtensions.<Expression>head(EcoreUtil2.<Expression>getAllContentsOfType(this.root(it), Expression.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("1 .. 2");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkRangeOrder_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"5 .. 10 | 1 .. 2\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Expression _head = IterableExtensions.<Expression>head(EcoreUtil2.<Expression>getAllContentsOfType(this.root(it), Expression.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("1 .. 2");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkFractionDigits_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fraction-digits 2;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class)), IssueCodes.TYPE_ERROR, "int32");
  }
  
  @Test
  public void checkFractionDigits_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type decimal64 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class)), IssueCodes.TYPE_ERROR, "decimal64");
  }
  
  @Test
  public void checkFractionDigits_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type decimal64 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fraction-digits bar;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<FractionDigits>head(EcoreUtil2.<FractionDigits>getAllContentsOfType(this.root(it), FractionDigits.class)), IssueCodes.TYPE_ERROR, "bar");
  }
  
  @Test
  public void checkFractionDigits_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type decimal64 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fraction-digits 19;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<FractionDigits>head(EcoreUtil2.<FractionDigits>getAllContentsOfType(this.root(it), FractionDigits.class)), IssueCodes.TYPE_ERROR, "19");
  }
  
  @Test
  public void checkFractionDigits_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type decimal64 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 | 4\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fraction-digits 2;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkModifier_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type string {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("pattern \'[xX][mM][lL].*\' {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("modifier invert-match;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkModifier_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type string {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("pattern \'[xX][mM][lL].*\' {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("modifier blablabla;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Modifier>head(EcoreUtil2.<Modifier>getAllContentsOfType(this.root(it), Modifier.class)), IssueCodes.TYPE_ERROR, "blablabla");
  }
  
  @Test
  public void checkPattern_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type string {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("pattern \"[0-9a-fA-F]*\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkPattern_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type string {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("length \"1..max\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("pattern \'[a-zA-Z_][a-zA-Z0-9\\-_.]*\';");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("pattern \'[xX][mM][lL].*\' {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("modifier invert-match;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkPattern_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("pattern \'[a-zA-Z_][a-zA-Z0-9\\-_.]*\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class)), IssueCodes.TYPE_ERROR, "int32");
  }
  
  @Test
  public void checkEnumStatements() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum blabla;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class)), IssueCodes.TYPE_ERROR, "int32");
  }
  
  @Test
  public void checkEnumerationUniqueness_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum zero;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum one;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum seven {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 7;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkEnumerationUniqueness_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum dupe;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum zero;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum one;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum seven {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 7;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum dupe;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class)), IssueCodes.DUPLICATE_ENUMERABLE_NAME, "dupe");
  }
  
  @Test
  public void checkEnumerationName_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    io.typefox.yang.yang.Enum _head = IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"\"");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationName_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \" 36\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    io.typefox.yang.yang.Enum _head = IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\" 36\"");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationName_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"36 \";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    io.typefox.yang.yang.Enum _head = IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"36 \"");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"a\" {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value bb;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Value _head = IterableExtensions.<Value>head(EcoreUtil2.<Value>getAllContentsOfType(this.root(it), Value.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("bb");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"a\" {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value -2147483649;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Value _head = IterableExtensions.<Value>head(EcoreUtil2.<Value>getAllContentsOfType(this.root(it), Value.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("-2147483649");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"a\" {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 2147483648;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Value _head = IterableExtensions.<Value>head(EcoreUtil2.<Value>getAllContentsOfType(this.root(it), Value.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("2147483648");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"a\" {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 10;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"b\" {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 10;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Value _head = IterableExtensions.<Value>head(EcoreUtil2.<Value>getAllContentsOfType(this.root(it), Value.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("10");
    this.assertError(_head, IssueCodes.DUPLICATE_ENUMERABLE_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"a\" {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 2147483647;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum \"b\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    io.typefox.yang.yang.Enum _head = IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"b\"");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_06() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-sub-type {");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("type my-base-enumeration-type {");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("enum yellow {");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("value 4; // illegal value change");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("enum red {");
    _builder.newLine();
    _builder.append("  \t    ");
    _builder.append("value 3;");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-enumeration-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum white {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum yellow {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 2;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum red {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 3;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    io.typefox.yang.yang.Enum _head = IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("yellow");
    this.assertError(_head, IssueCodes.ENUMERABLE_RESTRICTION_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkEnumerationValue_07() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-sub-type {");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("type my-base-enumeration-type {");
    _builder.newLine();
    _builder.append("  \t  ");
    _builder.append("enum black;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-enumeration-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum white {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum yellow {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 2;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("enum red {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("value 3;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    io.typefox.yang.yang.Enum _head = IterableExtensions.<io.typefox.yang.yang.Enum>head(EcoreUtil2.<io.typefox.yang.yang.Enum>getAllContentsOfType(this.root(it), io.typefox.yang.yang.Enum.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("black");
    this.assertError(_head, IssueCodes.ENUMERABLE_RESTRICTION_NAME, _builder_1.toString());
  }
  
  @Test
  public void checkUnionType_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type union {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Type _head = IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("union");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkUnionType_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type union {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("type string {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("pattern \"[0-9a-fA-F]*\";");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("type enumeration {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("enum default-filter;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkBitsType_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit disable-nagle {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkBitsType_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Type _head = IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("bits");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkBitsType_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit dupe {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit dupe {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Bit _head = IterableExtensions.<Bit>head(EcoreUtil2.<Bit>getAllContentsOfType(this.root(it), Bit.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("dupe");
    this.assertError(_head, IssueCodes.DUPLICATE_ENUMERABLE_NAME, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit a {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position 3;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit b {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 3;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Position _head = IterableExtensions.<Position>head(EcoreUtil2.<Position>getAllContentsOfType(this.root(it), Position.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("3");
    this.assertError(_head, IssueCodes.DUPLICATE_ENUMERABLE_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit a {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position invalid;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Position _head = IterableExtensions.<Position>head(EcoreUtil2.<Position>getAllContentsOfType(this.root(it), Position.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("invalid");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit a {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position -1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Position _head = IterableExtensions.<Position>head(EcoreUtil2.<Position>getAllContentsOfType(this.root(it), Position.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("-1");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_04() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit a {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position 4294967296;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Position _head = IterableExtensions.<Position>head(EcoreUtil2.<Position>getAllContentsOfType(this.root(it), Position.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("4294967296");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_05() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef bar {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit canAssign;");
    _builder.newLine();
    _builder.append("    \t  ");
    _builder.append("bit a {");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("position 4294967295;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit cannotAssign;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Bit _head = IterableExtensions.<Bit>head(EcoreUtil2.<Bit>getAllContentsOfType(this.root(it), Bit.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("cannotAssign");
    this.assertError(_head, IssueCodes.ORDINAL_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_06() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef mybits-subtype {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type mybits-type {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit disable-nagle {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef mybits-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit disable-nagle {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit ten-mb-only {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 2;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkBitsPosition_07() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef mybits-subtype {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type mybits-type {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit disable-nagle {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 3;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef mybits-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit disable-nagle {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit ten-mb-only {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 2;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Bit _head = IterableExtensions.<Bit>head(EcoreUtil2.<Bit>getAllContentsOfType(this.root(it), Bit.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("disable-nagle");
    this.assertError(_head, IssueCodes.ENUMERABLE_RESTRICTION_VALUE, _builder_1.toString());
  }
  
  @Test
  public void checkBitsPosition_08() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef mybits-subtype {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type mybits-type {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit invalid {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 3;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef mybits-type {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type bits {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit disable-nagle {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit auto-sense-speed {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 1;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("bit ten-mb-only {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("position 2;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Bit _head = IterableExtensions.<Bit>head(EcoreUtil2.<Bit>getAllContentsOfType(this.root(it), Bit.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("invalid");
    this.assertError(_head, IssueCodes.ENUMERABLE_RESTRICTION_NAME, _builder_1.toString());
  }
  
  @Test
  public void checkIdentityRef_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-my-crypto {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:my-crypto\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix mc;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("identity eth-if-speed {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("description ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"Representing the configured or negotiated speed of an Ethernet interface.  Definitions are only required for PHYs that can run at different speeds (e.g. BASE-T).\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("leaf crypto {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type identityref {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("base \"eth-if-speed\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkIdentityRef_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-my-crypto {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:my-crypto\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix mc;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("leaf crypto {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type identityref {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    Type _head = IterableExtensions.<Type>head(EcoreUtil2.<Type>getAllContentsOfType(this.root(it), Type.class));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("identityref");
    this.assertError(_head, IssueCodes.TYPE_ERROR, _builder_1.toString());
  }
  
  @Test
  public void checkRevisionFormat_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-my-crypto {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:my-crypto\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix mc;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-10 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("description");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"Updated to address CFC1 Review Comments.\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("reference");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"EVC Ethernet Services Definitions YANG Modules (MEF XX), TBD\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoIssues(it);
  }
  
  @Test
  public void checkRevisionFormat_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-my-crypto {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:my-crypto\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix mc;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 10-01-2017 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("description");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"Updated to address CFC1 Review Comments.\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("reference");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"EVC Ethernet Services Definitions YANG Modules (MEF XX), TBD\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertWarning(IterableExtensions.<Revision>head(EcoreUtil2.<Revision>getAllContentsOfType(this.root(it), Revision.class)), IssueCodes.INVALID_REVISION_FORMAT, "10-01-2017");
  }
  
  @Test
  public void checkRevisionOrder_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-my-crypto {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:my-crypto\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix mc;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-12;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-12;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-11;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-10;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoIssues(it);
  }
  
  @Test
  public void checkRevisionOrder_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module example-my-crypto {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:example:my-crypto\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix mc;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-11;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-12;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-10;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("revision 2017-01-10;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertWarning(IterableExtensions.<Revision>head(EcoreUtil2.<Revision>getAllContentsOfType(this.root(it), Revision.class)), IssueCodes.REVISION_ORDER, "2017-01-12");
  }
  
  @Test
  public void checkTypedef_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef my-base-type {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(this._yangExtensions.<Typedef>firstSubstatementsOfType(this.root(it), Typedef.class), IssueCodes.SUBSTATEMENT_CARDINALITY);
  }
  
  @Test
  public void checkTypedef_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:yang:types\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"yang\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("typedef string {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range \"1 .. 4\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Typedef>head(EcoreUtil2.<Typedef>getAllContentsOfType(this.root(it), Typedef.class)), IssueCodes.BAD_TYPE_NAME, "string");
  }
  
  @Test
  public void checkKey_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deref {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:deref;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("list a {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("key \"ka1 ka2\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf ka1 { type string; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf ka2 { type string; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list b {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("key kb;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("leaf kb { type string; }");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("list c {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("key kc;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("leaf kc { type string; }");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("leaf lb { type string; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf la { type string; }");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(it);
  }
  
  @Test
  public void checkKey_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deref {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:deref;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("list a {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("key \"ka1 ka2 ka1\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf ka1 { type string; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf ka2 { type string; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("list b {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("key kb;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("leaf kb { type string; }");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("list c {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("key kc;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("leaf kc { type string; }");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("leaf lb { type string; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf la { type string; }");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Key>head(EcoreUtil2.<Key>getAllContentsOfType(this.root(it), Key.class)), IssueCodes.KEY_DUPLICATE_LEAF_NAME, "ka1");
  }
  
  @Test
  public void checkKey_Config() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deref {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:deref;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("list a {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("key \"ka1\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf ka1 { type string; config false; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf la { type string; }");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<KeyReference>head(EcoreUtil2.<KeyReference>getAllContentsOfType(this.root(it), KeyReference.class)), IssueCodes.INVALID_CONFIG, "ka1");
  }
  
  @Test
  public void checkConfig_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deref {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:deref;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("container a {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("config false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("choice c {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("case a {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("leaf myLeaf {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("config true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Statement>head(IterableExtensions.<Leaf>head(EcoreUtil2.<Leaf>getAllContentsOfType(this.root(it), Leaf.class)).getSubstatements()), IssueCodes.INVALID_CONFIG);
  }
  
  @Test
  public void checkConfig_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deref {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:deref;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("container a {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("config true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("choice c {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("case a {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("leaf myLeaf {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("config false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertNoErrors(this.root(it));
  }
  
  @Test
  public void checkAugmentContent_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module amodule {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace \"urn:test:amodule\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix \"amodule\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("grouping g {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("leaf l { type string; }");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("rpc run {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("input { uses g; }");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("output { ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("uses g {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("augment l {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("leaf xxx {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Augment>last(EcoreUtil2.<Augment>getAllContentsOfType(this.root(it), Augment.class)), IssueCodes.INVALID_AUGMENTATION);
  }
  
  @Test
  public void checkDeviateArgument_01() {
    final Consumer<String> _function = (String it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module d {");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("namespace urn:d;");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("prefix d;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("container x {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("choice c {");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("leaf d {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("deviation /x/c/d {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("deviate ");
      _builder.append(it, "    ");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Resource it_1 = this.load(_builder);
      this.assertNoErrors(it_1);
    };
    Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("not-supported", "add", "replace", "delete")).forEach(_function);
  }
  
  @Test
  public void checkDeviateArgument_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module d {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("container x {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("choice c {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("leaf d {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("deviation /x/c/d {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("deviate blabla;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Deviate>head(EcoreUtil2.<Deviate>getAllContentsOfType(this.root(it), Deviate.class)), IssueCodes.TYPE_ERROR);
  }
  
  @Test
  public void checkStatusArgument_01() {
    final Consumer<String> _function = (String it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module d {");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("namespace urn:d;");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("prefix d;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  ");
      _builder.append("leaf Num1 {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("type int32 {");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("range min..max;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("description \"test 1\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("status ");
      _builder.append(it, "    ");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Resource it_1 = this.load(_builder);
      this.assertNoErrors(it_1);
    };
    Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("current", "deprecated", "obsolete")).forEach(_function);
  }
  
  @Test
  public void checkStatusArgument_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module d {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("namespace urn:d;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("prefix d;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("leaf Num1 {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("range min..max;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("description \"test 1\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("status blabla;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource it = this.load(_builder);
    this.assertError(IterableExtensions.<Status>head(EcoreUtil2.<Status>getAllContentsOfType(this.root(it), Status.class)), IssueCodes.TYPE_ERROR);
  }
}
