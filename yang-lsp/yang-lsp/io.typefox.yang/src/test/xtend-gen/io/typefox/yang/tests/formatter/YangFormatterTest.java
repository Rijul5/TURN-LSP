package io.typefox.yang.tests.formatter;

import io.typefox.yang.tests.AbstractYangTest;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.formatter.FormatterTestRequest;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;

@SuppressWarnings("all")
public class YangFormatterTest extends AbstractYangTest {
  @Test
  public void test_version() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module mytestid {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module  mytestid  {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("yang-version 1.1;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_new_lines() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module mytestid {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("module mytestid {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("        ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module  mytestid  { yang-version   1.1 ; module  mytestid  { yang-version   1.1 ; yang-version   1.1 ; ");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("yang-version 1.1;");
      _builder_1.newLine();
      _builder_1.append("} }");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_description() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix \"inet\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"This module contains a collection of generally useful derived...\";");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("prefix \"inet\";");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("\"This module contains a collection of generally useful derived...\";");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_organization() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("organization");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("organization");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("\"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_namespace_and_prefix() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix \"inet\";");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.append("namespace    ");
      _builder_1.newLine();
      _builder_1.append("\"urn:ietf:params:xml:ns:yang:ietf-inet-types\";");
      _builder_1.newLine();
      _builder_1.append("prefix       ");
      _builder_1.newLine();
      _builder_1.append("\"inet\";");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_contact() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("contact");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"WG Web:   <http://tools.ietf.org/wg/netmod/>\";");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("contact");
      _builder_1.newLine();
      _builder_1.append("   ");
      _builder_1.append("\"WG Web:   <http://tools.ietf.org/wg/netmod/>\";");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_reference() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("reference");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("\"RFC 6021: Common YANG Data Types\";");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("reference                    \"RFC 6021: Common YANG Data Types\";");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_revision() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("revision 2013-07-15 {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"This revision adds the following new data types:");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("- ip-address-no-zone");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("- ipv4-address-no-zone");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("- ipv6-address-no-zone\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reference");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"RFC 6991: Common YANG Data Types\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("revision ");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("2013-07-15 {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("       ");
      _builder_1.append("\"This revision adds the following new data types:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- ip-address-no-zone");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- ipv4-address-no-zone");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("- ipv6-address-no-zone\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("reference");
      _builder_1.newLine();
      _builder_1.append("       ");
      _builder_1.append("\"RFC 6991: Common YANG Data Types\";");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_typedef() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef ip-version {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type enumeration {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("enum unknown {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("value \"0\";");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"An unknown or unspecified version of the Internet");
      _builder.newLine();
      _builder.append("                   ");
      _builder.append("protocol.\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("enum ipv4 {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("value \"1\";");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"The IPv4 protocol as defined in RFC 791.\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("enum ipv6 {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("value \"2\";");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("\"The IPv6 protocol as defined in RFC 2460.\";");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("description");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"This value represents the version of the IP protocol.");
      _builder.newLine();
      _builder.append("           ");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("In the value set and its semantics, this type is equivalent");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("to the InetVersion textual convention of the SMIv2.\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("reference");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("\"RFC  791: Internet Protocol");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("RFC 2460: Internet Protocol, Version 6 (IPv6) Specification");
      _builder.newLine();
      _builder.append("           ");
      _builder.append("RFC 4001: Textual Conventions for Internet Network Addresses\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("typedef ip-version {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("type enumeration {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("enum unknown {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("value \"0\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("\"An unknown or unspecified version of the Internet");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("protocol.\";");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("enum ipv4 {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("value \"1\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("\"The IPv4 protocol as defined in RFC 791.\";");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("enum ipv6 {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("value \"2\";");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("             ");
      _builder_1.append("\"The IPv6 protocol as defined in RFC 2460.\";");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("description");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("\"This value represents the version of the IP protocol.");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("In the value set and its semantics, this type is equivalent");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("to the InetVersion textual convention of the SMIv2.\";");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("reference");
      _builder_1.newLine();
      _builder_1.append("         ");
      _builder_1.append("\"RFC  791: Internet Protocol");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("RFC 2460: Internet Protocol, Version 6 (IPv6) Specification");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("RFC 4001: Textual Conventions for Internet Network Addresses\";");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_pattern() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module ietf-inet-types {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef ipv6-address {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type string {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("pattern");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("\'(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))\';");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module ietf-inet-types {");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("typedef ipv6-address {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("type string {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("pattern \'(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))\';");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_uses_augment() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      it.setUseSerializer(false);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module augtest {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"http://example.com/augtest\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix \"at\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("grouping foobar {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("container outer {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("container inner {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf foo {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type uint8;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rpc agoj {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("input {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("uses foobar {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("augment outer/inner {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("leaf bar {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module augtest {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("namespace \"http://example.com/augtest\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("prefix \"at\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("grouping foobar {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container outer {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("container inner {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf foo {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("type uint8;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("rpc agoj {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("input {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("uses foobar {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("augment   outer / inner  {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("leaf bar {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_augment_path() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module augtest {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"ns\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix \"at\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("grouping foobar {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("container outer {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("container inner {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf foo {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type uint8;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rpc agoj {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("input {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("uses foobar {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("augment \"outer/inner\" {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("leaf bar {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module augtest {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("namespace \"ns\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("prefix \"at\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("grouping foobar {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container outer {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("container inner {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf foo {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("type uint8;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("rpc agoj {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("input {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("uses foobar {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("augment      \" outer / inner \"     {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("leaf bar {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_indentation() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("submodule augment-sub1 {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("belongs-to augment-super {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("prefix \"as\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("include augment-sub0;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("augment \"/interfaces\" {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("list ifEntry {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("key \"ifIndex\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("            ");
      _builder.append("leaf ifIndex {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("type int32;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("leaf llm1 {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("mandatory true;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("submodule augment-sub1 {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("belongs-to augment-super {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("prefix \"as\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("include augment-sub0;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("augment \"/interfaces\" {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("list ifEntry {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("key \"ifIndex\";");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("leaf ifIndex {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("type int32;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("leaf llm1 {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("mandatory true;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_refinable() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module foo {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("yang-version 1.1;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"foo:bar\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix x;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef foo {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type int32 {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("range \"1..40 | 60..100\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef foo2 {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type foo {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("range \"4..20\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("typedef bar {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("type bar {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("range 4..20;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module foo {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("yang-version 1.1;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("namespace \"foo:bar\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("prefix x;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("typedef foo {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("type int32 {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("range  \"1..40 | 60..100\" ;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("} ");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("typedef foo2 {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("type foo {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("range  \"4..20 \" ;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("typedef bar {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("type bar {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("range  4..20 ;");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
  
  @Test
  public void test_xpath() {
    final Procedure1<FormatterTestRequest> _function = (FormatterTestRequest it) -> {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("module augtest {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("namespace \"http://example.com/augtest\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("prefix \"at\";");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("grouping foobar {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("container outer {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("container inner {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("leaf foo {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("type uint8;");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rpc agoj {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("input {");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("uses foobar {");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("augment \"outer/inner\" {");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("when \"foo!=42\";");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("leaf bar {");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("type string;");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      it.setExpectation(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("module augtest {");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("namespace \"http://example.com/augtest\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("prefix \"at\";");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("grouping foobar {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("container outer {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("container inner {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("leaf foo {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("type uint8;");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("rpc agoj {");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("input {");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("uses foobar {");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("augment \"outer/inner\" {");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("when   \"foo!=42\"  ;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("leaf bar {");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("type string;");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      it.setToBeFormatted(_builder_1);
    };
    this.assertFormattedWithoutSerialization(_function);
  }
}
