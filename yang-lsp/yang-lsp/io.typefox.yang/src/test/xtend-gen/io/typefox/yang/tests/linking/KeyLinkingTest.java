package io.typefox.yang.tests.linking;

import com.google.common.collect.Iterators;
import io.typefox.yang.tests.AbstractYangTest;
import io.typefox.yang.yang.Key;
import io.typefox.yang.yang.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.junit.Assert;
import org.junit.Test;

@SuppressWarnings("all")
public class KeyLinkingTest extends AbstractYangTest {
  @Test
  public void testLeafLinking() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deepkey {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("namespace \"urn:ietf:params:xml:ns:yang:deepkey\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("prefix \"d\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("list myList {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("key \"bar d:baz\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("leaf bar {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container foo {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("leaf baz {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container foo2 {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("leaf bar {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    final Key k = IteratorExtensions.<Key>head(Iterators.<Key>filter(this.root(m).eAllContents(), Key.class));
    EObject _eContainer = k.getReferences().get(0).getNode().eContainer();
    Assert.assertTrue((_eContainer instanceof List));
    EObject _eContainer_1 = k.getReferences().get(1).getNode().eContainer();
    Assert.assertTrue((_eContainer_1 instanceof List));
  }
  
  @Test
  public void testLeafLinking_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module deepkey {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("namespace \"urn:ietf:params:xml:ns:yang:deepkey\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("prefix \"d\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("list myList {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("key \"bar d:baz\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container foo {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("leaf bar {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container foo2 {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("leaf baz {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("leaf bar {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    final Key k = IteratorExtensions.<Key>head(Iterators.<Key>filter(this.root(m).eAllContents(), Key.class));
    Assert.assertTrue(k.getReferences().get(0).getNode().eIsProxy());
    Assert.assertTrue(k.getReferences().get(1).getNode().eIsProxy());
  }
}
