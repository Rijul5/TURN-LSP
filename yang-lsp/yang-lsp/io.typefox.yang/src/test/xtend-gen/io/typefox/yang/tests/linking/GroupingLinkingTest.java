package io.typefox.yang.tests.linking;

import io.typefox.yang.tests.AbstractYangTest;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Test;

@SuppressWarnings("all")
public class GroupingLinkingTest extends AbstractYangTest {
  @Test
  public void testNestedUse() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("namespace \"foo:bar\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("prefix foo;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("uses A;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping A {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("list mylist {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("uses B;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping B {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("leaf myLeaf {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    this.assertNoErrors(this.root(m));
  }
  
  @Test
  public void testNestedUse_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("namespace \"foo:bar\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("prefix foo;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("uses A;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping A {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("list mylist {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("uses B;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("grouping B {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("leaf myLeaf {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    this.assertNoErrors(this.root(m));
  }
  
  @Test
  public void testNestedUse_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module yt5 {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("namespace \"urn:ietf:params:xml:ns:yang:yt5\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prefix \"yt5\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("uses AA;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping AA {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("container b {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("uses AAA;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("grouping AAA {");
    _builder.newLine();
    _builder.append("\t        \t\t");
    _builder.append("uses AAAA;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("grouping AAAA {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("container bbbb {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    this.assertNoErrors(this.root(m));
  }
}
