package io.typefox.yang.tests.linking;

import io.typefox.yang.tests.AbstractYangTest;
import io.typefox.yang.yang.Leaf;
import io.typefox.yang.yang.Type;
import io.typefox.yang.yang.Typedef;
import java.util.Iterator;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;

@SuppressWarnings("all")
public class TypeLinkingTest extends AbstractYangTest {
  @Test
  public void testTypeLinking() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("prefix \"yt4\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("leaf xx { type con1_typ1; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("leaf xxx { type yt4:con1_typ1; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("typedef con1_typ1 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("type string;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    final Iterator<? extends Leaf> leafs = this._yangExtensions.<Leaf>substatementsOfType(this.root(m), Leaf.class).iterator();
    final Typedef typeDef = IterableExtensions.head(this._yangExtensions.<Typedef>substatementsOfType(this.root(m), Typedef.class));
    Assert.assertSame(typeDef, IterableExtensions.head(this._yangExtensions.<Type>substatementsOfType(leafs.next(), Type.class)).getTypeRef().getType());
    Assert.assertSame(typeDef, IterableExtensions.head(this._yangExtensions.<Type>substatementsOfType(leafs.next(), Type.class)).getTypeRef().getType());
  }
  
  @Test
  public void testTypeLinking_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("namespace \"foo:bar\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prefix x;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("range \"1..40 | 60..100\";");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typedef foo2 {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("type foo {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("range \"4..20\";");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typedef foo3 {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("type foo2 {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("range \"5..15\";");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    this.validator.assertNoErrors(this.root(m));
  }
  
  @Test
  public void testNestTypeLinking_02() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("namespace \"foo:bar\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prefix x;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping bar {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("typedef foo2 {");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("type foo {");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("range \"4..20\";");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("leaf x {");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("type foo2;");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping bar2 {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("typedef foo2 {");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("type foo {");
    _builder.newLine();
    _builder.append("\t     ");
    _builder.append("range \"4..20\";");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("leaf x {");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("type foo2;");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typedef foo {");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("type int32 {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("range \"1..40 | 60..100\";");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    this.validator.assertNoErrors(this.root(m));
  }
  
  @Test
  public void testNestTypeLinking_03() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("module foo {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("yang-version 1.1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("namespace \"foo:bar\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prefix x;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("grouping G_one {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("typedef local_1 { type int32; units meters; default 0; }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("uses G_two;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("leaf test_leaf { type local_1; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("grouping G_two {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("typedef local_1 { type string; default fred; }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container G_ddd {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("leaf test_leaf2 { type local_1; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final Resource m = this.load(_builder);
    this.validator.assertNoErrors(this.root(m));
  }
}
