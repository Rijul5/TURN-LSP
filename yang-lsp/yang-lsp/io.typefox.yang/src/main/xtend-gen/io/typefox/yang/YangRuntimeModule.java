/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package io.typefox.yang;

import com.google.inject.Binder;
import com.google.inject.Provider;
import io.typefox.yang.AbstractYangRuntimeModule;
import io.typefox.yang.YangValueConverterService;
import io.typefox.yang.documentation.DocumentationProvider;
import io.typefox.yang.formatting2.YangIndentationInformation;
import io.typefox.yang.formatting2.YangTextRegionAccessBuilder;
import io.typefox.yang.resource.YangCrossReferenceSerializer;
import io.typefox.yang.resource.YangResource;
import io.typefox.yang.resource.YangSerializer;
import io.typefox.yang.resource.YangTokenUtil;
import io.typefox.yang.scoping.QualifiedNameConverter;
import io.typefox.yang.scoping.ResourceDescriptionStrategy;
import io.typefox.yang.scoping.YangResourceDescriptionManager;
import io.typefox.yang.scoping.YangSerializerScopeProvider;
import io.typefox.yang.settings.PreferenceValuesProvider;
import io.typefox.yang.validation.IssueCodes;
import io.typefox.yang.validation.LinkingErrorMessageProvider;
import io.typefox.yang.validation.ResourceValidator;
import io.typefox.yang.validation.YangIssueSeverityProvider;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.documentation.IEObjectDocumentationProvider;
import org.eclipse.xtext.formatting.IIndentationInformation;
import org.eclipse.xtext.formatting2.FormatterRequest;
import org.eclipse.xtext.formatting2.regionaccess.TextRegionAccessBuilder;
import org.eclipse.xtext.linking.impl.LinkingDiagnosticMessageProvider;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.parsetree.reconstr.impl.TokenUtil;
import org.eclipse.xtext.preferences.IPreferenceValuesProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.impl.DefaultResourceDescriptionManager;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.serializer.tokens.CrossReferenceSerializer;
import org.eclipse.xtext.serializer.tokens.SerializerScopeProviderBinding;
import org.eclipse.xtext.util.ExceptionAcceptor;
import org.eclipse.xtext.validation.ConfigurableIssueCodesProvider;
import org.eclipse.xtext.validation.IssueSeveritiesProvider;
import org.eclipse.xtext.validation.ResourceValidatorImpl;
import org.eclipse.xtext.workspace.IProjectConfigProvider;
import org.eclipse.xtext.workspace.ProjectConfigProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class YangRuntimeModule extends AbstractYangRuntimeModule {
  @Override
  public void configure(final Binder binder) {
    super.configure(binder);
    final Provider<FormatterRequest> _function = () -> {
      FormatterRequest _formatterRequest = new FormatterRequest();
      return _formatterRequest.setExceptionHandler(ExceptionAcceptor.THROWING);
    };
    binder.<FormatterRequest>bind(FormatterRequest.class).toProvider(_function);
  }
  
  public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
    return ResourceDescriptionStrategy.class;
  }
  
  @Override
  public Class<? extends XtextResource> bindXtextResource() {
    return YangResource.class;
  }
  
  @Override
  public Class<? extends ConfigurableIssueCodesProvider> bindConfigurableIssueCodesProvider() {
    return IssueCodes.class;
  }
  
  public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
    return QualifiedNameConverter.class;
  }
  
  @Override
  public Class<? extends IValueConverterService> bindIValueConverterService() {
    return YangValueConverterService.class;
  }
  
  public Class<? extends ResourceValidatorImpl> bindResourceValidatorImpl() {
    return ResourceValidator.class;
  }
  
  public Class<? extends IEObjectDocumentationProvider> bindIEObjectDocumentationProvider() {
    return DocumentationProvider.class;
  }
  
  public Class<? extends IIndentationInformation> bindIIndentationInformation() {
    return YangIndentationInformation.class;
  }
  
  public Class<? extends IProjectConfigProvider> bindProjectConfigPRovider() {
    return ProjectConfigProvider.class;
  }
  
  public Class<? extends IPreferenceValuesProvider> bindIPreferenceValuProvider() {
    return PreferenceValuesProvider.class;
  }
  
  public Class<? extends TextRegionAccessBuilder> bindTextRegionAccessBuilder() {
    return YangTextRegionAccessBuilder.class;
  }
  
  public Class<? extends IssueSeveritiesProvider> bindIssueSeveritiesProvider() {
    return YangIssueSeverityProvider.class;
  }
  
  public Class<? extends LinkingDiagnosticMessageProvider> bindLinkingDiagnosticMessageProvider() {
    return LinkingErrorMessageProvider.class;
  }
  
  public Class<? extends DefaultResourceDescriptionManager> bindDefaultResourceDescriptionManager() {
    return YangResourceDescriptionManager.class;
  }
  
  public Class<? extends CrossReferenceSerializer> bindCrossReferenceSerializer() {
    return YangCrossReferenceSerializer.class;
  }
  
  @Override
  public void configureSerializerIScopeProvider(final Binder binder) {
    binder.<IScopeProvider>bind(IScopeProvider.class).annotatedWith(SerializerScopeProviderBinding.class).to(YangSerializerScopeProvider.class);
  }
  
  @Override
  public Class<? extends ISerializer> bindISerializer() {
    return YangSerializer.class;
  }
  
  public Class<? extends TokenUtil> bindTokenUtil() {
    return YangTokenUtil.class;
  }
}
