/**
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package io.typefox.yang.yang.impl;

import io.typefox.yang.yang.AbbrevAttributeStep;
import io.typefox.yang.yang.AbsolutePath;
import io.typefox.yang.yang.AbstractImport;
import io.typefox.yang.yang.AbstractModule;
import io.typefox.yang.yang.Action;
import io.typefox.yang.yang.Anydata;
import io.typefox.yang.yang.Anyxml;
import io.typefox.yang.yang.Argument;
import io.typefox.yang.yang.Augment;
import io.typefox.yang.yang.Base;
import io.typefox.yang.yang.BelongsTo;
import io.typefox.yang.yang.BinaryOperation;
import io.typefox.yang.yang.BinaryOperator;
import io.typefox.yang.yang.Bit;
import io.typefox.yang.yang.Case;
import io.typefox.yang.yang.Choice;
import io.typefox.yang.yang.Config;
import io.typefox.yang.yang.Contact;
import io.typefox.yang.yang.CurrentRef;
import io.typefox.yang.yang.DataSchemaNode;
import io.typefox.yang.yang.Default;
import io.typefox.yang.yang.DescendantSchemaNodeIdentifierReferences;
import io.typefox.yang.yang.Description;
import io.typefox.yang.yang.Deviate;
import io.typefox.yang.yang.Deviation;
import io.typefox.yang.yang.Enumerable;
import io.typefox.yang.yang.ErrorAppTag;
import io.typefox.yang.yang.ErrorMessage;
import io.typefox.yang.yang.Expression;
import io.typefox.yang.yang.Extension;
import io.typefox.yang.yang.Feature;
import io.typefox.yang.yang.FeatureReference;
import io.typefox.yang.yang.FractionDigits;
import io.typefox.yang.yang.Grouping;
import io.typefox.yang.yang.GroupingRef;
import io.typefox.yang.yang.Identity;
import io.typefox.yang.yang.IfFeature;
import io.typefox.yang.yang.Import;
import io.typefox.yang.yang.Include;
import io.typefox.yang.yang.Input;
import io.typefox.yang.yang.Key;
import io.typefox.yang.yang.KeyReference;
import io.typefox.yang.yang.Leaf;
import io.typefox.yang.yang.LeafList;
import io.typefox.yang.yang.Length;
import io.typefox.yang.yang.List;
import io.typefox.yang.yang.Literal;
import io.typefox.yang.yang.Mandatory;
import io.typefox.yang.yang.Max;
import io.typefox.yang.yang.MaxElements;
import io.typefox.yang.yang.Min;
import io.typefox.yang.yang.MinElements;
import io.typefox.yang.yang.Modifier;
import io.typefox.yang.yang.Module;
import io.typefox.yang.yang.Must;
import io.typefox.yang.yang.Namespace;
import io.typefox.yang.yang.Notification;
import io.typefox.yang.yang.Ordered;
import io.typefox.yang.yang.OrderedBy;
import io.typefox.yang.yang.Organization;
import io.typefox.yang.yang.OtherStatement;
import io.typefox.yang.yang.Output;
import io.typefox.yang.yang.ParentRef;
import io.typefox.yang.yang.Path;
import io.typefox.yang.yang.Pattern;
import io.typefox.yang.yang.Position;
import io.typefox.yang.yang.Prefix;
import io.typefox.yang.yang.Presence;
import io.typefox.yang.yang.ProcessingInstruction;
import io.typefox.yang.yang.Range;
import io.typefox.yang.yang.Reference;
import io.typefox.yang.yang.Refinable;
import io.typefox.yang.yang.Refine;
import io.typefox.yang.yang.RelativePath;
import io.typefox.yang.yang.RequireInstance;
import io.typefox.yang.yang.Revision;
import io.typefox.yang.yang.RevisionDate;
import io.typefox.yang.yang.Rpc;
import io.typefox.yang.yang.SchemaNode;
import io.typefox.yang.yang.SchemaNodeIdentifier;
import io.typefox.yang.yang.Statement;
import io.typefox.yang.yang.Status;
import io.typefox.yang.yang.Submodule;
import io.typefox.yang.yang.Type;
import io.typefox.yang.yang.TypeReference;
import io.typefox.yang.yang.Typedef;
import io.typefox.yang.yang.UnaryOperation;
import io.typefox.yang.yang.Unique;
import io.typefox.yang.yang.Units;
import io.typefox.yang.yang.Unknown;
import io.typefox.yang.yang.UnparsedXpath;
import io.typefox.yang.yang.Uses;
import io.typefox.yang.yang.Value;
import io.typefox.yang.yang.When;
import io.typefox.yang.yang.XpathAdditiveOperation;
import io.typefox.yang.yang.XpathAndOperation;
import io.typefox.yang.yang.XpathEqualityOperation;
import io.typefox.yang.yang.XpathExpression;
import io.typefox.yang.yang.XpathFilter;
import io.typefox.yang.yang.XpathFunctionCall;
import io.typefox.yang.yang.XpathLocation;
import io.typefox.yang.yang.XpathMultiplicativeOperation;
import io.typefox.yang.yang.XpathNameTest;
import io.typefox.yang.yang.XpathNodeTest;
import io.typefox.yang.yang.XpathNodeType;
import io.typefox.yang.yang.XpathNumberLiteral;
import io.typefox.yang.yang.XpathOrOperation;
import io.typefox.yang.yang.XpathRelationalOperation;
import io.typefox.yang.yang.XpathStep;
import io.typefox.yang.yang.XpathStringLiteral;
import io.typefox.yang.yang.XpathUnaryOperation;
import io.typefox.yang.yang.XpathUnionOperation;
import io.typefox.yang.yang.XpathVariableReference;
import io.typefox.yang.yang.YangFactory;
import io.typefox.yang.yang.YangPackage;
import io.typefox.yang.yang.YangVersion;
import io.typefox.yang.yang.YinElement;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class YangFactoryImpl extends EFactoryImpl implements YangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static YangFactory init()
  {
    try
    {
      YangFactory theYangFactory = (YangFactory)EPackage.Registry.INSTANCE.getEFactory(YangPackage.eNS_URI);
      if (theYangFactory != null)
      {
        return theYangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new YangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case YangPackage.ABSTRACT_MODULE: return createAbstractModule();
      case YangPackage.STATEMENT: return createStatement();
      case YangPackage.ABSTRACT_IMPORT: return createAbstractImport();
      case YangPackage.SCHEMA_NODE: return createSchemaNode();
      case YangPackage.DATA_SCHEMA_NODE: return createDataSchemaNode();
      case YangPackage.OTHER_STATEMENT: return createOtherStatement();
      case YangPackage.ENUMERABLE: return createEnumerable();
      case YangPackage.ORDERED: return createOrdered();
      case YangPackage.REFINABLE: return createRefinable();
      case YangPackage.MODULE: return createModule();
      case YangPackage.YANG_VERSION: return createYangVersion();
      case YangPackage.NAMESPACE: return createNamespace();
      case YangPackage.PREFIX: return createPrefix();
      case YangPackage.IMPORT: return createImport();
      case YangPackage.REVISION_DATE: return createRevisionDate();
      case YangPackage.INCLUDE: return createInclude();
      case YangPackage.ORGANIZATION: return createOrganization();
      case YangPackage.CONTACT: return createContact();
      case YangPackage.REVISION: return createRevision();
      case YangPackage.SUBMODULE: return createSubmodule();
      case YangPackage.BELONGS_TO: return createBelongsTo();
      case YangPackage.TYPEDEF: return createTypedef();
      case YangPackage.UNITS: return createUnits();
      case YangPackage.DEFAULT: return createDefault();
      case YangPackage.TYPE: return createType();
      case YangPackage.TYPE_REFERENCE: return createTypeReference();
      case YangPackage.CONTAINER: return createContainer();
      case YangPackage.MUST: return createMust();
      case YangPackage.ERROR_MESSAGE: return createErrorMessage();
      case YangPackage.ERROR_APP_TAG: return createErrorAppTag();
      case YangPackage.PRESENCE: return createPresence();
      case YangPackage.LEAF: return createLeaf();
      case YangPackage.MANDATORY: return createMandatory();
      case YangPackage.LEAF_LIST: return createLeafList();
      case YangPackage.MIN_ELEMENTS: return createMinElements();
      case YangPackage.MAX_ELEMENTS: return createMaxElements();
      case YangPackage.ORDERED_BY: return createOrderedBy();
      case YangPackage.LIST: return createList();
      case YangPackage.KEY: return createKey();
      case YangPackage.KEY_REFERENCE: return createKeyReference();
      case YangPackage.DESCENDANT_SCHEMA_NODE_IDENTIFIER_REFERENCES: return createDescendantSchemaNodeIdentifierReferences();
      case YangPackage.UNIQUE: return createUnique();
      case YangPackage.CHOICE: return createChoice();
      case YangPackage.CASE: return createCase();
      case YangPackage.ANYDATA: return createAnydata();
      case YangPackage.ANYXML: return createAnyxml();
      case YangPackage.GROUPING: return createGrouping();
      case YangPackage.USES: return createUses();
      case YangPackage.REFINE: return createRefine();
      case YangPackage.RPC: return createRpc();
      case YangPackage.INPUT: return createInput();
      case YangPackage.OUTPUT: return createOutput();
      case YangPackage.ACTION: return createAction();
      case YangPackage.NOTIFICATION: return createNotification();
      case YangPackage.AUGMENT: return createAugment();
      case YangPackage.IDENTITY: return createIdentity();
      case YangPackage.BASE: return createBase();
      case YangPackage.EXTENSION: return createExtension();
      case YangPackage.ARGUMENT: return createArgument();
      case YangPackage.YIN_ELEMENT: return createYinElement();
      case YangPackage.FEATURE: return createFeature();
      case YangPackage.IF_FEATURE: return createIfFeature();
      case YangPackage.EXPRESSION: return createExpression();
      case YangPackage.DEVIATION: return createDeviation();
      case YangPackage.DEVIATE: return createDeviate();
      case YangPackage.CONFIG: return createConfig();
      case YangPackage.STATUS: return createStatus();
      case YangPackage.DESCRIPTION: return createDescription();
      case YangPackage.REFERENCE: return createReference();
      case YangPackage.WHEN: return createWhen();
      case YangPackage.RANGE: return createRange();
      case YangPackage.FRACTION_DIGITS: return createFractionDigits();
      case YangPackage.LENGTH: return createLength();
      case YangPackage.PATTERN: return createPattern();
      case YangPackage.MODIFIER: return createModifier();
      case YangPackage.ENUM: return createEnum();
      case YangPackage.VALUE: return createValue();
      case YangPackage.BIT: return createBit();
      case YangPackage.POSITION: return createPosition();
      case YangPackage.PATH: return createPath();
      case YangPackage.REQUIRE_INSTANCE: return createRequireInstance();
      case YangPackage.UNKNOWN: return createUnknown();
      case YangPackage.SCHEMA_NODE_IDENTIFIER: return createSchemaNodeIdentifier();
      case YangPackage.GROUPING_REF: return createGroupingRef();
      case YangPackage.XPATH_EXPRESSION: return createXpathExpression();
      case YangPackage.XPATH_STEP: return createXpathStep();
      case YangPackage.XPATH_NODE_TEST: return createXpathNodeTest();
      case YangPackage.XPATH_NAME_TEST: return createXpathNameTest();
      case YangPackage.BINARY_OPERATOR: return createBinaryOperator();
      case YangPackage.FEATURE_REFERENCE: return createFeatureReference();
      case YangPackage.UNARY_OPERATION: return createUnaryOperation();
      case YangPackage.BINARY_OPERATION: return createBinaryOperation();
      case YangPackage.LITERAL: return createLiteral();
      case YangPackage.MIN: return createMin();
      case YangPackage.MAX: return createMax();
      case YangPackage.UNPARSED_XPATH: return createUnparsedXpath();
      case YangPackage.XPATH_OR_OPERATION: return createXpathOrOperation();
      case YangPackage.XPATH_AND_OPERATION: return createXpathAndOperation();
      case YangPackage.XPATH_EQUALITY_OPERATION: return createXpathEqualityOperation();
      case YangPackage.XPATH_RELATIONAL_OPERATION: return createXpathRelationalOperation();
      case YangPackage.XPATH_ADDITIVE_OPERATION: return createXpathAdditiveOperation();
      case YangPackage.XPATH_MULTIPLICATIVE_OPERATION: return createXpathMultiplicativeOperation();
      case YangPackage.XPATH_UNARY_OPERATION: return createXpathUnaryOperation();
      case YangPackage.XPATH_UNION_OPERATION: return createXpathUnionOperation();
      case YangPackage.XPATH_LOCATION: return createXpathLocation();
      case YangPackage.XPATH_FILTER: return createXpathFilter();
      case YangPackage.XPATH_VARIABLE_REFERENCE: return createXpathVariableReference();
      case YangPackage.XPATH_STRING_LITERAL: return createXpathStringLiteral();
      case YangPackage.XPATH_NUMBER_LITERAL: return createXpathNumberLiteral();
      case YangPackage.XPATH_FUNCTION_CALL: return createXpathFunctionCall();
      case YangPackage.RELATIVE_PATH: return createRelativePath();
      case YangPackage.ABSOLUTE_PATH: return createAbsolutePath();
      case YangPackage.CURRENT_REF: return createCurrentRef();
      case YangPackage.PARENT_REF: return createParentRef();
      case YangPackage.ABBREV_ATTRIBUTE_STEP: return createAbbrevAttributeStep();
      case YangPackage.XPATH_NODE_TYPE: return createXpathNodeType();
      case YangPackage.PROCESSING_INSTRUCTION: return createProcessingInstruction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractModule createAbstractModule()
  {
    AbstractModuleImpl abstractModule = new AbstractModuleImpl();
    return abstractModule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractImport createAbstractImport()
  {
    AbstractImportImpl abstractImport = new AbstractImportImpl();
    return abstractImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchemaNode createSchemaNode()
  {
    SchemaNodeImpl schemaNode = new SchemaNodeImpl();
    return schemaNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataSchemaNode createDataSchemaNode()
  {
    DataSchemaNodeImpl dataSchemaNode = new DataSchemaNodeImpl();
    return dataSchemaNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OtherStatement createOtherStatement()
  {
    OtherStatementImpl otherStatement = new OtherStatementImpl();
    return otherStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enumerable createEnumerable()
  {
    EnumerableImpl enumerable = new EnumerableImpl();
    return enumerable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ordered createOrdered()
  {
    OrderedImpl ordered = new OrderedImpl();
    return ordered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Refinable createRefinable()
  {
    RefinableImpl refinable = new RefinableImpl();
    return refinable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YangVersion createYangVersion()
  {
    YangVersionImpl yangVersion = new YangVersionImpl();
    return yangVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Namespace createNamespace()
  {
    NamespaceImpl namespace = new NamespaceImpl();
    return namespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prefix createPrefix()
  {
    PrefixImpl prefix = new PrefixImpl();
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RevisionDate createRevisionDate()
  {
    RevisionDateImpl revisionDate = new RevisionDateImpl();
    return revisionDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Organization createOrganization()
  {
    OrganizationImpl organization = new OrganizationImpl();
    return organization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Contact createContact()
  {
    ContactImpl contact = new ContactImpl();
    return contact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Revision createRevision()
  {
    RevisionImpl revision = new RevisionImpl();
    return revision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Submodule createSubmodule()
  {
    SubmoduleImpl submodule = new SubmoduleImpl();
    return submodule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BelongsTo createBelongsTo()
  {
    BelongsToImpl belongsTo = new BelongsToImpl();
    return belongsTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Typedef createTypedef()
  {
    TypedefImpl typedef = new TypedefImpl();
    return typedef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Units createUnits()
  {
    UnitsImpl units = new UnitsImpl();
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Default createDefault()
  {
    DefaultImpl default_ = new DefaultImpl();
    return default_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeReference createTypeReference()
  {
    TypeReferenceImpl typeReference = new TypeReferenceImpl();
    return typeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public io.typefox.yang.yang.Container createContainer()
  {
    ContainerImpl container = new ContainerImpl();
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Must createMust()
  {
    MustImpl must = new MustImpl();
    return must;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ErrorMessage createErrorMessage()
  {
    ErrorMessageImpl errorMessage = new ErrorMessageImpl();
    return errorMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ErrorAppTag createErrorAppTag()
  {
    ErrorAppTagImpl errorAppTag = new ErrorAppTagImpl();
    return errorAppTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Presence createPresence()
  {
    PresenceImpl presence = new PresenceImpl();
    return presence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Leaf createLeaf()
  {
    LeafImpl leaf = new LeafImpl();
    return leaf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mandatory createMandatory()
  {
    MandatoryImpl mandatory = new MandatoryImpl();
    return mandatory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LeafList createLeafList()
  {
    LeafListImpl leafList = new LeafListImpl();
    return leafList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinElements createMinElements()
  {
    MinElementsImpl minElements = new MinElementsImpl();
    return minElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaxElements createMaxElements()
  {
    MaxElementsImpl maxElements = new MaxElementsImpl();
    return maxElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrderedBy createOrderedBy()
  {
    OrderedByImpl orderedBy = new OrderedByImpl();
    return orderedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Key createKey()
  {
    KeyImpl key = new KeyImpl();
    return key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyReference createKeyReference()
  {
    KeyReferenceImpl keyReference = new KeyReferenceImpl();
    return keyReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DescendantSchemaNodeIdentifierReferences createDescendantSchemaNodeIdentifierReferences()
  {
    DescendantSchemaNodeIdentifierReferencesImpl descendantSchemaNodeIdentifierReferences = new DescendantSchemaNodeIdentifierReferencesImpl();
    return descendantSchemaNodeIdentifierReferences;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unique createUnique()
  {
    UniqueImpl unique = new UniqueImpl();
    return unique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choice createChoice()
  {
    ChoiceImpl choice = new ChoiceImpl();
    return choice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case createCase()
  {
    CaseImpl case_ = new CaseImpl();
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Anydata createAnydata()
  {
    AnydataImpl anydata = new AnydataImpl();
    return anydata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Anyxml createAnyxml()
  {
    AnyxmlImpl anyxml = new AnyxmlImpl();
    return anyxml;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Grouping createGrouping()
  {
    GroupingImpl grouping = new GroupingImpl();
    return grouping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Uses createUses()
  {
    UsesImpl uses = new UsesImpl();
    return uses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Refine createRefine()
  {
    RefineImpl refine = new RefineImpl();
    return refine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rpc createRpc()
  {
    RpcImpl rpc = new RpcImpl();
    return rpc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Notification createNotification()
  {
    NotificationImpl notification = new NotificationImpl();
    return notification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Augment createAugment()
  {
    AugmentImpl augment = new AugmentImpl();
    return augment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Identity createIdentity()
  {
    IdentityImpl identity = new IdentityImpl();
    return identity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Base createBase()
  {
    BaseImpl base = new BaseImpl();
    return base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Extension createExtension()
  {
    ExtensionImpl extension = new ExtensionImpl();
    return extension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YinElement createYinElement()
  {
    YinElementImpl yinElement = new YinElementImpl();
    return yinElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfFeature createIfFeature()
  {
    IfFeatureImpl ifFeature = new IfFeatureImpl();
    return ifFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Deviation createDeviation()
  {
    DeviationImpl deviation = new DeviationImpl();
    return deviation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Deviate createDeviate()
  {
    DeviateImpl deviate = new DeviateImpl();
    return deviate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Config createConfig()
  {
    ConfigImpl config = new ConfigImpl();
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Status createStatus()
  {
    StatusImpl status = new StatusImpl();
    return status;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Description createDescription()
  {
    DescriptionImpl description = new DescriptionImpl();
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public When createWhen()
  {
    WhenImpl when = new WhenImpl();
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FractionDigits createFractionDigits()
  {
    FractionDigitsImpl fractionDigits = new FractionDigitsImpl();
    return fractionDigits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Length createLength()
  {
    LengthImpl length = new LengthImpl();
    return length;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Modifier createModifier()
  {
    ModifierImpl modifier = new ModifierImpl();
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public io.typefox.yang.yang.Enum createEnum()
  {
    EnumImpl enum_ = new EnumImpl();
    return enum_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bit createBit()
  {
    BitImpl bit = new BitImpl();
    return bit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Position createPosition()
  {
    PositionImpl position = new PositionImpl();
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequireInstance createRequireInstance()
  {
    RequireInstanceImpl requireInstance = new RequireInstanceImpl();
    return requireInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unknown createUnknown()
  {
    UnknownImpl unknown = new UnknownImpl();
    return unknown;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchemaNodeIdentifier createSchemaNodeIdentifier()
  {
    SchemaNodeIdentifierImpl schemaNodeIdentifier = new SchemaNodeIdentifierImpl();
    return schemaNodeIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupingRef createGroupingRef()
  {
    GroupingRefImpl groupingRef = new GroupingRefImpl();
    return groupingRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathExpression createXpathExpression()
  {
    XpathExpressionImpl xpathExpression = new XpathExpressionImpl();
    return xpathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathStep createXpathStep()
  {
    XpathStepImpl xpathStep = new XpathStepImpl();
    return xpathStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathNodeTest createXpathNodeTest()
  {
    XpathNodeTestImpl xpathNodeTest = new XpathNodeTestImpl();
    return xpathNodeTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathNameTest createXpathNameTest()
  {
    XpathNameTestImpl xpathNameTest = new XpathNameTestImpl();
    return xpathNameTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperator createBinaryOperator()
  {
    BinaryOperatorImpl binaryOperator = new BinaryOperatorImpl();
    return binaryOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureReference createFeatureReference()
  {
    FeatureReferenceImpl featureReference = new FeatureReferenceImpl();
    return featureReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperation createUnaryOperation()
  {
    UnaryOperationImpl unaryOperation = new UnaryOperationImpl();
    return unaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperation createBinaryOperation()
  {
    BinaryOperationImpl binaryOperation = new BinaryOperationImpl();
    return binaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Min createMin()
  {
    MinImpl min = new MinImpl();
    return min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Max createMax()
  {
    MaxImpl max = new MaxImpl();
    return max;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnparsedXpath createUnparsedXpath()
  {
    UnparsedXpathImpl unparsedXpath = new UnparsedXpathImpl();
    return unparsedXpath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathOrOperation createXpathOrOperation()
  {
    XpathOrOperationImpl xpathOrOperation = new XpathOrOperationImpl();
    return xpathOrOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathAndOperation createXpathAndOperation()
  {
    XpathAndOperationImpl xpathAndOperation = new XpathAndOperationImpl();
    return xpathAndOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathEqualityOperation createXpathEqualityOperation()
  {
    XpathEqualityOperationImpl xpathEqualityOperation = new XpathEqualityOperationImpl();
    return xpathEqualityOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathRelationalOperation createXpathRelationalOperation()
  {
    XpathRelationalOperationImpl xpathRelationalOperation = new XpathRelationalOperationImpl();
    return xpathRelationalOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathAdditiveOperation createXpathAdditiveOperation()
  {
    XpathAdditiveOperationImpl xpathAdditiveOperation = new XpathAdditiveOperationImpl();
    return xpathAdditiveOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathMultiplicativeOperation createXpathMultiplicativeOperation()
  {
    XpathMultiplicativeOperationImpl xpathMultiplicativeOperation = new XpathMultiplicativeOperationImpl();
    return xpathMultiplicativeOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathUnaryOperation createXpathUnaryOperation()
  {
    XpathUnaryOperationImpl xpathUnaryOperation = new XpathUnaryOperationImpl();
    return xpathUnaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathUnionOperation createXpathUnionOperation()
  {
    XpathUnionOperationImpl xpathUnionOperation = new XpathUnionOperationImpl();
    return xpathUnionOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathLocation createXpathLocation()
  {
    XpathLocationImpl xpathLocation = new XpathLocationImpl();
    return xpathLocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathFilter createXpathFilter()
  {
    XpathFilterImpl xpathFilter = new XpathFilterImpl();
    return xpathFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathVariableReference createXpathVariableReference()
  {
    XpathVariableReferenceImpl xpathVariableReference = new XpathVariableReferenceImpl();
    return xpathVariableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathStringLiteral createXpathStringLiteral()
  {
    XpathStringLiteralImpl xpathStringLiteral = new XpathStringLiteralImpl();
    return xpathStringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathNumberLiteral createXpathNumberLiteral()
  {
    XpathNumberLiteralImpl xpathNumberLiteral = new XpathNumberLiteralImpl();
    return xpathNumberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathFunctionCall createXpathFunctionCall()
  {
    XpathFunctionCallImpl xpathFunctionCall = new XpathFunctionCallImpl();
    return xpathFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelativePath createRelativePath()
  {
    RelativePathImpl relativePath = new RelativePathImpl();
    return relativePath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbsolutePath createAbsolutePath()
  {
    AbsolutePathImpl absolutePath = new AbsolutePathImpl();
    return absolutePath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CurrentRef createCurrentRef()
  {
    CurrentRefImpl currentRef = new CurrentRefImpl();
    return currentRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParentRef createParentRef()
  {
    ParentRefImpl parentRef = new ParentRefImpl();
    return parentRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbbrevAttributeStep createAbbrevAttributeStep()
  {
    AbbrevAttributeStepImpl abbrevAttributeStep = new AbbrevAttributeStepImpl();
    return abbrevAttributeStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XpathNodeType createXpathNodeType()
  {
    XpathNodeTypeImpl xpathNodeType = new XpathNodeTypeImpl();
    return xpathNodeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessingInstruction createProcessingInstruction()
  {
    ProcessingInstructionImpl processingInstruction = new ProcessingInstructionImpl();
    return processingInstruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YangPackage getYangPackage()
  {
    return (YangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static YangPackage getPackage()
  {
    return YangPackage.eINSTANCE;
  }

} //YangFactoryImpl
