/**
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package io.typefox.yang.yang.util;

import io.typefox.yang.yang.AbbrevAttributeStep;
import io.typefox.yang.yang.AbsolutePath;
import io.typefox.yang.yang.AbstractImport;
import io.typefox.yang.yang.AbstractModule;
import io.typefox.yang.yang.Action;
import io.typefox.yang.yang.Anydata;
import io.typefox.yang.yang.Anyxml;
import io.typefox.yang.yang.Argument;
import io.typefox.yang.yang.Augment;
import io.typefox.yang.yang.Base;
import io.typefox.yang.yang.BelongsTo;
import io.typefox.yang.yang.BinaryOperation;
import io.typefox.yang.yang.BinaryOperator;
import io.typefox.yang.yang.Bit;
import io.typefox.yang.yang.Case;
import io.typefox.yang.yang.Choice;
import io.typefox.yang.yang.Config;
import io.typefox.yang.yang.Contact;
import io.typefox.yang.yang.Container;
import io.typefox.yang.yang.CurrentRef;
import io.typefox.yang.yang.DataSchemaNode;
import io.typefox.yang.yang.Default;
import io.typefox.yang.yang.DescendantSchemaNodeIdentifierReferences;
import io.typefox.yang.yang.Description;
import io.typefox.yang.yang.Deviate;
import io.typefox.yang.yang.Deviation;
import io.typefox.yang.yang.Enumerable;
import io.typefox.yang.yang.ErrorAppTag;
import io.typefox.yang.yang.ErrorMessage;
import io.typefox.yang.yang.Expression;
import io.typefox.yang.yang.Extension;
import io.typefox.yang.yang.Feature;
import io.typefox.yang.yang.FeatureReference;
import io.typefox.yang.yang.FractionDigits;
import io.typefox.yang.yang.Grouping;
import io.typefox.yang.yang.GroupingRef;
import io.typefox.yang.yang.Identity;
import io.typefox.yang.yang.IfFeature;
import io.typefox.yang.yang.Import;
import io.typefox.yang.yang.Include;
import io.typefox.yang.yang.Input;
import io.typefox.yang.yang.Key;
import io.typefox.yang.yang.KeyReference;
import io.typefox.yang.yang.Leaf;
import io.typefox.yang.yang.LeafList;
import io.typefox.yang.yang.Length;
import io.typefox.yang.yang.List;
import io.typefox.yang.yang.Literal;
import io.typefox.yang.yang.Mandatory;
import io.typefox.yang.yang.Max;
import io.typefox.yang.yang.MaxElements;
import io.typefox.yang.yang.Min;
import io.typefox.yang.yang.MinElements;
import io.typefox.yang.yang.Modifier;
import io.typefox.yang.yang.Module;
import io.typefox.yang.yang.Must;
import io.typefox.yang.yang.Namespace;
import io.typefox.yang.yang.Notification;
import io.typefox.yang.yang.Ordered;
import io.typefox.yang.yang.OrderedBy;
import io.typefox.yang.yang.Organization;
import io.typefox.yang.yang.OtherStatement;
import io.typefox.yang.yang.Output;
import io.typefox.yang.yang.ParentRef;
import io.typefox.yang.yang.Path;
import io.typefox.yang.yang.Pattern;
import io.typefox.yang.yang.Position;
import io.typefox.yang.yang.Prefix;
import io.typefox.yang.yang.Presence;
import io.typefox.yang.yang.ProcessingInstruction;
import io.typefox.yang.yang.Range;
import io.typefox.yang.yang.Reference;
import io.typefox.yang.yang.Refinable;
import io.typefox.yang.yang.Refine;
import io.typefox.yang.yang.RelativePath;
import io.typefox.yang.yang.RequireInstance;
import io.typefox.yang.yang.Revision;
import io.typefox.yang.yang.RevisionDate;
import io.typefox.yang.yang.Rpc;
import io.typefox.yang.yang.SchemaNode;
import io.typefox.yang.yang.SchemaNodeIdentifier;
import io.typefox.yang.yang.Statement;
import io.typefox.yang.yang.Status;
import io.typefox.yang.yang.Submodule;
import io.typefox.yang.yang.Type;
import io.typefox.yang.yang.TypeReference;
import io.typefox.yang.yang.Typedef;
import io.typefox.yang.yang.UnaryOperation;
import io.typefox.yang.yang.Unique;
import io.typefox.yang.yang.Units;
import io.typefox.yang.yang.Unknown;
import io.typefox.yang.yang.UnparsedXpath;
import io.typefox.yang.yang.Uses;
import io.typefox.yang.yang.Value;
import io.typefox.yang.yang.When;
import io.typefox.yang.yang.XpathAdditiveOperation;
import io.typefox.yang.yang.XpathAndOperation;
import io.typefox.yang.yang.XpathEqualityOperation;
import io.typefox.yang.yang.XpathExpression;
import io.typefox.yang.yang.XpathFilter;
import io.typefox.yang.yang.XpathFunctionCall;
import io.typefox.yang.yang.XpathLocation;
import io.typefox.yang.yang.XpathMultiplicativeOperation;
import io.typefox.yang.yang.XpathNameTest;
import io.typefox.yang.yang.XpathNodeTest;
import io.typefox.yang.yang.XpathNodeType;
import io.typefox.yang.yang.XpathNumberLiteral;
import io.typefox.yang.yang.XpathOrOperation;
import io.typefox.yang.yang.XpathRelationalOperation;
import io.typefox.yang.yang.XpathStep;
import io.typefox.yang.yang.XpathStringLiteral;
import io.typefox.yang.yang.XpathUnaryOperation;
import io.typefox.yang.yang.XpathUnionOperation;
import io.typefox.yang.yang.XpathVariableReference;
import io.typefox.yang.yang.YangPackage;
import io.typefox.yang.yang.YangVersion;
import io.typefox.yang.yang.YinElement;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see io.typefox.yang.yang.YangPackage
 * @generated
 */
public class YangAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static YangPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YangAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = YangPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected YangSwitch<Adapter> modelSwitch =
    new YangSwitch<Adapter>()
    {
      @Override
      public Adapter caseAbstractModule(AbstractModule object)
      {
        return createAbstractModuleAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseAbstractImport(AbstractImport object)
      {
        return createAbstractImportAdapter();
      }
      @Override
      public Adapter caseSchemaNode(SchemaNode object)
      {
        return createSchemaNodeAdapter();
      }
      @Override
      public Adapter caseDataSchemaNode(DataSchemaNode object)
      {
        return createDataSchemaNodeAdapter();
      }
      @Override
      public Adapter caseOtherStatement(OtherStatement object)
      {
        return createOtherStatementAdapter();
      }
      @Override
      public Adapter caseEnumerable(Enumerable object)
      {
        return createEnumerableAdapter();
      }
      @Override
      public Adapter caseOrdered(Ordered object)
      {
        return createOrderedAdapter();
      }
      @Override
      public Adapter caseRefinable(Refinable object)
      {
        return createRefinableAdapter();
      }
      @Override
      public Adapter caseModule(Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseYangVersion(YangVersion object)
      {
        return createYangVersionAdapter();
      }
      @Override
      public Adapter caseNamespace(Namespace object)
      {
        return createNamespaceAdapter();
      }
      @Override
      public Adapter casePrefix(Prefix object)
      {
        return createPrefixAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseRevisionDate(RevisionDate object)
      {
        return createRevisionDateAdapter();
      }
      @Override
      public Adapter caseInclude(Include object)
      {
        return createIncludeAdapter();
      }
      @Override
      public Adapter caseOrganization(Organization object)
      {
        return createOrganizationAdapter();
      }
      @Override
      public Adapter caseContact(Contact object)
      {
        return createContactAdapter();
      }
      @Override
      public Adapter caseRevision(Revision object)
      {
        return createRevisionAdapter();
      }
      @Override
      public Adapter caseSubmodule(Submodule object)
      {
        return createSubmoduleAdapter();
      }
      @Override
      public Adapter caseBelongsTo(BelongsTo object)
      {
        return createBelongsToAdapter();
      }
      @Override
      public Adapter caseTypedef(Typedef object)
      {
        return createTypedefAdapter();
      }
      @Override
      public Adapter caseUnits(Units object)
      {
        return createUnitsAdapter();
      }
      @Override
      public Adapter caseDefault(Default object)
      {
        return createDefaultAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseTypeReference(TypeReference object)
      {
        return createTypeReferenceAdapter();
      }
      @Override
      public Adapter caseContainer(Container object)
      {
        return createContainerAdapter();
      }
      @Override
      public Adapter caseMust(Must object)
      {
        return createMustAdapter();
      }
      @Override
      public Adapter caseErrorMessage(ErrorMessage object)
      {
        return createErrorMessageAdapter();
      }
      @Override
      public Adapter caseErrorAppTag(ErrorAppTag object)
      {
        return createErrorAppTagAdapter();
      }
      @Override
      public Adapter casePresence(Presence object)
      {
        return createPresenceAdapter();
      }
      @Override
      public Adapter caseLeaf(Leaf object)
      {
        return createLeafAdapter();
      }
      @Override
      public Adapter caseMandatory(Mandatory object)
      {
        return createMandatoryAdapter();
      }
      @Override
      public Adapter caseLeafList(LeafList object)
      {
        return createLeafListAdapter();
      }
      @Override
      public Adapter caseMinElements(MinElements object)
      {
        return createMinElementsAdapter();
      }
      @Override
      public Adapter caseMaxElements(MaxElements object)
      {
        return createMaxElementsAdapter();
      }
      @Override
      public Adapter caseOrderedBy(OrderedBy object)
      {
        return createOrderedByAdapter();
      }
      @Override
      public Adapter caseList(List object)
      {
        return createListAdapter();
      }
      @Override
      public Adapter caseKey(Key object)
      {
        return createKeyAdapter();
      }
      @Override
      public Adapter caseKeyReference(KeyReference object)
      {
        return createKeyReferenceAdapter();
      }
      @Override
      public Adapter caseDescendantSchemaNodeIdentifierReferences(DescendantSchemaNodeIdentifierReferences object)
      {
        return createDescendantSchemaNodeIdentifierReferencesAdapter();
      }
      @Override
      public Adapter caseUnique(Unique object)
      {
        return createUniqueAdapter();
      }
      @Override
      public Adapter caseChoice(Choice object)
      {
        return createChoiceAdapter();
      }
      @Override
      public Adapter caseCase(Case object)
      {
        return createCaseAdapter();
      }
      @Override
      public Adapter caseAnydata(Anydata object)
      {
        return createAnydataAdapter();
      }
      @Override
      public Adapter caseAnyxml(Anyxml object)
      {
        return createAnyxmlAdapter();
      }
      @Override
      public Adapter caseGrouping(Grouping object)
      {
        return createGroupingAdapter();
      }
      @Override
      public Adapter caseUses(Uses object)
      {
        return createUsesAdapter();
      }
      @Override
      public Adapter caseRefine(Refine object)
      {
        return createRefineAdapter();
      }
      @Override
      public Adapter caseRpc(Rpc object)
      {
        return createRpcAdapter();
      }
      @Override
      public Adapter caseInput(Input object)
      {
        return createInputAdapter();
      }
      @Override
      public Adapter caseOutput(Output object)
      {
        return createOutputAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseNotification(Notification object)
      {
        return createNotificationAdapter();
      }
      @Override
      public Adapter caseAugment(Augment object)
      {
        return createAugmentAdapter();
      }
      @Override
      public Adapter caseIdentity(Identity object)
      {
        return createIdentityAdapter();
      }
      @Override
      public Adapter caseBase(Base object)
      {
        return createBaseAdapter();
      }
      @Override
      public Adapter caseExtension(Extension object)
      {
        return createExtensionAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseYinElement(YinElement object)
      {
        return createYinElementAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseIfFeature(IfFeature object)
      {
        return createIfFeatureAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseDeviation(Deviation object)
      {
        return createDeviationAdapter();
      }
      @Override
      public Adapter caseDeviate(Deviate object)
      {
        return createDeviateAdapter();
      }
      @Override
      public Adapter caseConfig(Config object)
      {
        return createConfigAdapter();
      }
      @Override
      public Adapter caseStatus(Status object)
      {
        return createStatusAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseReference(Reference object)
      {
        return createReferenceAdapter();
      }
      @Override
      public Adapter caseWhen(When object)
      {
        return createWhenAdapter();
      }
      @Override
      public Adapter caseRange(Range object)
      {
        return createRangeAdapter();
      }
      @Override
      public Adapter caseFractionDigits(FractionDigits object)
      {
        return createFractionDigitsAdapter();
      }
      @Override
      public Adapter caseLength(Length object)
      {
        return createLengthAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter caseModifier(Modifier object)
      {
        return createModifierAdapter();
      }
      @Override
      public Adapter caseEnum(io.typefox.yang.yang.Enum object)
      {
        return createEnumAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseBit(Bit object)
      {
        return createBitAdapter();
      }
      @Override
      public Adapter casePosition(Position object)
      {
        return createPositionAdapter();
      }
      @Override
      public Adapter casePath(Path object)
      {
        return createPathAdapter();
      }
      @Override
      public Adapter caseRequireInstance(RequireInstance object)
      {
        return createRequireInstanceAdapter();
      }
      @Override
      public Adapter caseUnknown(Unknown object)
      {
        return createUnknownAdapter();
      }
      @Override
      public Adapter caseSchemaNodeIdentifier(SchemaNodeIdentifier object)
      {
        return createSchemaNodeIdentifierAdapter();
      }
      @Override
      public Adapter caseGroupingRef(GroupingRef object)
      {
        return createGroupingRefAdapter();
      }
      @Override
      public Adapter caseXpathExpression(XpathExpression object)
      {
        return createXpathExpressionAdapter();
      }
      @Override
      public Adapter caseXpathStep(XpathStep object)
      {
        return createXpathStepAdapter();
      }
      @Override
      public Adapter caseXpathNodeTest(XpathNodeTest object)
      {
        return createXpathNodeTestAdapter();
      }
      @Override
      public Adapter caseXpathNameTest(XpathNameTest object)
      {
        return createXpathNameTestAdapter();
      }
      @Override
      public Adapter caseBinaryOperator(BinaryOperator object)
      {
        return createBinaryOperatorAdapter();
      }
      @Override
      public Adapter caseFeatureReference(FeatureReference object)
      {
        return createFeatureReferenceAdapter();
      }
      @Override
      public Adapter caseUnaryOperation(UnaryOperation object)
      {
        return createUnaryOperationAdapter();
      }
      @Override
      public Adapter caseBinaryOperation(BinaryOperation object)
      {
        return createBinaryOperationAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseMin(Min object)
      {
        return createMinAdapter();
      }
      @Override
      public Adapter caseMax(Max object)
      {
        return createMaxAdapter();
      }
      @Override
      public Adapter caseUnparsedXpath(UnparsedXpath object)
      {
        return createUnparsedXpathAdapter();
      }
      @Override
      public Adapter caseXpathOrOperation(XpathOrOperation object)
      {
        return createXpathOrOperationAdapter();
      }
      @Override
      public Adapter caseXpathAndOperation(XpathAndOperation object)
      {
        return createXpathAndOperationAdapter();
      }
      @Override
      public Adapter caseXpathEqualityOperation(XpathEqualityOperation object)
      {
        return createXpathEqualityOperationAdapter();
      }
      @Override
      public Adapter caseXpathRelationalOperation(XpathRelationalOperation object)
      {
        return createXpathRelationalOperationAdapter();
      }
      @Override
      public Adapter caseXpathAdditiveOperation(XpathAdditiveOperation object)
      {
        return createXpathAdditiveOperationAdapter();
      }
      @Override
      public Adapter caseXpathMultiplicativeOperation(XpathMultiplicativeOperation object)
      {
        return createXpathMultiplicativeOperationAdapter();
      }
      @Override
      public Adapter caseXpathUnaryOperation(XpathUnaryOperation object)
      {
        return createXpathUnaryOperationAdapter();
      }
      @Override
      public Adapter caseXpathUnionOperation(XpathUnionOperation object)
      {
        return createXpathUnionOperationAdapter();
      }
      @Override
      public Adapter caseXpathLocation(XpathLocation object)
      {
        return createXpathLocationAdapter();
      }
      @Override
      public Adapter caseXpathFilter(XpathFilter object)
      {
        return createXpathFilterAdapter();
      }
      @Override
      public Adapter caseXpathVariableReference(XpathVariableReference object)
      {
        return createXpathVariableReferenceAdapter();
      }
      @Override
      public Adapter caseXpathStringLiteral(XpathStringLiteral object)
      {
        return createXpathStringLiteralAdapter();
      }
      @Override
      public Adapter caseXpathNumberLiteral(XpathNumberLiteral object)
      {
        return createXpathNumberLiteralAdapter();
      }
      @Override
      public Adapter caseXpathFunctionCall(XpathFunctionCall object)
      {
        return createXpathFunctionCallAdapter();
      }
      @Override
      public Adapter caseRelativePath(RelativePath object)
      {
        return createRelativePathAdapter();
      }
      @Override
      public Adapter caseAbsolutePath(AbsolutePath object)
      {
        return createAbsolutePathAdapter();
      }
      @Override
      public Adapter caseCurrentRef(CurrentRef object)
      {
        return createCurrentRefAdapter();
      }
      @Override
      public Adapter caseParentRef(ParentRef object)
      {
        return createParentRefAdapter();
      }
      @Override
      public Adapter caseAbbrevAttributeStep(AbbrevAttributeStep object)
      {
        return createAbbrevAttributeStepAdapter();
      }
      @Override
      public Adapter caseXpathNodeType(XpathNodeType object)
      {
        return createXpathNodeTypeAdapter();
      }
      @Override
      public Adapter caseProcessingInstruction(ProcessingInstruction object)
      {
        return createProcessingInstructionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.AbstractModule <em>Abstract Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.AbstractModule
   * @generated
   */
  public Adapter createAbstractModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.AbstractImport <em>Abstract Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.AbstractImport
   * @generated
   */
  public Adapter createAbstractImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.SchemaNode <em>Schema Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.SchemaNode
   * @generated
   */
  public Adapter createSchemaNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.DataSchemaNode <em>Data Schema Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.DataSchemaNode
   * @generated
   */
  public Adapter createDataSchemaNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.OtherStatement <em>Other Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.OtherStatement
   * @generated
   */
  public Adapter createOtherStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Enumerable <em>Enumerable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Enumerable
   * @generated
   */
  public Adapter createEnumerableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Ordered <em>Ordered</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Ordered
   * @generated
   */
  public Adapter createOrderedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Refinable <em>Refinable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Refinable
   * @generated
   */
  public Adapter createRefinableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.YangVersion <em>Version</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.YangVersion
   * @generated
   */
  public Adapter createYangVersionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Namespace <em>Namespace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Namespace
   * @generated
   */
  public Adapter createNamespaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Prefix <em>Prefix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Prefix
   * @generated
   */
  public Adapter createPrefixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.RevisionDate <em>Revision Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.RevisionDate
   * @generated
   */
  public Adapter createRevisionDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Include <em>Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Include
   * @generated
   */
  public Adapter createIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Organization <em>Organization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Organization
   * @generated
   */
  public Adapter createOrganizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Contact <em>Contact</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Contact
   * @generated
   */
  public Adapter createContactAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Revision <em>Revision</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Revision
   * @generated
   */
  public Adapter createRevisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Submodule <em>Submodule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Submodule
   * @generated
   */
  public Adapter createSubmoduleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.BelongsTo <em>Belongs To</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.BelongsTo
   * @generated
   */
  public Adapter createBelongsToAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Typedef <em>Typedef</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Typedef
   * @generated
   */
  public Adapter createTypedefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Units <em>Units</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Units
   * @generated
   */
  public Adapter createUnitsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Default <em>Default</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Default
   * @generated
   */
  public Adapter createDefaultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.TypeReference <em>Type Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.TypeReference
   * @generated
   */
  public Adapter createTypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Container <em>Container</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Container
   * @generated
   */
  public Adapter createContainerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Must <em>Must</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Must
   * @generated
   */
  public Adapter createMustAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.ErrorMessage <em>Error Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.ErrorMessage
   * @generated
   */
  public Adapter createErrorMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.ErrorAppTag <em>Error App Tag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.ErrorAppTag
   * @generated
   */
  public Adapter createErrorAppTagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Presence <em>Presence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Presence
   * @generated
   */
  public Adapter createPresenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Leaf <em>Leaf</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Leaf
   * @generated
   */
  public Adapter createLeafAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Mandatory <em>Mandatory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Mandatory
   * @generated
   */
  public Adapter createMandatoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.LeafList <em>Leaf List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.LeafList
   * @generated
   */
  public Adapter createLeafListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.MinElements <em>Min Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.MinElements
   * @generated
   */
  public Adapter createMinElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.MaxElements <em>Max Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.MaxElements
   * @generated
   */
  public Adapter createMaxElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.OrderedBy <em>Ordered By</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.OrderedBy
   * @generated
   */
  public Adapter createOrderedByAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.List <em>List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.List
   * @generated
   */
  public Adapter createListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Key <em>Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Key
   * @generated
   */
  public Adapter createKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.KeyReference <em>Key Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.KeyReference
   * @generated
   */
  public Adapter createKeyReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.DescendantSchemaNodeIdentifierReferences <em>Descendant Schema Node Identifier References</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.DescendantSchemaNodeIdentifierReferences
   * @generated
   */
  public Adapter createDescendantSchemaNodeIdentifierReferencesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Unique <em>Unique</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Unique
   * @generated
   */
  public Adapter createUniqueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Choice <em>Choice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Choice
   * @generated
   */
  public Adapter createChoiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Case <em>Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Case
   * @generated
   */
  public Adapter createCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Anydata <em>Anydata</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Anydata
   * @generated
   */
  public Adapter createAnydataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Anyxml <em>Anyxml</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Anyxml
   * @generated
   */
  public Adapter createAnyxmlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Grouping <em>Grouping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Grouping
   * @generated
   */
  public Adapter createGroupingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Uses <em>Uses</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Uses
   * @generated
   */
  public Adapter createUsesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Refine <em>Refine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Refine
   * @generated
   */
  public Adapter createRefineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Rpc <em>Rpc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Rpc
   * @generated
   */
  public Adapter createRpcAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Input <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Input
   * @generated
   */
  public Adapter createInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Output
   * @generated
   */
  public Adapter createOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Notification <em>Notification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Notification
   * @generated
   */
  public Adapter createNotificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Augment <em>Augment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Augment
   * @generated
   */
  public Adapter createAugmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Identity <em>Identity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Identity
   * @generated
   */
  public Adapter createIdentityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Base <em>Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Base
   * @generated
   */
  public Adapter createBaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Extension <em>Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Extension
   * @generated
   */
  public Adapter createExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.YinElement <em>Yin Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.YinElement
   * @generated
   */
  public Adapter createYinElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.IfFeature <em>If Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.IfFeature
   * @generated
   */
  public Adapter createIfFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Deviation <em>Deviation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Deviation
   * @generated
   */
  public Adapter createDeviationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Deviate <em>Deviate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Deviate
   * @generated
   */
  public Adapter createDeviateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Config <em>Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Config
   * @generated
   */
  public Adapter createConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Status <em>Status</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Status
   * @generated
   */
  public Adapter createStatusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Reference
   * @generated
   */
  public Adapter createReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.When <em>When</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.When
   * @generated
   */
  public Adapter createWhenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Range <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Range
   * @generated
   */
  public Adapter createRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.FractionDigits <em>Fraction Digits</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.FractionDigits
   * @generated
   */
  public Adapter createFractionDigitsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Length <em>Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Length
   * @generated
   */
  public Adapter createLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Modifier <em>Modifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Modifier
   * @generated
   */
  public Adapter createModifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Enum <em>Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Enum
   * @generated
   */
  public Adapter createEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Bit <em>Bit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Bit
   * @generated
   */
  public Adapter createBitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Position <em>Position</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Position
   * @generated
   */
  public Adapter createPositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Path <em>Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Path
   * @generated
   */
  public Adapter createPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.RequireInstance <em>Require Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.RequireInstance
   * @generated
   */
  public Adapter createRequireInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Unknown <em>Unknown</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Unknown
   * @generated
   */
  public Adapter createUnknownAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.SchemaNodeIdentifier <em>Schema Node Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.SchemaNodeIdentifier
   * @generated
   */
  public Adapter createSchemaNodeIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.GroupingRef <em>Grouping Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.GroupingRef
   * @generated
   */
  public Adapter createGroupingRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathExpression <em>Xpath Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathExpression
   * @generated
   */
  public Adapter createXpathExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathStep <em>Xpath Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathStep
   * @generated
   */
  public Adapter createXpathStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathNodeTest <em>Xpath Node Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathNodeTest
   * @generated
   */
  public Adapter createXpathNodeTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathNameTest <em>Xpath Name Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathNameTest
   * @generated
   */
  public Adapter createXpathNameTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.BinaryOperator <em>Binary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.BinaryOperator
   * @generated
   */
  public Adapter createBinaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.FeatureReference <em>Feature Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.FeatureReference
   * @generated
   */
  public Adapter createFeatureReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.UnaryOperation <em>Unary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.UnaryOperation
   * @generated
   */
  public Adapter createUnaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.BinaryOperation <em>Binary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.BinaryOperation
   * @generated
   */
  public Adapter createBinaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Min <em>Min</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Min
   * @generated
   */
  public Adapter createMinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.Max <em>Max</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.Max
   * @generated
   */
  public Adapter createMaxAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.UnparsedXpath <em>Unparsed Xpath</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.UnparsedXpath
   * @generated
   */
  public Adapter createUnparsedXpathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathOrOperation <em>Xpath Or Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathOrOperation
   * @generated
   */
  public Adapter createXpathOrOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathAndOperation <em>Xpath And Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathAndOperation
   * @generated
   */
  public Adapter createXpathAndOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathEqualityOperation <em>Xpath Equality Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathEqualityOperation
   * @generated
   */
  public Adapter createXpathEqualityOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathRelationalOperation <em>Xpath Relational Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathRelationalOperation
   * @generated
   */
  public Adapter createXpathRelationalOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathAdditiveOperation <em>Xpath Additive Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathAdditiveOperation
   * @generated
   */
  public Adapter createXpathAdditiveOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathMultiplicativeOperation <em>Xpath Multiplicative Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathMultiplicativeOperation
   * @generated
   */
  public Adapter createXpathMultiplicativeOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathUnaryOperation <em>Xpath Unary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathUnaryOperation
   * @generated
   */
  public Adapter createXpathUnaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathUnionOperation <em>Xpath Union Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathUnionOperation
   * @generated
   */
  public Adapter createXpathUnionOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathLocation <em>Xpath Location</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathLocation
   * @generated
   */
  public Adapter createXpathLocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathFilter <em>Xpath Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathFilter
   * @generated
   */
  public Adapter createXpathFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathVariableReference <em>Xpath Variable Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathVariableReference
   * @generated
   */
  public Adapter createXpathVariableReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathStringLiteral <em>Xpath String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathStringLiteral
   * @generated
   */
  public Adapter createXpathStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathNumberLiteral <em>Xpath Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathNumberLiteral
   * @generated
   */
  public Adapter createXpathNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathFunctionCall <em>Xpath Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathFunctionCall
   * @generated
   */
  public Adapter createXpathFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.RelativePath <em>Relative Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.RelativePath
   * @generated
   */
  public Adapter createRelativePathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.AbsolutePath <em>Absolute Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.AbsolutePath
   * @generated
   */
  public Adapter createAbsolutePathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.CurrentRef <em>Current Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.CurrentRef
   * @generated
   */
  public Adapter createCurrentRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.ParentRef <em>Parent Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.ParentRef
   * @generated
   */
  public Adapter createParentRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.AbbrevAttributeStep <em>Abbrev Attribute Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.AbbrevAttributeStep
   * @generated
   */
  public Adapter createAbbrevAttributeStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.XpathNodeType <em>Xpath Node Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.XpathNodeType
   * @generated
   */
  public Adapter createXpathNodeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.typefox.yang.yang.ProcessingInstruction <em>Processing Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.typefox.yang.yang.ProcessingInstruction
   * @generated
   */
  public Adapter createProcessingInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //YangAdapterFactory
