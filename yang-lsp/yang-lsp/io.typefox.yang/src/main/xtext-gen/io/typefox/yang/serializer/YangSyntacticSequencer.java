/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package io.typefox.yang.serializer;

import com.google.inject.Inject;
import io.typefox.yang.services.YangGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class YangSyntacticSequencer extends AbstractSyntacticSequencer {

	protected YangGrammarAccess grammarAccess;
	protected AbstractElementAlias match_IfFeatureExpression_LeftParenthesisKeyword_2_0_a;
	protected AbstractElementAlias match_IfFeatureExpression_LeftParenthesisKeyword_2_0_p;
	protected AbstractElementAlias match_StatementEnd_SemicolonKeyword_1_or___LeftCurlyBracketKeyword_0_0_RightCurlyBracketKeyword_0_2__;
	protected AbstractElementAlias match_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (YangGrammarAccess) access;
		match_IfFeatureExpression_LeftParenthesisKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getIfFeatureExpressionAccess().getLeftParenthesisKeyword_2_0());
		match_IfFeatureExpression_LeftParenthesisKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getIfFeatureExpressionAccess().getLeftParenthesisKeyword_2_0());
		match_StatementEnd_SemicolonKeyword_1_or___LeftCurlyBracketKeyword_0_0_RightCurlyBracketKeyword_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementEndAccess().getLeftCurlyBracketKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getStatementEndAccess().getRightCurlyBracketKeyword_0_2())), new TokenAlias(false, false, grammarAccess.getStatementEndAccess().getSemicolonKeyword_1()));
		match_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_1_0());
		match_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_IfFeatureExpression_LeftParenthesisKeyword_2_0_a.equals(syntax))
				emit_IfFeatureExpression_LeftParenthesisKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfFeatureExpression_LeftParenthesisKeyword_2_0_p.equals(syntax))
				emit_IfFeatureExpression_LeftParenthesisKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementEnd_SemicolonKeyword_1_or___LeftCurlyBracketKeyword_0_0_RightCurlyBracketKeyword_0_2__.equals(syntax))
				emit_StatementEnd_SemicolonKeyword_1_or___LeftCurlyBracketKeyword_0_0_RightCurlyBracketKeyword_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) feature=[Feature|QNAME]
	 *     (rule start) (ambiguity) operator='not'
	 *     (rule start) (ambiguity) {BinaryOperator.left=}
	 */
	protected void emit_IfFeatureExpression_LeftParenthesisKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {BinaryOperator.left=}
	 */
	protected void emit_IfFeatureExpression_LeftParenthesisKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}') | ';'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'input' (ambiguity) (rule start)
	 *     (rule start) 'output' (ambiguity) (rule start)
	 *     argument=StringValue (ambiguity) (rule end)
	 *     condition=IfFeatureOrExpression (ambiguity) (rule end)
	 *     condition=XpathExpression (ambiguity) (rule end)
	 *     constraint=XpathExpression (ambiguity) (rule end)
	 *     contact=StringValue (ambiguity) (rule end)
	 *     date=[Revision|StringValue] (ambiguity) (rule end)
	 *     defaultStringValue=StringValue (ambiguity) (rule end)
	 *     definition=StringValue (ambiguity) (rule end)
	 *     description=StringValue (ambiguity) (rule end)
	 *     expression=RefinementExpression (ambiguity) (rule end)
	 *     extension=[Extension|EXTENSION_NAME] (ambiguity) (rule end)
	 *     grouping=GroupingRef (ambiguity) (rule end)
	 *     isConfig=StringValue (ambiguity) (rule end)
	 *     isMandatory=StringValue (ambiguity) (rule end)
	 *     isRequireInstance=StringValue (ambiguity) (rule end)
	 *     isYinElement=StringValue (ambiguity) (rule end)
	 *     maxElements=StringValue (ambiguity) (rule end)
	 *     message=StringValue (ambiguity) (rule end)
	 *     minElements=StringValue (ambiguity) (rule end)
	 *     modifier=StringValue (ambiguity) (rule end)
	 *     module=[AbstractModule|StringValue] (ambiguity) (rule end)
	 *     module=[Module|StringValue] (ambiguity) (rule end)
	 *     name=StringValue (ambiguity) (rule end)
	 *     node=SchemaNodeIdentifier (ambiguity) (rule end)
	 *     orderedBy=StringValue (ambiguity) (rule end)
	 *     ordinal=StringValue (ambiguity) (rule end)
	 *     organization=StringValue (ambiguity) (rule end)
	 *     path=SchemaNodeIdentifier (ambiguity) (rule end)
	 *     prefix=StringValue (ambiguity) (rule end)
	 *     range=StringValue (ambiguity) (rule end)
	 *     reference=SchemaNodeIdentifier (ambiguity) (rule end)
	 *     reference=StringValue (ambiguity) (rule end)
	 *     reference=XpathExpression (ambiguity) (rule end)
	 *     reference=[Identity|QNAME] (ambiguity) (rule end)
	 *     references+=DescendantSchemaNodeIdentifier (ambiguity) (rule end)
	 *     references+=KeyReference (ambiguity) (rule end)
	 *     regexp=StringValue (ambiguity) (rule end)
	 *     revision=StringValue (ambiguity) (rule end)
	 *     tag=StringValue (ambiguity) (rule end)
	 *     typeRef=TypeReference (ambiguity) (rule end)
	 *     uri=StringValue (ambiguity) (rule end)
	 *     yangVersion=StringValue (ambiguity) (rule end)
	 */
	protected void emit_StatementEnd_SemicolonKeyword_1_or___LeftCurlyBracketKeyword_0_0_RightCurlyBracketKeyword_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '$' name=QNAME
	 *     (rule start) (ambiguity) '/' (rule start)
	 *     (rule start) (ambiguity) '/' isDescendants?='/'
	 *     (rule start) (ambiguity) '/' step=XpathStep
	 *     (rule start) (ambiguity) '<<<<' text=STRING
	 *     (rule start) (ambiguity) name=QNAME
	 *     (rule start) (ambiguity) operator='-'
	 *     (rule start) (ambiguity) step=XpathStep
	 *     (rule start) (ambiguity) value=NUMBER
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XpathAdditiveOperation.left=}
	 *     (rule start) (ambiguity) {XpathAndOperation.left=}
	 *     (rule start) (ambiguity) {XpathEqualityOperation.left=}
	 *     (rule start) (ambiguity) {XpathFilter.target=}
	 *     (rule start) (ambiguity) {XpathLocation.target=}
	 *     (rule start) (ambiguity) {XpathMultiplicativeOperation.left=}
	 *     (rule start) (ambiguity) {XpathOrOperation.left=}
	 *     (rule start) (ambiguity) {XpathRelationalOperation.left=}
	 *     (rule start) (ambiguity) {XpathUnionOperation.left=}
	 */
	protected void emit_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '<<<<' text=STRING
	 *     (rule start) (ambiguity) operator='-'
	 *     (rule start) (ambiguity) {XpathAdditiveOperation.left=}
	 *     (rule start) (ambiguity) {XpathAndOperation.left=}
	 *     (rule start) (ambiguity) {XpathEqualityOperation.left=}
	 *     (rule start) (ambiguity) {XpathFilter.target=}
	 *     (rule start) (ambiguity) {XpathLocation.target=}
	 *     (rule start) (ambiguity) {XpathMultiplicativeOperation.left=}
	 *     (rule start) (ambiguity) {XpathOrOperation.left=}
	 *     (rule start) (ambiguity) {XpathRelationalOperation.left=}
	 *     (rule start) (ambiguity) {XpathUnionOperation.left=}
	 */
	protected void emit_XpathPrimaryExpr_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
