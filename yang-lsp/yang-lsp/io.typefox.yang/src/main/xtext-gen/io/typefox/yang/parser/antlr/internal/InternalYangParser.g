/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
parser grammar InternalYangParser;

options {
	tokenVocab=InternalYangLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package io.typefox.yang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.typefox.yang.services.YangGrammarAccess;

}

@members {

 	private YangGrammarAccess grammarAccess;

    public InternalYangParser(TokenStream input, YangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AbstractModule";
   	}

   	@Override
   	protected YangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAbstractModule
entryRuleAbstractModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractModuleRule()); }
	iv_ruleAbstractModule=ruleAbstractModule
	{ $current=$iv_ruleAbstractModule.current; }
	EOF;

// Rule AbstractModule
ruleAbstractModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractModuleAccess().getModuleParserRuleCall_0());
		}
		this_Module_0=ruleModule
		{
			$current = $this_Module_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractModuleAccess().getSubmoduleParserRuleCall_1());
		}
		this_Submodule_1=ruleSubmodule
		{
			$current = $this_Submodule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;


// Rule StatementEnd
ruleStatementEnd[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftCurlyBracket
			{
				newLeafNode(otherlv_0, grammarAccess.getStatementEndAccess().getLeftCurlyBracketKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementEndAccess().getSubstatementsStatementParserRuleCall_0_1_0());
					}
					lv_substatements_1_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementEndRule());
						}
						add(
							$current,
							"substatements",
							lv_substatements_1_0,
							"io.typefox.yang.Yang.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_2=RightCurlyBracket
			{
				newLeafNode(otherlv_2, grammarAccess.getStatementEndAccess().getRightCurlyBracketKeyword_0_2());
			}
		)
		    |
		otherlv_3=Semicolon
		{
			newLeafNode(otherlv_3, grammarAccess.getStatementEndAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSchemaNodeParserRuleCall_0());
		}
		this_SchemaNode_0=ruleSchemaNode
		{
			$current = $this_SchemaNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOtherStatementParserRuleCall_1());
		}
		this_OtherStatement_1=ruleOtherStatement
		{
			$current = $this_OtherStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAbstractImport
entryRuleAbstractImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractImportRule()); }
	iv_ruleAbstractImport=ruleAbstractImport
	{ $current=$iv_ruleAbstractImport.current; }
	EOF;

// Rule AbstractImport
ruleAbstractImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractImportAccess().getImportParserRuleCall_0());
		}
		this_Import_0=ruleImport
		{
			$current = $this_Import_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractImportAccess().getIncludeParserRuleCall_1());
		}
		this_Include_1=ruleInclude
		{
			$current = $this_Include_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSchemaNode
entryRuleSchemaNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaNodeRule()); }
	iv_ruleSchemaNode=ruleSchemaNode
	{ $current=$iv_ruleSchemaNode.current; }
	EOF;

// Rule SchemaNode
ruleSchemaNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getDataSchemaNodeParserRuleCall_0());
		}
		this_DataSchemaNode_0=ruleDataSchemaNode
		{
			$current = $this_DataSchemaNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getExtensionParserRuleCall_1());
		}
		this_Extension_1=ruleExtension
		{
			$current = $this_Extension_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getFeatureParserRuleCall_2());
		}
		this_Feature_2=ruleFeature
		{
			$current = $this_Feature_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getGroupingParserRuleCall_3());
		}
		this_Grouping_3=ruleGrouping
		{
			$current = $this_Grouping_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getIdentityParserRuleCall_4());
		}
		this_Identity_4=ruleIdentity
		{
			$current = $this_Identity_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getNotificationParserRuleCall_5());
		}
		this_Notification_5=ruleNotification
		{
			$current = $this_Notification_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getRpcParserRuleCall_6());
		}
		this_Rpc_6=ruleRpc
		{
			$current = $this_Rpc_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getActionParserRuleCall_7());
		}
		this_Action_7=ruleAction
		{
			$current = $this_Action_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getInputParserRuleCall_8());
		}
		this_Input_8=ruleInput
		{
			$current = $this_Input_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getOutputParserRuleCall_9());
		}
		this_Output_9=ruleOutput
		{
			$current = $this_Output_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSchemaNodeAccess().getTypedefParserRuleCall_10());
		}
		this_Typedef_10=ruleTypedef
		{
			$current = $this_Typedef_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataSchemaNode
entryRuleDataSchemaNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataSchemaNodeRule()); }
	iv_ruleDataSchemaNode=ruleDataSchemaNode
	{ $current=$iv_ruleDataSchemaNode.current; }
	EOF;

// Rule DataSchemaNode
ruleDataSchemaNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getAnydataParserRuleCall_0());
		}
		this_Anydata_0=ruleAnydata
		{
			$current = $this_Anydata_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getAnyxmlParserRuleCall_1());
		}
		this_Anyxml_1=ruleAnyxml
		{
			$current = $this_Anyxml_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getContainerParserRuleCall_2());
		}
		this_Container_2=ruleContainer
		{
			$current = $this_Container_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getChoiceParserRuleCall_3());
		}
		this_Choice_3=ruleChoice
		{
			$current = $this_Choice_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getCaseParserRuleCall_4());
		}
		this_Case_4=ruleCase
		{
			$current = $this_Case_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getListParserRuleCall_5());
		}
		this_List_5=ruleList
		{
			$current = $this_List_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getLeafParserRuleCall_6());
		}
		this_Leaf_6=ruleLeaf
		{
			$current = $this_Leaf_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataSchemaNodeAccess().getLeafListParserRuleCall_7());
		}
		this_LeafList_7=ruleLeafList
		{
			$current = $this_LeafList_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOtherStatement
entryRuleOtherStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtherStatementRule()); }
	iv_ruleOtherStatement=ruleOtherStatement
	{ $current=$iv_ruleOtherStatement.current; }
	EOF;

// Rule OtherStatement
ruleOtherStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getAbstractModuleParserRuleCall_0());
		}
		this_AbstractModule_0=ruleAbstractModule
		{
			$current = $this_AbstractModule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getAbstractImportParserRuleCall_1());
		}
		this_AbstractImport_1=ruleAbstractImport
		{
			$current = $this_AbstractImport_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getArgumentParserRuleCall_2());
		}
		this_Argument_2=ruleArgument
		{
			$current = $this_Argument_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getAugmentParserRuleCall_3());
		}
		this_Augment_3=ruleAugment
		{
			$current = $this_Augment_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getBaseParserRuleCall_4());
		}
		this_Base_4=ruleBase
		{
			$current = $this_Base_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getBelongsToParserRuleCall_5());
		}
		this_BelongsTo_5=ruleBelongsTo
		{
			$current = $this_BelongsTo_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getConfigParserRuleCall_6());
		}
		this_Config_6=ruleConfig
		{
			$current = $this_Config_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getContactParserRuleCall_7());
		}
		this_Contact_7=ruleContact
		{
			$current = $this_Contact_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getDefaultParserRuleCall_8());
		}
		this_Default_8=ruleDefault
		{
			$current = $this_Default_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getDescriptionParserRuleCall_9());
		}
		this_Description_9=ruleDescription
		{
			$current = $this_Description_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getEnumerableParserRuleCall_10());
		}
		this_Enumerable_10=ruleEnumerable
		{
			$current = $this_Enumerable_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getErrorAppTagParserRuleCall_11());
		}
		this_ErrorAppTag_11=ruleErrorAppTag
		{
			$current = $this_ErrorAppTag_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getErrorMessageParserRuleCall_12());
		}
		this_ErrorMessage_12=ruleErrorMessage
		{
			$current = $this_ErrorMessage_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getDeviationParserRuleCall_13());
		}
		this_Deviation_13=ruleDeviation
		{
			$current = $this_Deviation_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getDeviateParserRuleCall_14());
		}
		this_Deviate_14=ruleDeviate
		{
			$current = $this_Deviate_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getFractionDigitsParserRuleCall_15());
		}
		this_FractionDigits_15=ruleFractionDigits
		{
			$current = $this_FractionDigits_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getIfFeatureParserRuleCall_16());
		}
		this_IfFeature_16=ruleIfFeature
		{
			$current = $this_IfFeature_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getKeyParserRuleCall_17());
		}
		this_Key_17=ruleKey
		{
			$current = $this_Key_17.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getMandatoryParserRuleCall_18());
		}
		this_Mandatory_18=ruleMandatory
		{
			$current = $this_Mandatory_18.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getMaxElementsParserRuleCall_19());
		}
		this_MaxElements_19=ruleMaxElements
		{
			$current = $this_MaxElements_19.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getMinElementsParserRuleCall_20());
		}
		this_MinElements_20=ruleMinElements
		{
			$current = $this_MinElements_20.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getModifierParserRuleCall_21());
		}
		this_Modifier_21=ruleModifier
		{
			$current = $this_Modifier_21.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getMustParserRuleCall_22());
		}
		this_Must_22=ruleMust
		{
			$current = $this_Must_22.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getNamespaceParserRuleCall_23());
		}
		this_Namespace_23=ruleNamespace
		{
			$current = $this_Namespace_23.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getOrderedParserRuleCall_24());
		}
		this_Ordered_24=ruleOrdered
		{
			$current = $this_Ordered_24.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getOrderedByParserRuleCall_25());
		}
		this_OrderedBy_25=ruleOrderedBy
		{
			$current = $this_OrderedBy_25.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getOrganizationParserRuleCall_26());
		}
		this_Organization_26=ruleOrganization
		{
			$current = $this_Organization_26.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getPathParserRuleCall_27());
		}
		this_Path_27=rulePath
		{
			$current = $this_Path_27.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getPatternParserRuleCall_28());
		}
		this_Pattern_28=rulePattern
		{
			$current = $this_Pattern_28.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getPrefixParserRuleCall_29());
		}
		this_Prefix_29=rulePrefix
		{
			$current = $this_Prefix_29.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getPresenceParserRuleCall_30());
		}
		this_Presence_30=rulePresence
		{
			$current = $this_Presence_30.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getReferenceParserRuleCall_31());
		}
		this_Reference_31=ruleReference
		{
			$current = $this_Reference_31.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getRefineParserRuleCall_32());
		}
		this_Refine_32=ruleRefine
		{
			$current = $this_Refine_32.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getRefinableParserRuleCall_33());
		}
		this_Refinable_33=ruleRefinable
		{
			$current = $this_Refinable_33.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getRequireInstanceParserRuleCall_34());
		}
		this_RequireInstance_34=ruleRequireInstance
		{
			$current = $this_RequireInstance_34.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getRevisionParserRuleCall_35());
		}
		this_Revision_35=ruleRevision
		{
			$current = $this_Revision_35.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getRevisionDateParserRuleCall_36());
		}
		this_RevisionDate_36=ruleRevisionDate
		{
			$current = $this_RevisionDate_36.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getStatusParserRuleCall_37());
		}
		this_Status_37=ruleStatus
		{
			$current = $this_Status_37.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getTypeParserRuleCall_38());
		}
		this_Type_38=ruleType
		{
			$current = $this_Type_38.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getUniqueParserRuleCall_39());
		}
		this_Unique_39=ruleUnique
		{
			$current = $this_Unique_39.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getUnitsParserRuleCall_40());
		}
		this_Units_40=ruleUnits
		{
			$current = $this_Units_40.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getUnknownParserRuleCall_41());
		}
		this_Unknown_41=ruleUnknown
		{
			$current = $this_Unknown_41.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getUsesParserRuleCall_42());
		}
		this_Uses_42=ruleUses
		{
			$current = $this_Uses_42.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getWhenParserRuleCall_43());
		}
		this_When_43=ruleWhen
		{
			$current = $this_When_43.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getYangVersionParserRuleCall_44());
		}
		this_YangVersion_44=ruleYangVersion
		{
			$current = $this_YangVersion_44.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOtherStatementAccess().getYinElementParserRuleCall_45());
		}
		this_YinElement_45=ruleYinElement
		{
			$current = $this_YinElement_45.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnumerable
entryRuleEnumerable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerableRule()); }
	iv_ruleEnumerable=ruleEnumerable
	{ $current=$iv_ruleEnumerable.current; }
	EOF;

// Rule Enumerable
ruleEnumerable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnumerableAccess().getEnumParserRuleCall_0());
		}
		this_Enum_0=ruleEnum
		{
			$current = $this_Enum_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnumerableAccess().getBitParserRuleCall_1());
		}
		this_Bit_1=ruleBit
		{
			$current = $this_Bit_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOrdered
entryRuleOrdered returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderedRule()); }
	iv_ruleOrdered=ruleOrdered
	{ $current=$iv_ruleOrdered.current; }
	EOF;

// Rule Ordered
ruleOrdered returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrderedAccess().getPositionParserRuleCall_0());
		}
		this_Position_0=rulePosition
		{
			$current = $this_Position_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOrderedAccess().getValueParserRuleCall_1());
		}
		this_Value_1=ruleValue
		{
			$current = $this_Value_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRefinable
entryRuleRefinable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefinableRule()); }
	iv_ruleRefinable=ruleRefinable
	{ $current=$iv_ruleRefinable.current; }
	EOF;

// Rule Refinable
ruleRefinable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRefinableAccess().getRangeParserRuleCall_0());
		}
		this_Range_0=ruleRange
		{
			$current = $this_Range_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRefinableAccess().getLengthParserRuleCall_1());
		}
		this_Length_1=ruleLength
		{
			$current = $this_Length_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Module
		{
			newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getModuleRule());
			}
			newCompositeNode(grammarAccess.getModuleAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYangVersion
entryRuleYangVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYangVersionRule()); }
	iv_ruleYangVersion=ruleYangVersion
	{ $current=$iv_ruleYangVersion.current; }
	EOF;

// Rule YangVersion
ruleYangVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=YangVersion
		{
			newLeafNode(otherlv_0, grammarAccess.getYangVersionAccess().getYangVersionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYangVersionAccess().getYangVersionStringValueParserRuleCall_1_0());
				}
				lv_yangVersion_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYangVersionRule());
					}
					set(
						$current,
						"yangVersion",
						lv_yangVersion_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getYangVersionRule());
			}
			newCompositeNode(grammarAccess.getYangVersionAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	iv_ruleNamespace=ruleNamespace
	{ $current=$iv_ruleNamespace.current; }
	EOF;

// Rule Namespace
ruleNamespace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Namespace
		{
			newLeafNode(otherlv_0, grammarAccess.getNamespaceAccess().getNamespaceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamespaceAccess().getUriStringValueParserRuleCall_1_0());
				}
				lv_uri_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamespaceRule());
					}
					set(
						$current,
						"uri",
						lv_uri_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getNamespaceRule());
			}
			newCompositeNode(grammarAccess.getNamespaceAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	iv_rulePrefix=rulePrefix
	{ $current=$iv_rulePrefix.current; }
	EOF;

// Rule Prefix
rulePrefix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Prefix
		{
			newLeafNode(otherlv_0, grammarAccess.getPrefixAccess().getPrefixKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrefixAccess().getPrefixStringValueParserRuleCall_1_0());
				}
				lv_prefix_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrefixRule());
					}
					set(
						$current,
						"prefix",
						lv_prefix_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getPrefixRule());
			}
			newCompositeNode(grammarAccess.getPrefixAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Import
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getImportAccess().getModuleAbstractModuleCrossReference_1_0());
				}
				ruleStringValue
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getImportRule());
			}
			newCompositeNode(grammarAccess.getImportAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRevisionDate
entryRuleRevisionDate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRevisionDateRule()); }
	iv_ruleRevisionDate=ruleRevisionDate
	{ $current=$iv_ruleRevisionDate.current; }
	EOF;

// Rule RevisionDate
ruleRevisionDate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=RevisionDate
		{
			newLeafNode(otherlv_0, grammarAccess.getRevisionDateAccess().getRevisionDateKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRevisionDateRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRevisionDateAccess().getDateRevisionCrossReference_1_0());
				}
				ruleStringValue
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRevisionDateRule());
			}
			newCompositeNode(grammarAccess.getRevisionDateAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current; }
	EOF;

// Rule Include
ruleInclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Include
		{
			newLeafNode(otherlv_0, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIncludeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIncludeAccess().getModuleAbstractModuleCrossReference_1_0());
				}
				ruleStringValue
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getIncludeRule());
			}
			newCompositeNode(grammarAccess.getIncludeAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOrganization
entryRuleOrganization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrganizationRule()); }
	iv_ruleOrganization=ruleOrganization
	{ $current=$iv_ruleOrganization.current; }
	EOF;

// Rule Organization
ruleOrganization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Organization
		{
			newLeafNode(otherlv_0, grammarAccess.getOrganizationAccess().getOrganizationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrganizationAccess().getOrganizationStringValueParserRuleCall_1_0());
				}
				lv_organization_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrganizationRule());
					}
					set(
						$current,
						"organization",
						lv_organization_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getOrganizationRule());
			}
			newCompositeNode(grammarAccess.getOrganizationAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContact
entryRuleContact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContactRule()); }
	iv_ruleContact=ruleContact
	{ $current=$iv_ruleContact.current; }
	EOF;

// Rule Contact
ruleContact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Contact
		{
			newLeafNode(otherlv_0, grammarAccess.getContactAccess().getContactKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContactAccess().getContactStringValueParserRuleCall_1_0());
				}
				lv_contact_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactRule());
					}
					set(
						$current,
						"contact",
						lv_contact_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getContactRule());
			}
			newCompositeNode(grammarAccess.getContactAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRevision
entryRuleRevision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRevisionRule()); }
	iv_ruleRevision=ruleRevision
	{ $current=$iv_ruleRevision.current; }
	EOF;

// Rule Revision
ruleRevision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Revision
		{
			newLeafNode(otherlv_0, grammarAccess.getRevisionAccess().getRevisionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRevisionAccess().getRevisionStringValueParserRuleCall_1_0());
				}
				lv_revision_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRevisionRule());
					}
					set(
						$current,
						"revision",
						lv_revision_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRevisionRule());
			}
			newCompositeNode(grammarAccess.getRevisionAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSubmodule
entryRuleSubmodule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubmoduleRule()); }
	iv_ruleSubmodule=ruleSubmodule
	{ $current=$iv_ruleSubmodule.current; }
	EOF;

// Rule Submodule
ruleSubmodule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Submodule
		{
			newLeafNode(otherlv_0, grammarAccess.getSubmoduleAccess().getSubmoduleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubmoduleAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubmoduleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getSubmoduleRule());
			}
			newCompositeNode(grammarAccess.getSubmoduleAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBelongsTo
entryRuleBelongsTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBelongsToRule()); }
	iv_ruleBelongsTo=ruleBelongsTo
	{ $current=$iv_ruleBelongsTo.current; }
	EOF;

// Rule BelongsTo
ruleBelongsTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=BelongsTo
		{
			newLeafNode(otherlv_0, grammarAccess.getBelongsToAccess().getBelongsToKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBelongsToRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBelongsToAccess().getModuleModuleCrossReference_1_0());
				}
				ruleStringValue
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getBelongsToRule());
			}
			newCompositeNode(grammarAccess.getBelongsToAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypedef
entryRuleTypedef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedefRule()); }
	iv_ruleTypedef=ruleTypedef
	{ $current=$iv_ruleTypedef.current; }
	EOF;

// Rule Typedef
ruleTypedef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Typedef
		{
			newLeafNode(otherlv_0, grammarAccess.getTypedefAccess().getTypedefKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedefAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedefRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTypedefRule());
			}
			newCompositeNode(grammarAccess.getTypedefAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnits
entryRuleUnits returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitsRule()); }
	iv_ruleUnits=ruleUnits
	{ $current=$iv_ruleUnits.current; }
	EOF;

// Rule Units
ruleUnits returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Units
		{
			newLeafNode(otherlv_0, grammarAccess.getUnitsAccess().getUnitsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitsAccess().getDefinitionStringValueParserRuleCall_1_0());
				}
				lv_definition_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitsRule());
					}
					set(
						$current,
						"definition",
						lv_definition_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getUnitsRule());
			}
			newCompositeNode(grammarAccess.getUnitsAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefault
entryRuleDefault returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultRule()); }
	iv_ruleDefault=ruleDefault
	{ $current=$iv_ruleDefault.current; }
	EOF;

// Rule Default
ruleDefault returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Default
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultAccess().getDefaultKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultAccess().getDefaultStringValueStringValueParserRuleCall_1_0());
				}
				lv_defaultStringValue_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultRule());
					}
					set(
						$current,
						"defaultStringValue",
						lv_defaultStringValue_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDefaultRule());
			}
			newCompositeNode(grammarAccess.getDefaultAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Type
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeRefTypeReferenceParserRuleCall_1_0());
				}
				lv_typeRef_1_0=ruleTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_1_0,
						"io.typefox.yang.Yang.TypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTypeRule());
			}
			newCompositeNode(grammarAccess.getTypeAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	iv_ruleTypeReference=ruleTypeReference
	{ $current=$iv_ruleTypeReference.current; }
	EOF;

// Rule TypeReference
ruleTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeReferenceAccess().getBuiltinBUILTIN_TYPEParserRuleCall_0_0());
				}
				lv_builtin_0_0=ruleBUILTIN_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeReferenceRule());
					}
					set(
						$current,
						"builtin",
						lv_builtin_0_0,
						"io.typefox.yang.Yang.BUILTIN_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTypeReferenceAccess().getTypeTypedefCrossReference_1_0());
				}
				ruleQualifiedTypeName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current; }
	EOF;

// Rule Container
ruleContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Container
		{
			newLeafNode(otherlv_0, grammarAccess.getContainerAccess().getContainerKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getContainerRule());
			}
			newCompositeNode(grammarAccess.getContainerAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMust
entryRuleMust returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMustRule()); }
	iv_ruleMust=ruleMust
	{ $current=$iv_ruleMust.current; }
	EOF;

// Rule Must
ruleMust returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Must
		{
			newLeafNode(otherlv_0, grammarAccess.getMustAccess().getMustKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMustAccess().getConstraintXpathExpressionParserRuleCall_1_0());
				}
				lv_constraint_1_0=ruleXpathExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMustRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_1_0,
						"io.typefox.yang.Yang.XpathExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getMustRule());
			}
			newCompositeNode(grammarAccess.getMustAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleErrorMessage
entryRuleErrorMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorMessageRule()); }
	iv_ruleErrorMessage=ruleErrorMessage
	{ $current=$iv_ruleErrorMessage.current; }
	EOF;

// Rule ErrorMessage
ruleErrorMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=ErrorMessage
		{
			newLeafNode(otherlv_0, grammarAccess.getErrorMessageAccess().getErrorMessageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getErrorMessageAccess().getMessageStringValueParserRuleCall_1_0());
				}
				lv_message_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getErrorMessageRule());
					}
					set(
						$current,
						"message",
						lv_message_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getErrorMessageRule());
			}
			newCompositeNode(grammarAccess.getErrorMessageAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleErrorAppTag
entryRuleErrorAppTag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorAppTagRule()); }
	iv_ruleErrorAppTag=ruleErrorAppTag
	{ $current=$iv_ruleErrorAppTag.current; }
	EOF;

// Rule ErrorAppTag
ruleErrorAppTag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=ErrorAppTag
		{
			newLeafNode(otherlv_0, grammarAccess.getErrorAppTagAccess().getErrorAppTagKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getErrorAppTagAccess().getTagStringValueParserRuleCall_1_0());
				}
				lv_tag_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getErrorAppTagRule());
					}
					set(
						$current,
						"tag",
						lv_tag_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getErrorAppTagRule());
			}
			newCompositeNode(grammarAccess.getErrorAppTagAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePresence
entryRulePresence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPresenceRule()); }
	iv_rulePresence=rulePresence
	{ $current=$iv_rulePresence.current; }
	EOF;

// Rule Presence
rulePresence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Presence
		{
			newLeafNode(otherlv_0, grammarAccess.getPresenceAccess().getPresenceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPresenceAccess().getDescriptionStringValueParserRuleCall_1_0());
				}
				lv_description_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPresenceRule());
					}
					set(
						$current,
						"description",
						lv_description_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getPresenceRule());
			}
			newCompositeNode(grammarAccess.getPresenceAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLeaf
entryRuleLeaf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeafRule()); }
	iv_ruleLeaf=ruleLeaf
	{ $current=$iv_ruleLeaf.current; }
	EOF;

// Rule Leaf
ruleLeaf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Leaf
		{
			newLeafNode(otherlv_0, grammarAccess.getLeafAccess().getLeafKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeafAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeafRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getLeafRule());
			}
			newCompositeNode(grammarAccess.getLeafAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMandatory
entryRuleMandatory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMandatoryRule()); }
	iv_ruleMandatory=ruleMandatory
	{ $current=$iv_ruleMandatory.current; }
	EOF;

// Rule Mandatory
ruleMandatory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Mandatory
		{
			newLeafNode(otherlv_0, grammarAccess.getMandatoryAccess().getMandatoryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMandatoryAccess().getIsMandatoryStringValueParserRuleCall_1_0());
				}
				lv_isMandatory_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMandatoryRule());
					}
					set(
						$current,
						"isMandatory",
						lv_isMandatory_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getMandatoryRule());
			}
			newCompositeNode(grammarAccess.getMandatoryAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLeafList
entryRuleLeafList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeafListRule()); }
	iv_ruleLeafList=ruleLeafList
	{ $current=$iv_ruleLeafList.current; }
	EOF;

// Rule LeafList
ruleLeafList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeafList
		{
			newLeafNode(otherlv_0, grammarAccess.getLeafListAccess().getLeafListKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeafListAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeafListRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getLeafListRule());
			}
			newCompositeNode(grammarAccess.getLeafListAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMinElements
entryRuleMinElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinElementsRule()); }
	iv_ruleMinElements=ruleMinElements
	{ $current=$iv_ruleMinElements.current; }
	EOF;

// Rule MinElements
ruleMinElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=MinElements
		{
			newLeafNode(otherlv_0, grammarAccess.getMinElementsAccess().getMinElementsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMinElementsAccess().getMinElementsStringValueParserRuleCall_1_0());
				}
				lv_minElements_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinElementsRule());
					}
					set(
						$current,
						"minElements",
						lv_minElements_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getMinElementsRule());
			}
			newCompositeNode(grammarAccess.getMinElementsAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMaxElements
entryRuleMaxElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxElementsRule()); }
	iv_ruleMaxElements=ruleMaxElements
	{ $current=$iv_ruleMaxElements.current; }
	EOF;

// Rule MaxElements
ruleMaxElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=MaxElements
		{
			newLeafNode(otherlv_0, grammarAccess.getMaxElementsAccess().getMaxElementsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMaxElementsAccess().getMaxElementsStringValueParserRuleCall_1_0());
				}
				lv_maxElements_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMaxElementsRule());
					}
					set(
						$current,
						"maxElements",
						lv_maxElements_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getMaxElementsRule());
			}
			newCompositeNode(grammarAccess.getMaxElementsAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOrderedBy
entryRuleOrderedBy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderedByRule()); }
	iv_ruleOrderedBy=ruleOrderedBy
	{ $current=$iv_ruleOrderedBy.current; }
	EOF;

// Rule OrderedBy
ruleOrderedBy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=OrderedBy
		{
			newLeafNode(otherlv_0, grammarAccess.getOrderedByAccess().getOrderedByKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrderedByAccess().getOrderedByStringValueParserRuleCall_1_0());
				}
				lv_orderedBy_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrderedByRule());
					}
					set(
						$current,
						"orderedBy",
						lv_orderedBy_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getOrderedByRule());
			}
			newCompositeNode(grammarAccess.getOrderedByAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=List
		{
			newLeafNode(otherlv_0, grammarAccess.getListAccess().getListKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getListRule());
			}
			newCompositeNode(grammarAccess.getListAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current; }
	EOF;

// Rule Key
ruleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getKeyAccess().getKeyAction_0(),
					$current);
			}
		)
		otherlv_1=Key
		{
			newLeafNode(otherlv_1, grammarAccess.getKeyAccess().getKeyKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getReferencesKeyReferenceParserRuleCall_2_0());
				}
				lv_references_2_0=ruleKeyReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					add(
						$current,
						"references",
						lv_references_2_0,
						"io.typefox.yang.Yang.KeyReference");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getKeyRule());
			}
			newCompositeNode(grammarAccess.getKeyAccess().getStatementEndParserRuleCall_3());
		}
		this_StatementEnd_3=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKeyReference
entryRuleKeyReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyReferenceRule()); }
	iv_ruleKeyReference=ruleKeyReference
	{ $current=$iv_ruleKeyReference.current; }
	EOF;

// Rule KeyReference
ruleKeyReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getKeyReferenceRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getKeyReferenceAccess().getNodeLeafCrossReference_0());
			}
			ruleQNAME
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;


// Rule DescendantSchemaNodeIdentifierReferences
ruleDescendantSchemaNodeIdentifierReferences[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDescendantSchemaNodeIdentifierReferencesAccess().getReferencesDescendantSchemaNodeIdentifierParserRuleCall_0());
			}
			lv_references_0_0=ruleDescendantSchemaNodeIdentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDescendantSchemaNodeIdentifierReferencesRule());
				}
				add(
					$current,
					"references",
					lv_references_0_0,
					"io.typefox.yang.Yang.DescendantSchemaNodeIdentifier");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleUnique
entryRuleUnique returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniqueRule()); }
	iv_ruleUnique=ruleUnique
	{ $current=$iv_ruleUnique.current; }
	EOF;

// Rule Unique
ruleUnique returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUniqueAccess().getUniqueAction_0(),
					$current);
			}
		)
		otherlv_1=Unique
		{
			newLeafNode(otherlv_1, grammarAccess.getUniqueAccess().getUniqueKeyword_1());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getUniqueRule());
			}
			newCompositeNode(grammarAccess.getUniqueAccess().getDescendantSchemaNodeIdentifierReferencesParserRuleCall_2());
		}
		this_DescendantSchemaNodeIdentifierReferences_2=ruleDescendantSchemaNodeIdentifierReferences[$current]
		{
			$current = $this_DescendantSchemaNodeIdentifierReferences_2.current;
			afterParserOrEnumRuleCall();
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getUniqueRule());
			}
			newCompositeNode(grammarAccess.getUniqueAccess().getStatementEndParserRuleCall_3());
		}
		this_StatementEnd_3=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	iv_ruleChoice=ruleChoice
	{ $current=$iv_ruleChoice.current; }
	EOF;

// Rule Choice
ruleChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Choice
		{
			newLeafNode(otherlv_0, grammarAccess.getChoiceAccess().getChoiceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChoiceAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChoiceRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getChoiceRule());
			}
			newCompositeNode(grammarAccess.getChoiceAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	iv_ruleCase=ruleCase
	{ $current=$iv_ruleCase.current; }
	EOF;

// Rule Case
ruleCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Case
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getCaseRule());
			}
			newCompositeNode(grammarAccess.getCaseAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnydata
entryRuleAnydata returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnydataRule()); }
	iv_ruleAnydata=ruleAnydata
	{ $current=$iv_ruleAnydata.current; }
	EOF;

// Rule Anydata
ruleAnydata returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Anydata
		{
			newLeafNode(otherlv_0, grammarAccess.getAnydataAccess().getAnydataKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnydataAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnydataRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getAnydataRule());
			}
			newCompositeNode(grammarAccess.getAnydataAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnyxml
entryRuleAnyxml returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyxmlRule()); }
	iv_ruleAnyxml=ruleAnyxml
	{ $current=$iv_ruleAnyxml.current; }
	EOF;

// Rule Anyxml
ruleAnyxml returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Anyxml
		{
			newLeafNode(otherlv_0, grammarAccess.getAnyxmlAccess().getAnyxmlKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnyxmlAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnyxmlRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getAnyxmlRule());
			}
			newCompositeNode(grammarAccess.getAnyxmlAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGrouping
entryRuleGrouping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupingRule()); }
	iv_ruleGrouping=ruleGrouping
	{ $current=$iv_ruleGrouping.current; }
	EOF;

// Rule Grouping
ruleGrouping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Grouping
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupingAccess().getGroupingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupingAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupingRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getGroupingRule());
			}
			newCompositeNode(grammarAccess.getGroupingAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUses
entryRuleUses returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsesRule()); }
	iv_ruleUses=ruleUses
	{ $current=$iv_ruleUses.current; }
	EOF;

// Rule Uses
ruleUses returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Uses
		{
			newLeafNode(otherlv_0, grammarAccess.getUsesAccess().getUsesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUsesAccess().getGroupingGroupingRefParserRuleCall_1_0());
				}
				lv_grouping_1_0=ruleGroupingRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUsesRule());
					}
					set(
						$current,
						"grouping",
						lv_grouping_1_0,
						"io.typefox.yang.Yang.GroupingRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getUsesRule());
			}
			newCompositeNode(grammarAccess.getUsesAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRefine
entryRuleRefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefineRule()); }
	iv_ruleRefine=ruleRefine
	{ $current=$iv_ruleRefine.current; }
	EOF;

// Rule Refine
ruleRefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Refine
		{
			newLeafNode(otherlv_0, grammarAccess.getRefineAccess().getRefineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRefineAccess().getNodeSchemaNodeIdentifierParserRuleCall_1_0());
				}
				lv_node_1_0=ruleSchemaNodeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRefineRule());
					}
					set(
						$current,
						"node",
						lv_node_1_0,
						"io.typefox.yang.Yang.SchemaNodeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRefineRule());
			}
			newCompositeNode(grammarAccess.getRefineAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRpc
entryRuleRpc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRpcRule()); }
	iv_ruleRpc=ruleRpc
	{ $current=$iv_ruleRpc.current; }
	EOF;

// Rule Rpc
ruleRpc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Rpc
		{
			newLeafNode(otherlv_0, grammarAccess.getRpcAccess().getRpcKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRpcAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRpcRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRpcRule());
			}
			newCompositeNode(grammarAccess.getRpcAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputAccess().getInputAction_0(),
					$current);
			}
		)
		otherlv_1=Input
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getInputKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getNameStringValueParserRuleCall_2_0());
				}
				lv_name_2_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getInputRule());
			}
			newCompositeNode(grammarAccess.getInputAccess().getStatementEndParserRuleCall_3());
		}
		this_StatementEnd_3=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputAccess().getOutputAction_0(),
					$current);
			}
		)
		otherlv_1=Output
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getOutputKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getNameStringValueParserRuleCall_2_0());
				}
				lv_name_2_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getOutputRule());
			}
			newCompositeNode(grammarAccess.getOutputAccess().getStatementEndParserRuleCall_3());
		}
		this_StatementEnd_3=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Action
		{
			newLeafNode(otherlv_0, grammarAccess.getActionAccess().getActionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getActionRule());
			}
			newCompositeNode(grammarAccess.getActionAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotification
entryRuleNotification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotificationRule()); }
	iv_ruleNotification=ruleNotification
	{ $current=$iv_ruleNotification.current; }
	EOF;

// Rule Notification
ruleNotification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Notification
		{
			newLeafNode(otherlv_0, grammarAccess.getNotificationAccess().getNotificationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotificationAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotificationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getNotificationRule());
			}
			newCompositeNode(grammarAccess.getNotificationAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAugment
entryRuleAugment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAugmentRule()); }
	iv_ruleAugment=ruleAugment
	{ $current=$iv_ruleAugment.current; }
	EOF;

// Rule Augment
ruleAugment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Augment
		{
			newLeafNode(otherlv_0, grammarAccess.getAugmentAccess().getAugmentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAugmentAccess().getPathSchemaNodeIdentifierParserRuleCall_1_0());
				}
				lv_path_1_0=ruleSchemaNodeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAugmentRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"io.typefox.yang.Yang.SchemaNodeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getAugmentRule());
			}
			newCompositeNode(grammarAccess.getAugmentAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIdentity
entryRuleIdentity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentityRule()); }
	iv_ruleIdentity=ruleIdentity
	{ $current=$iv_ruleIdentity.current; }
	EOF;

// Rule Identity
ruleIdentity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Identity
		{
			newLeafNode(otherlv_0, grammarAccess.getIdentityAccess().getIdentityKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIdentityAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdentityRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getIdentityRule());
			}
			newCompositeNode(grammarAccess.getIdentityAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBase
entryRuleBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseRule()); }
	iv_ruleBase=ruleBase
	{ $current=$iv_ruleBase.current; }
	EOF;

// Rule Base
ruleBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Base
		{
			newLeafNode(otherlv_0, grammarAccess.getBaseAccess().getBaseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBaseRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBaseAccess().getReferenceIdentityCrossReference_1_0());
				}
				ruleQNAME
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getBaseRule());
			}
			newCompositeNode(grammarAccess.getBaseAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExtension
entryRuleExtension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionRule()); }
	iv_ruleExtension=ruleExtension
	{ $current=$iv_ruleExtension.current; }
	EOF;

// Rule Extension
ruleExtension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Extension
		{
			newLeafNode(otherlv_0, grammarAccess.getExtensionAccess().getExtensionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getExtensionRule());
			}
			newCompositeNode(grammarAccess.getExtensionAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Argument
		{
			newLeafNode(otherlv_0, grammarAccess.getArgumentAccess().getArgumentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getArgumentRule());
			}
			newCompositeNode(grammarAccess.getArgumentAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleYinElement
entryRuleYinElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYinElementRule()); }
	iv_ruleYinElement=ruleYinElement
	{ $current=$iv_ruleYinElement.current; }
	EOF;

// Rule YinElement
ruleYinElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=YinElement
		{
			newLeafNode(otherlv_0, grammarAccess.getYinElementAccess().getYinElementKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getYinElementAccess().getIsYinElementStringValueParserRuleCall_1_0());
				}
				lv_isYinElement_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getYinElementRule());
					}
					set(
						$current,
						"isYinElement",
						lv_isYinElement_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getYinElementRule());
			}
			newCompositeNode(grammarAccess.getYinElementAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Feature
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureAccess().getFeatureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getFeatureRule());
			}
			newCompositeNode(grammarAccess.getFeatureAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfFeature
entryRuleIfFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfFeatureRule()); }
	iv_ruleIfFeature=ruleIfFeature
	{ $current=$iv_ruleIfFeature.current; }
	EOF;

// Rule IfFeature
ruleIfFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=IfFeature
		{
			newLeafNode(otherlv_0, grammarAccess.getIfFeatureAccess().getIfFeatureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfFeatureAccess().getConditionIfFeatureOrExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleIfFeatureOrExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfFeatureRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"io.typefox.yang.Yang.IfFeatureOrExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getIfFeatureRule());
			}
			newCompositeNode(grammarAccess.getIfFeatureAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfFeatureOrExpression
entryRuleIfFeatureOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfFeatureOrExpressionRule()); }
	iv_ruleIfFeatureOrExpression=ruleIfFeatureOrExpression
	{ $current=$iv_ruleIfFeatureOrExpression.current; }
	EOF;

// Rule IfFeatureOrExpression
ruleIfFeatureOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIfFeatureOrExpressionAccess().getIfFeatureAndExpressionParserRuleCall_0());
		}
		this_IfFeatureAndExpression_0=ruleIfFeatureAndExpression
		{
			$current = $this_IfFeatureAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIfFeatureOrExpressionAccess().getBinaryOperatorLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=Or
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getIfFeatureOrExpressionAccess().getOperatorOrKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIfFeatureOrExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "or");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfFeatureOrExpressionAccess().getRightIfFeatureAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleIfFeatureAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfFeatureOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.IfFeatureAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleIfFeatureAndExpression
entryRuleIfFeatureAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfFeatureAndExpressionRule()); }
	iv_ruleIfFeatureAndExpression=ruleIfFeatureAndExpression
	{ $current=$iv_ruleIfFeatureAndExpression.current; }
	EOF;

// Rule IfFeatureAndExpression
ruleIfFeatureAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIfFeatureAndExpressionAccess().getIfFeatureExpressionParserRuleCall_0());
		}
		this_IfFeatureExpression_0=ruleIfFeatureExpression
		{
			$current = $this_IfFeatureExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIfFeatureAndExpressionAccess().getBinaryOperatorLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=And
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getIfFeatureAndExpressionAccess().getOperatorAndKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIfFeatureAndExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "and");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfFeatureAndExpressionAccess().getRightIfFeatureExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleIfFeatureExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfFeatureAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.IfFeatureExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleIfFeatureExpression
entryRuleIfFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfFeatureExpressionRule()); }
	iv_ruleIfFeatureExpression=ruleIfFeatureExpression
	{ $current=$iv_ruleIfFeatureExpression.current; }
	EOF;

// Rule IfFeatureExpression
ruleIfFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getIfFeatureExpressionAccess().getFeatureReferenceAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIfFeatureExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getIfFeatureExpressionAccess().getFeatureFeatureCrossReference_0_1_0());
					}
					ruleQNAME
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getIfFeatureExpressionAccess().getUnaryOperationAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_3_0=Not
					{
						newLeafNode(lv_operator_3_0, grammarAccess.getIfFeatureExpressionAccess().getOperatorNotKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIfFeatureExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_3_0, "not");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfFeatureExpressionAccess().getTargetIfFeatureExpressionParserRuleCall_1_2_0());
					}
					lv_target_4_0=ruleIfFeatureExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfFeatureExpressionRule());
						}
						set(
							$current,
							"target",
							lv_target_4_0,
							"io.typefox.yang.Yang.IfFeatureExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_5=LeftParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getIfFeatureExpressionAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getIfFeatureExpressionAccess().getIfFeatureOrExpressionParserRuleCall_2_1());
			}
			this_IfFeatureOrExpression_6=ruleIfFeatureOrExpression
			{
				$current = $this_IfFeatureOrExpression_6.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_7=RightParenthesis
			{
				newLeafNode(otherlv_7, grammarAccess.getIfFeatureExpressionAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleDeviation
entryRuleDeviation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviationRule()); }
	iv_ruleDeviation=ruleDeviation
	{ $current=$iv_ruleDeviation.current; }
	EOF;

// Rule Deviation
ruleDeviation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Deviation
		{
			newLeafNode(otherlv_0, grammarAccess.getDeviationAccess().getDeviationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeviationAccess().getReferenceSchemaNodeIdentifierParserRuleCall_1_0());
				}
				lv_reference_1_0=ruleSchemaNodeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeviationRule());
					}
					set(
						$current,
						"reference",
						lv_reference_1_0,
						"io.typefox.yang.Yang.SchemaNodeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDeviationRule());
			}
			newCompositeNode(grammarAccess.getDeviationAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeviate
entryRuleDeviate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviateRule()); }
	iv_ruleDeviate=ruleDeviate
	{ $current=$iv_ruleDeviate.current; }
	EOF;

// Rule Deviate
ruleDeviate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Deviate
		{
			newLeafNode(otherlv_0, grammarAccess.getDeviateAccess().getDeviateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeviateAccess().getArgumentStringValueParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeviateRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDeviateRule());
			}
			newCompositeNode(grammarAccess.getDeviateAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConfig
entryRuleConfig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigRule()); }
	iv_ruleConfig=ruleConfig
	{ $current=$iv_ruleConfig.current; }
	EOF;

// Rule Config
ruleConfig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Config
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigAccess().getConfigKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigAccess().getIsConfigStringValueParserRuleCall_1_0());
				}
				lv_isConfig_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigRule());
					}
					set(
						$current,
						"isConfig",
						lv_isConfig_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getConfigRule());
			}
			newCompositeNode(grammarAccess.getConfigAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatus
entryRuleStatus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatusRule()); }
	iv_ruleStatus=ruleStatus
	{ $current=$iv_ruleStatus.current; }
	EOF;

// Rule Status
ruleStatus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Status
		{
			newLeafNode(otherlv_0, grammarAccess.getStatusAccess().getStatusKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatusAccess().getArgumentStringValueParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatusRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStatusRule());
			}
			newCompositeNode(grammarAccess.getStatusAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Description
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDescriptionAccess().getDescriptionStringValueParserRuleCall_1_0());
				}
				lv_description_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDescriptionRule());
					}
					set(
						$current,
						"description",
						lv_description_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDescriptionRule());
			}
			newCompositeNode(grammarAccess.getDescriptionAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Reference
		{
			newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getReferenceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceAccess().getReferenceStringValueParserRuleCall_1_0());
				}
				lv_reference_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceRule());
					}
					set(
						$current,
						"reference",
						lv_reference_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getReferenceRule());
			}
			newCompositeNode(grammarAccess.getReferenceAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWhen
entryRuleWhen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhenRule()); }
	iv_ruleWhen=ruleWhen
	{ $current=$iv_ruleWhen.current; }
	EOF;

// Rule When
ruleWhen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=When
		{
			newLeafNode(otherlv_0, grammarAccess.getWhenAccess().getWhenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getConditionXpathExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleXpathExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"io.typefox.yang.Yang.XpathExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getWhenRule());
			}
			newCompositeNode(grammarAccess.getWhenAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Range
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getRangeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getExpressionRefinementExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleRefinementExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"io.typefox.yang.Yang.RefinementExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRangeRule());
			}
			newCompositeNode(grammarAccess.getRangeAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRefinementExpression
entryRuleRefinementExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefinementExpressionRule()); }
	iv_ruleRefinementExpression=ruleRefinementExpression
	{ $current=$iv_ruleRefinementExpression.current; }
	EOF;

// Rule RefinementExpression
ruleRefinementExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRefinementExpressionAccess().getRangeRefinementExpressionParserRuleCall_0());
		}
		this_RangeRefinementExpression_0=ruleRangeRefinementExpression
		{
			$current = $this_RangeRefinementExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRefinementExpressionAccess().getBinaryOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=VerticalLine
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getRefinementExpressionAccess().getOperatorVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRefinementExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRefinementExpressionAccess().getRightRangeRefinementExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRangeRefinementExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRefinementExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.RangeRefinementExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRangeRefinementExpression
entryRuleRangeRefinementExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRefinementExpressionRule()); }
	iv_ruleRangeRefinementExpression=ruleRangeRefinementExpression
	{ $current=$iv_ruleRangeRefinementExpression.current; }
	EOF;

// Rule RangeRefinementExpression
ruleRangeRefinementExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRangeRefinementExpressionAccess().getExplicitRefinementExpressionParserRuleCall_0());
		}
		this_ExplicitRefinementExpression_0=ruleExplicitRefinementExpression
		{
			$current = $this_ExplicitRefinementExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRangeRefinementExpressionAccess().getBinaryOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=FullStopFullStop
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getRangeRefinementExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRangeRefinementExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "..");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeRefinementExpressionAccess().getRightExplicitRefinementExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExplicitRefinementExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeRefinementExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.ExplicitRefinementExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExplicitRefinementExpression
entryRuleExplicitRefinementExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExplicitRefinementExpressionRule()); }
	iv_ruleExplicitRefinementExpression=ruleExplicitRefinementExpression
	{ $current=$iv_ruleExplicitRefinementExpression.current; }
	EOF;

// Rule ExplicitRefinementExpression
ruleExplicitRefinementExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExplicitRefinementExpressionAccess().getLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_NUMBER
					{
						newLeafNode(lv_value_1_0, grammarAccess.getExplicitRefinementExpressionAccess().getValueNUMBERTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExplicitRefinementExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"io.typefox.yang.Yang.NUMBER");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExplicitRefinementExpressionAccess().getMinAction_1_0(),
						$current);
				}
			)
			otherlv_3=Min
			{
				newLeafNode(otherlv_3, grammarAccess.getExplicitRefinementExpressionAccess().getMinKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExplicitRefinementExpressionAccess().getMaxAction_2_0(),
						$current);
				}
			)
			otherlv_5=Max
			{
				newLeafNode(otherlv_5, grammarAccess.getExplicitRefinementExpressionAccess().getMaxKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleFractionDigits
entryRuleFractionDigits returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFractionDigitsRule()); }
	iv_ruleFractionDigits=ruleFractionDigits
	{ $current=$iv_ruleFractionDigits.current; }
	EOF;

// Rule FractionDigits
ruleFractionDigits returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FractionDigits
		{
			newLeafNode(otherlv_0, grammarAccess.getFractionDigitsAccess().getFractionDigitsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFractionDigitsAccess().getRangeStringValueParserRuleCall_1_0());
				}
				lv_range_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFractionDigitsRule());
					}
					set(
						$current,
						"range",
						lv_range_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getFractionDigitsRule());
			}
			newCompositeNode(grammarAccess.getFractionDigitsAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLength
entryRuleLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLengthRule()); }
	iv_ruleLength=ruleLength
	{ $current=$iv_ruleLength.current; }
	EOF;

// Rule Length
ruleLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Length
		{
			newLeafNode(otherlv_0, grammarAccess.getLengthAccess().getLengthKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLengthAccess().getExpressionRefinementExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleRefinementExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLengthRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"io.typefox.yang.Yang.RefinementExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getLengthRule());
			}
			newCompositeNode(grammarAccess.getLengthAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Pattern
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getPatternKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getRegexpStringValueParserRuleCall_1_0());
				}
				lv_regexp_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					set(
						$current,
						"regexp",
						lv_regexp_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getPatternRule());
			}
			newCompositeNode(grammarAccess.getPatternAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModifier
entryRuleModifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	iv_ruleModifier=ruleModifier
	{ $current=$iv_ruleModifier.current; }
	EOF;

// Rule Modifier
ruleModifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Modifier
		{
			newLeafNode(otherlv_0, grammarAccess.getModifierAccess().getModifierKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifierAccess().getModifierStringValueParserRuleCall_1_0());
				}
				lv_modifier_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifierRule());
					}
					set(
						$current,
						"modifier",
						lv_modifier_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getModifierRule());
			}
			newCompositeNode(grammarAccess.getModifierAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	iv_ruleEnum=ruleEnum
	{ $current=$iv_ruleEnum.current; }
	EOF;

// Rule Enum
ruleEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Enum
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getEnumRule());
			}
			newCompositeNode(grammarAccess.getEnumAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Value
		{
			newLeafNode(otherlv_0, grammarAccess.getValueAccess().getValueKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getOrdinalStringValueParserRuleCall_1_0());
				}
				lv_ordinal_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"ordinal",
						lv_ordinal_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getValueRule());
			}
			newCompositeNode(grammarAccess.getValueAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBit
entryRuleBit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitRule()); }
	iv_ruleBit=ruleBit
	{ $current=$iv_ruleBit.current; }
	EOF;

// Rule Bit
ruleBit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Bit
		{
			newLeafNode(otherlv_0, grammarAccess.getBitAccess().getBitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBitAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBitRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getBitRule());
			}
			newCompositeNode(grammarAccess.getBitAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePosition
entryRulePosition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositionRule()); }
	iv_rulePosition=rulePosition
	{ $current=$iv_rulePosition.current; }
	EOF;

// Rule Position
rulePosition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Position
		{
			newLeafNode(otherlv_0, grammarAccess.getPositionAccess().getPositionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPositionAccess().getOrdinalStringValueParserRuleCall_1_0());
				}
				lv_ordinal_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositionRule());
					}
					set(
						$current,
						"ordinal",
						lv_ordinal_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getPositionRule());
			}
			newCompositeNode(grammarAccess.getPositionAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePath
entryRulePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current; }
	EOF;

// Rule Path
rulePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Path
		{
			newLeafNode(otherlv_0, grammarAccess.getPathAccess().getPathKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPathAccess().getReferenceXpathExpressionParserRuleCall_1_0());
				}
				lv_reference_1_0=ruleXpathExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPathRule());
					}
					set(
						$current,
						"reference",
						lv_reference_1_0,
						"io.typefox.yang.Yang.XpathExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getPathRule());
			}
			newCompositeNode(grammarAccess.getPathAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRequireInstance
entryRuleRequireInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireInstanceRule()); }
	iv_ruleRequireInstance=ruleRequireInstance
	{ $current=$iv_ruleRequireInstance.current; }
	EOF;

// Rule RequireInstance
ruleRequireInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=RequireInstance
		{
			newLeafNode(otherlv_0, grammarAccess.getRequireInstanceAccess().getRequireInstanceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequireInstanceAccess().getIsRequireInstanceStringValueParserRuleCall_1_0());
				}
				lv_isRequireInstance_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequireInstanceRule());
					}
					set(
						$current,
						"isRequireInstance",
						lv_isRequireInstance_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRequireInstanceRule());
			}
			newCompositeNode(grammarAccess.getRequireInstanceAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnknown
entryRuleUnknown returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnknownRule()); }
	iv_ruleUnknown=ruleUnknown
	{ $current=$iv_ruleUnknown.current; }
	EOF;

// Rule Unknown
ruleUnknown returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnknownRule());
					}
				}
				otherlv_0=RULE_EXTENSION_NAME
				{
					newLeafNode(otherlv_0, grammarAccess.getUnknownAccess().getExtensionExtensionCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnknownAccess().getNameStringValueParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnknownRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"io.typefox.yang.Yang.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getUnknownRule());
			}
			newCompositeNode(grammarAccess.getUnknownAccess().getStatementEndParserRuleCall_2());
		}
		this_StatementEnd_2=ruleStatementEnd[$current]
		{
			$current = $this_StatementEnd_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDescendantSchemaNodeIdentifier
entryRuleDescendantSchemaNodeIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescendantSchemaNodeIdentifierRule()); }
	iv_ruleDescendantSchemaNodeIdentifier=ruleDescendantSchemaNodeIdentifier
	{ $current=$iv_ruleDescendantSchemaNodeIdentifier.current; }
	EOF;

// Rule DescendantSchemaNodeIdentifier
ruleDescendantSchemaNodeIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getDescendantRootSchemaNodeIdentifierParserRuleCall_0());
		}
		this_DescendantRootSchemaNodeIdentifier_0=ruleDescendantRootSchemaNodeIdentifier
		{
			$current = $this_DescendantRootSchemaNodeIdentifier_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeIdentifierTargetAction_1_0(),
						$current);
				}
			)
			otherlv_2=Solidus
			{
				newLeafNode(otherlv_2, grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSolidusKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDescendantSchemaNodeIdentifierRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDescendantSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_2_0());
					}
					ruleQNAME
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDescendantRootSchemaNodeIdentifier
entryRuleDescendantRootSchemaNodeIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescendantRootSchemaNodeIdentifierRule()); }
	iv_ruleDescendantRootSchemaNodeIdentifier=ruleDescendantRootSchemaNodeIdentifier
	{ $current=$iv_ruleDescendantRootSchemaNodeIdentifier.current; }
	EOF;

// Rule DescendantRootSchemaNodeIdentifier
ruleDescendantRootSchemaNodeIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDescendantRootSchemaNodeIdentifierRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getDescendantRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_0());
			}
			ruleQNAME
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSchemaNodeIdentifier
entryRuleSchemaNodeIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaNodeIdentifierRule()); }
	iv_ruleSchemaNodeIdentifier=ruleSchemaNodeIdentifier
	{ $current=$iv_ruleSchemaNodeIdentifier.current; }
	EOF;

// Rule SchemaNodeIdentifier
ruleSchemaNodeIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSchemaNodeIdentifierAccess().getRootSchemaNodeIdentifierParserRuleCall_0());
		}
		this_RootSchemaNodeIdentifier_0=ruleRootSchemaNodeIdentifier
		{
			$current = $this_RootSchemaNodeIdentifier_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeIdentifierTargetAction_1_0(),
						$current);
				}
			)
			otherlv_2=Solidus
			{
				newLeafNode(otherlv_2, grammarAccess.getSchemaNodeIdentifierAccess().getSolidusKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSchemaNodeIdentifierRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_2_0());
					}
					ruleQNAME
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRootSchemaNodeIdentifier
entryRuleRootSchemaNodeIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootSchemaNodeIdentifierRule()); }
	iv_ruleRootSchemaNodeIdentifier=ruleRootSchemaNodeIdentifier
	{ $current=$iv_ruleRootSchemaNodeIdentifier.current; }
	EOF;

// Rule RootSchemaNodeIdentifier
ruleRootSchemaNodeIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isAbsolute_0_0=Solidus
				{
					newLeafNode(lv_isAbsolute_0_0, grammarAccess.getRootSchemaNodeIdentifierAccess().getIsAbsoluteSolidusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRootSchemaNodeIdentifierRule());
					}
					setWithLastConsumed($current, "isAbsolute", true, "/");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRootSchemaNodeIdentifierRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRootSchemaNodeIdentifierAccess().getSchemaNodeSchemaNodeCrossReference_1_0());
				}
				ruleQNAME
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGroupingRef
entryRuleGroupingRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupingRefRule()); }
	iv_ruleGroupingRef=ruleGroupingRef
	{ $current=$iv_ruleGroupingRef.current; }
	EOF;

// Rule GroupingRef
ruleGroupingRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getGroupingRefRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getGroupingRefAccess().getNodeGroupingCrossReference_0());
			}
			ruleQNAME
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleXpathExpression
entryRuleXpathExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathExpressionRule()); }
	iv_ruleXpathExpression=ruleXpathExpression
	{ $current=$iv_ruleXpathExpression.current; }
	EOF;

// Rule XpathExpression
ruleXpathExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathExpressionAccess().getUnparsedXpathAction_0_0(),
						$current);
				}
			)
			otherlv_1=LessThanSignLessThanSignLessThanSignLessThanSign
			{
				newLeafNode(otherlv_1, grammarAccess.getXpathExpressionAccess().getLessThanSignLessThanSignLessThanSignLessThanSignKeyword_0_1());
			}
			(
				(
					lv_text_2_0=RULE_STRING
					{
						newLeafNode(lv_text_2_0, grammarAccess.getXpathExpressionAccess().getTextSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"text",
							lv_text_2_0,
							"io.typefox.yang.Yang.STRING");
					}
				)
			)
			otherlv_3=GreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSign
			{
				newLeafNode(otherlv_3, grammarAccess.getXpathExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_3());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getXpathExpressionAccess().getParsedXpathExpressionParserRuleCall_1());
		}
		this_ParsedXpathExpression_4=ruleParsedXpathExpression
		{
			$current = $this_ParsedXpathExpression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParsedXpathExpression
entryRuleParsedXpathExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParsedXpathExpressionRule()); }
	iv_ruleParsedXpathExpression=ruleParsedXpathExpression
	{ $current=$iv_ruleParsedXpathExpression.current; }
	EOF;

// Rule ParsedXpathExpression
ruleParsedXpathExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getParsedXpathExpressionAccess().getXpathOrExprParserRuleCall());
	}
	this_XpathOrExpr_0=ruleXpathOrExpr
	{
		$current = $this_XpathOrExpr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleXpathOrExpr
entryRuleXpathOrExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathOrExprRule()); }
	iv_ruleXpathOrExpr=ruleXpathOrExpr
	{ $current=$iv_ruleXpathOrExpr.current; }
	EOF;

// Rule XpathOrExpr
ruleXpathOrExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathOrExprAccess().getXpathAndExprParserRuleCall_0());
		}
		this_XpathAndExpr_0=ruleXpathAndExpr
		{
			$current = $this_XpathAndExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathOrExprAccess().getXpathOrOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=Or
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getXpathOrExprAccess().getOperatorOrKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathOrExprRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "or");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathOrExprAccess().getRightXpathAndExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathAndExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathOrExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathAndExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXpathAndExpr
entryRuleXpathAndExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathAndExprRule()); }
	iv_ruleXpathAndExpr=ruleXpathAndExpr
	{ $current=$iv_ruleXpathAndExpr.current; }
	EOF;

// Rule XpathAndExpr
ruleXpathAndExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathAndExprAccess().getXpathEqualityExprParserRuleCall_0());
		}
		this_XpathEqualityExpr_0=ruleXpathEqualityExpr
		{
			$current = $this_XpathEqualityExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathAndExprAccess().getXpathAndOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=And
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getXpathAndExprAccess().getOperatorAndKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathAndExprRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "and");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathAndExprAccess().getRightXpathEqualityExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathEqualityExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathAndExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathEqualityExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXpathEqualityExpr
entryRuleXpathEqualityExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathEqualityExprRule()); }
	iv_ruleXpathEqualityExpr=ruleXpathEqualityExpr
	{ $current=$iv_ruleXpathEqualityExpr.current; }
	EOF;

// Rule XpathEqualityExpr
ruleXpathEqualityExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathEqualityExprAccess().getXpathRelationalExprParserRuleCall_0());
		}
		this_XpathRelationalExpr_0=ruleXpathRelationalExpr
		{
			$current = $this_XpathRelationalExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathEqualityExprAccess().getXpathEqualityOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=EqualsSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getXpathEqualityExprAccess().getOperatorEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathEqualityExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=ExclamationMarkEqualsSign
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getXpathEqualityExprAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathEqualityExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathEqualityExprAccess().getRightXpathRelationalExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathRelationalExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathEqualityExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathRelationalExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXpathRelationalExpr
entryRuleXpathRelationalExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathRelationalExprRule()); }
	iv_ruleXpathRelationalExpr=ruleXpathRelationalExpr
	{ $current=$iv_ruleXpathRelationalExpr.current; }
	EOF;

// Rule XpathRelationalExpr
ruleXpathRelationalExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathRelationalExprAccess().getXpathAdditiveExprParserRuleCall_0());
		}
		this_XpathAdditiveExpr_0=ruleXpathAdditiveExpr
		{
			$current = $this_XpathAdditiveExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathRelationalExprAccess().getXpathRelationalOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=LessThanSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getXpathRelationalExprAccess().getOperatorLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathRelationalExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=GreaterThanSign
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getXpathRelationalExprAccess().getOperatorGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathRelationalExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3=LessThanSignEqualsSign
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getXpathRelationalExprAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathRelationalExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4=GreaterThanSignEqualsSign
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getXpathRelationalExprAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathRelationalExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathRelationalExprAccess().getRightXpathAdditiveExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathAdditiveExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathRelationalExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathAdditiveExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXpathAdditiveExpr
entryRuleXpathAdditiveExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathAdditiveExprRule()); }
	iv_ruleXpathAdditiveExpr=ruleXpathAdditiveExpr
	{ $current=$iv_ruleXpathAdditiveExpr.current; }
	EOF;

// Rule XpathAdditiveExpr
ruleXpathAdditiveExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathAdditiveExprAccess().getXpathMultiplicativeExprParserRuleCall_0());
		}
		this_XpathMultiplicativeExpr_0=ruleXpathMultiplicativeExpr
		{
			$current = $this_XpathMultiplicativeExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathAdditiveExprAccess().getXpathAdditiveOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=PlusSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getXpathAdditiveExprAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathAdditiveExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=HyphenMinus
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getXpathAdditiveExprAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathAdditiveExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathAdditiveExprAccess().getRightXpathMultiplicativeExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathMultiplicativeExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathAdditiveExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathMultiplicativeExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXpathMultiplicativeExpr
entryRuleXpathMultiplicativeExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathMultiplicativeExprRule()); }
	iv_ruleXpathMultiplicativeExpr=ruleXpathMultiplicativeExpr
	{ $current=$iv_ruleXpathMultiplicativeExpr.current; }
	EOF;

// Rule XpathMultiplicativeExpr
ruleXpathMultiplicativeExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathMultiplicativeExprAccess().getXpathUnaryExprParserRuleCall_0());
		}
		this_XpathUnaryExpr_0=ruleXpathUnaryExpr
		{
			$current = $this_XpathUnaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathMultiplicativeExprAccess().getXpathMultiplicativeOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=Asterisk
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getXpathMultiplicativeExprAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathMultiplicativeExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=Div
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getXpathMultiplicativeExprAccess().getOperatorDivKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathMultiplicativeExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3=Mod
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getXpathMultiplicativeExprAccess().getOperatorModKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathMultiplicativeExprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathMultiplicativeExprAccess().getRightXpathMultiplicativeExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathMultiplicativeExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathMultiplicativeExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathMultiplicativeExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleXpathUnaryExpr
entryRuleXpathUnaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathUnaryExprRule()); }
	iv_ruleXpathUnaryExpr=ruleXpathUnaryExpr
	{ $current=$iv_ruleXpathUnaryExpr.current; }
	EOF;

// Rule XpathUnaryExpr
ruleXpathUnaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathUnaryExprAccess().getXpathUnaryOperationAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_operator_1_0=HyphenMinus
					{
						newLeafNode(lv_operator_1_0, grammarAccess.getXpathUnaryExprAccess().getOperatorHyphenMinusKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathUnaryExprRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_1_0, "-");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathUnaryExprAccess().getTargetXpathUnionExprParserRuleCall_0_2_0());
					}
					lv_target_2_0=ruleXpathUnionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathUnaryExprRule());
						}
						set(
							$current,
							"target",
							lv_target_2_0,
							"io.typefox.yang.Yang.XpathUnionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getXpathUnaryExprAccess().getXpathUnionExprParserRuleCall_1());
		}
		this_XpathUnionExpr_3=ruleXpathUnionExpr
		{
			$current = $this_XpathUnionExpr_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXpathUnionExpr
entryRuleXpathUnionExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathUnionExprRule()); }
	iv_ruleXpathUnionExpr=ruleXpathUnionExpr
	{ $current=$iv_ruleXpathUnionExpr.current; }
	EOF;

// Rule XpathUnionExpr
ruleXpathUnionExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathUnionExprAccess().getXpathPathExprParserRuleCall_0());
		}
		this_XpathPathExpr_0=ruleXpathPathExpr
		{
			$current = $this_XpathPathExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathUnionExprAccess().getXpathUnionOperationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=VerticalLine
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getXpathUnionExprAccess().getOperatorVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathUnionExprRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathUnionExprAccess().getRightXpathUnionExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXpathUnionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathUnionExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"io.typefox.yang.Yang.XpathUnionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleXpathPathExpr
entryRuleXpathPathExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathPathExprRule()); }
	iv_ruleXpathPathExpr=ruleXpathPathExpr
	{ $current=$iv_ruleXpathPathExpr.current; }
	EOF;

// Rule XpathPathExpr
ruleXpathPathExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathPathExprAccess().getXpathFilterExprParserRuleCall_0());
		}
		this_XpathFilterExpr_0=ruleXpathFilterExpr
		{
			$current = $this_XpathFilterExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathPathExprAccess().getXpathLocationTargetAction_1_0(),
						$current);
				}
			)
			otherlv_2=Solidus
			{
				newLeafNode(otherlv_2, grammarAccess.getXpathPathExprAccess().getSolidusKeyword_1_1());
			}
			(
				(Solidus)=>
				(
					(
						lv_isDescendants_3_0=Solidus
						{
							newLeafNode(lv_isDescendants_3_0, grammarAccess.getXpathPathExprAccess().getIsDescendantsSolidusKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathPathExprRule());
							}
							setWithLastConsumed($current, "isDescendants", true, "/");
						}
					)
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathPathExprAccess().getStepXpathStepParserRuleCall_1_3_0());
					}
					lv_step_4_0=ruleXpathStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathPathExprRule());
						}
						set(
							$current,
							"step",
							lv_step_4_0,
							"io.typefox.yang.Yang.XpathStep");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getXpathPathExprAccess().getXpathFilterTargetAction_1_4_0(),
							$current);
					}
				)
				otherlv_6=LeftSquareBracket
				{
					newLeafNode(otherlv_6, grammarAccess.getXpathPathExprAccess().getLeftSquareBracketKeyword_1_4_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getXpathPathExprAccess().getPredicateXpathExpressionParserRuleCall_1_4_2_0());
						}
						lv_predicate_7_0=ruleXpathExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXpathPathExprRule());
							}
							set(
								$current,
								"predicate",
								lv_predicate_7_0,
								"io.typefox.yang.Yang.XpathExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=RightSquareBracket
				{
					newLeafNode(otherlv_8, grammarAccess.getXpathPathExprAccess().getRightSquareBracketKeyword_1_4_3());
				}
			)*
		)*
	)
;

// Entry rule entryRuleXpathFilterExpr
entryRuleXpathFilterExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathFilterExprRule()); }
	iv_ruleXpathFilterExpr=ruleXpathFilterExpr
	{ $current=$iv_ruleXpathFilterExpr.current; }
	EOF;

// Rule XpathFilterExpr
ruleXpathFilterExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathFilterExprAccess().getXpathPrimaryExprParserRuleCall_0());
		}
		this_XpathPrimaryExpr_0=ruleXpathPrimaryExpr
		{
			$current = $this_XpathPrimaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXpathFilterExprAccess().getXpathFilterTargetAction_1_0(),
						$current);
				}
			)
			otherlv_2=LeftSquareBracket
			{
				newLeafNode(otherlv_2, grammarAccess.getXpathFilterExprAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathFilterExprAccess().getPredicateXpathExpressionParserRuleCall_1_2_0());
					}
					lv_predicate_3_0=ruleXpathExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathFilterExprRule());
						}
						set(
							$current,
							"predicate",
							lv_predicate_3_0,
							"io.typefox.yang.Yang.XpathExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=RightSquareBracket
			{
				newLeafNode(otherlv_4, grammarAccess.getXpathFilterExprAccess().getRightSquareBracketKeyword_1_3());
			}
		)*
	)
;

// Entry rule entryRuleXpathPrimaryExpr
entryRuleXpathPrimaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathPrimaryExprRule()); }
	iv_ruleXpathPrimaryExpr=ruleXpathPrimaryExpr
	{ $current=$iv_ruleXpathPrimaryExpr.current; }
	EOF;

// Rule XpathPrimaryExpr
ruleXpathPrimaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathPrimaryExprAccess().getXpathVariableReferenceAction_0_0(),
						$current);
				}
			)
			otherlv_1=DollarSign
			{
				newLeafNode(otherlv_1, grammarAccess.getXpathPrimaryExprAccess().getDollarSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getNameQNAMEParserRuleCall_0_2_0());
					}
					lv_name_2_0=ruleQNAME
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathPrimaryExprRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"io.typefox.yang.Yang.QNAME");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3=LeftParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getXpathExpressionParserRuleCall_1_1());
			}
			this_XpathExpression_4=ruleXpathExpression
			{
				$current = $this_XpathExpression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=RightParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getXpathPrimaryExprAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathPrimaryExprAccess().getXpathStringLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_STRING
					{
						newLeafNode(lv_value_7_0, grammarAccess.getXpathPrimaryExprAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathPrimaryExprRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"io.typefox.yang.Yang.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathPrimaryExprAccess().getXpathNumberLiteralAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_9_0=RULE_NUMBER
					{
						newLeafNode(lv_value_9_0, grammarAccess.getXpathPrimaryExprAccess().getValueNUMBERTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathPrimaryExprRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_9_0,
							"io.typefox.yang.Yang.NUMBER");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathPrimaryExprAccess().getXpathFunctionCallAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getNameQNAMEParserRuleCall_4_1_0());
					}
					lv_name_11_0=ruleQNAME
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathPrimaryExprRule());
						}
						set(
							$current,
							"name",
							lv_name_11_0,
							"io.typefox.yang.Yang.QNAME");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=LeftParenthesis
			{
				newLeafNode(otherlv_12, grammarAccess.getXpathPrimaryExprAccess().getLeftParenthesisKeyword_4_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getArgsXpathExpressionParserRuleCall_4_3_0_0());
						}
						lv_args_13_0=ruleXpathExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXpathPrimaryExprRule());
							}
							add(
								$current,
								"args",
								lv_args_13_0,
								"io.typefox.yang.Yang.XpathExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_14=Comma
					{
						newLeafNode(otherlv_14, grammarAccess.getXpathPrimaryExprAccess().getCommaKeyword_4_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getArgsXpathExpressionParserRuleCall_4_3_1_1_0());
							}
							lv_args_15_0=ruleXpathExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getXpathPrimaryExprRule());
								}
								add(
									$current,
									"args",
									lv_args_15_0,
									"io.typefox.yang.Yang.XpathExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_16=RightParenthesis
			{
				newLeafNode(otherlv_16, grammarAccess.getXpathPrimaryExprAccess().getRightParenthesisKeyword_4_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathPrimaryExprAccess().getRelativePathAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getStepXpathStepParserRuleCall_5_1_0());
					}
					lv_step_18_0=ruleXpathStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathPrimaryExprRule());
						}
						set(
							$current,
							"step",
							lv_step_18_0,
							"io.typefox.yang.Yang.XpathStep");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathPrimaryExprAccess().getAbsolutePathAction_6_0(),
						$current);
				}
			)
			otherlv_20=Solidus
			{
				newLeafNode(otherlv_20, grammarAccess.getXpathPrimaryExprAccess().getSolidusKeyword_6_1());
			}
			(
				(Solidus)=>
				(
					(
						lv_isDescendants_21_0=Solidus
						{
							newLeafNode(lv_isDescendants_21_0, grammarAccess.getXpathPrimaryExprAccess().getIsDescendantsSolidusKeyword_6_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXpathPrimaryExprRule());
							}
							setWithLastConsumed($current, "isDescendants", true, "/");
						}
					)
				)
			)?
			(
				(FullStop | FullStopFullStop | CommercialAt | Ancestor | AncestorOrSelf | Attribute | Child | Descendant | DescendantOrSelf | Following | FollowingSibling | Namespace | Parent | Preceding | PrecedingSibling | Self | Div | And | Or | Mod | Comment | Text | Node | Asterisk | ProcessingInstruction | RULE_ID)=>
				(
					{
						newCompositeNode(grammarAccess.getXpathPrimaryExprAccess().getStepXpathStepParserRuleCall_6_3_0());
					}
					lv_step_22_0=ruleXpathStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathPrimaryExprRule());
						}
						set(
							$current,
							"step",
							lv_step_22_0,
							"io.typefox.yang.Yang.XpathStep");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleXpathStep
entryRuleXpathStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathStepRule()); }
	iv_ruleXpathStep=ruleXpathStep
	{ $current=$iv_ruleXpathStep.current; }
	EOF;

// Rule XpathStep
ruleXpathStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathStepAccess().getCurrentRefAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathStepRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getXpathStepAccess().getRefSchemaNodeCrossReference_0_1_0());
					}
					ruleDot
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathStepAccess().getParentRefAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathStepRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getXpathStepAccess().getRefSchemaNodeCrossReference_1_1_0());
					}
					ruleDotDot
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathStepAccess().getAbbrevAttributeStepAction_2_0(),
						$current);
				}
			)
			otherlv_5=CommercialAt
			{
				newLeafNode(otherlv_5, grammarAccess.getXpathStepAccess().getCommercialAtKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathStepAccess().getAttributeNameXpathIDOrKwParserRuleCall_2_2_0());
					}
					lv_attributeName_6_0=ruleXpathIDOrKw
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathStepRule());
						}
						set(
							$current,
							"attributeName",
							lv_attributeName_6_0,
							"io.typefox.yang.Yang.XpathIDOrKw");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getXpathStepAccess().getAxisXpathAxisNameParserRuleCall_3_0_0_0());
						}
						lv_axis_7_0=ruleXpathAxisName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXpathStepRule());
							}
							set(
								$current,
								"axis",
								lv_axis_7_0,
								"io.typefox.yang.Yang.XpathAxisName");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=Colon
				{
					newLeafNode(otherlv_8, grammarAccess.getXpathStepAccess().getColonKeyword_3_0_1());
				}
				otherlv_9=Colon
				{
					newLeafNode(otherlv_9, grammarAccess.getXpathStepAccess().getColonKeyword_3_0_2());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathStepAccess().getNodeXpathNodeTestParserRuleCall_3_1_0());
					}
					lv_node_10_0=ruleXpathNodeTest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathStepRule());
						}
						set(
							$current,
							"node",
							lv_node_10_0,
							"io.typefox.yang.Yang.XpathNodeTest");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDot
entryRuleDot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDotRule()); }
	iv_ruleDot=ruleDot
	{ $current=$iv_ruleDot.current.getText(); }
	EOF;

// Rule Dot
ruleDot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=FullStop
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDotAccess().getFullStopKeyword());
	}
;

// Entry rule entryRuleDotDot
entryRuleDotDot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDotDotRule()); }
	iv_ruleDotDot=ruleDotDot
	{ $current=$iv_ruleDotDot.current.getText(); }
	EOF;

// Rule DotDot
ruleDotDot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=FullStopFullStop
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDotDotAccess().getFullStopFullStopKeyword());
	}
;

// Entry rule entryRuleXpathNodeTest
entryRuleXpathNodeTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathNodeTestRule()); }
	iv_ruleXpathNodeTest=ruleXpathNodeTest
	{ $current=$iv_ruleXpathNodeTest.current; }
	EOF;

// Rule XpathNodeTest
ruleXpathNodeTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXpathNodeTestAccess().getXpathNameTestParserRuleCall_0());
		}
		this_XpathNameTest_0=ruleXpathNameTest
		{
			$current = $this_XpathNameTest_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathNodeTestAccess().getXpathNodeTypeAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXpathNodeTestAccess().getNameXpathNodeTypeParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleXpathNodeType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpathNodeTestRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"io.typefox.yang.Yang.XpathNodeType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=LeftParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getXpathNodeTestAccess().getLeftParenthesisKeyword_1_2());
			}
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getXpathNodeTestAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXpathNodeTestAccess().getProcessingInstructionAction_2_0(),
						$current);
				}
			)
			otherlv_6=ProcessingInstruction
			{
				newLeafNode(otherlv_6, grammarAccess.getXpathNodeTestAccess().getProcessingInstructionKeyword_2_1());
			}
			otherlv_7=LeftParenthesis
			{
				newLeafNode(otherlv_7, grammarAccess.getXpathNodeTestAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					lv_instruction_8_0=RULE_STRING
					{
						newLeafNode(lv_instruction_8_0, grammarAccess.getXpathNodeTestAccess().getInstructionSTRINGTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathNodeTestRule());
						}
						setWithLastConsumed(
							$current,
							"instruction",
							lv_instruction_8_0,
							"io.typefox.yang.Yang.STRING");
					}
				)
			)
			otherlv_9=RightParenthesis
			{
				newLeafNode(otherlv_9, grammarAccess.getXpathNodeTestAccess().getRightParenthesisKeyword_2_4());
			}
		)
	)
;

// Entry rule entryRuleXpathNameTest
entryRuleXpathNameTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpathNameTestRule()); }
	iv_ruleXpathNameTest=ruleXpathNameTest
	{ $current=$iv_ruleXpathNameTest.current; }
	EOF;

// Rule XpathNameTest
ruleXpathNameTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_prefix_0_0=RULE_ID
					{
						newLeafNode(lv_prefix_0_0, grammarAccess.getXpathNameTestAccess().getPrefixIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXpathNameTestRule());
						}
						setWithLastConsumed(
							$current,
							"prefix",
							lv_prefix_0_0,
							"io.typefox.yang.Yang.ID");
					}
				)
			)
			otherlv_1=Colon
			{
				newLeafNode(otherlv_1, grammarAccess.getXpathNameTestAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXpathNameTestRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getXpathNameTestAccess().getRefSchemaNodeCrossReference_1_0());
				}
				ruleXpathIDOrKw
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleXpathNodeType
entryRuleXpathNodeType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXpathNodeTypeRule()); }
	iv_ruleXpathNodeType=ruleXpathNodeType
	{ $current=$iv_ruleXpathNodeType.current.getText(); }
	EOF;

// Rule XpathNodeType
ruleXpathNodeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Comment
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathNodeTypeAccess().getCommentKeyword_0());
		}
		    |
		kw=Text
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathNodeTypeAccess().getTextKeyword_1());
		}
		    |
		kw=Node
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathNodeTypeAccess().getNodeKeyword_2());
		}
	)
;

// Entry rule entryRuleXpathAxisName
entryRuleXpathAxisName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXpathAxisNameRule()); }
	iv_ruleXpathAxisName=ruleXpathAxisName
	{ $current=$iv_ruleXpathAxisName.current.getText(); }
	EOF;

// Rule XpathAxisName
ruleXpathAxisName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Ancestor
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getAncestorKeyword_0());
		}
		    |
		kw=AncestorOrSelf
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getAncestorOrSelfKeyword_1());
		}
		    |
		kw=Attribute
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getAttributeKeyword_2());
		}
		    |
		kw=Child
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getChildKeyword_3());
		}
		    |
		kw=Descendant
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getDescendantKeyword_4());
		}
		    |
		kw=DescendantOrSelf
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getDescendantOrSelfKeyword_5());
		}
		    |
		kw=Following
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getFollowingKeyword_6());
		}
		    |
		kw=FollowingSibling
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getFollowingSiblingKeyword_7());
		}
		    |
		kw=Namespace
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getNamespaceKeyword_8());
		}
		    |
		kw=Parent
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getParentKeyword_9());
		}
		    |
		kw=Preceding
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getPrecedingKeyword_10());
		}
		    |
		kw=PrecedingSibling
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getPrecedingSiblingKeyword_11());
		}
		    |
		kw=Self
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathAxisNameAccess().getSelfKeyword_12());
		}
	)
;

// Entry rule entryRuleXpathIDOrKw
entryRuleXpathIDOrKw returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXpathIDOrKwRule()); }
	iv_ruleXpathIDOrKw=ruleXpathIDOrKw
	{ $current=$iv_ruleXpathIDOrKw.current.getText(); }
	EOF;

// Rule XpathIDOrKw
ruleXpathIDOrKw returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getXpathIDOrKwAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw=Div
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathIDOrKwAccess().getDivKeyword_1());
		}
		    |
		kw=And
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathIDOrKwAccess().getAndKeyword_2());
		}
		    |
		kw=Or
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathIDOrKwAccess().getOrKeyword_3());
		}
		    |
		kw=Mod
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathIDOrKwAccess().getModKeyword_4());
		}
		    |
		{
			newCompositeNode(grammarAccess.getXpathIDOrKwAccess().getXpathAxisNameParserRuleCall_5());
		}
		this_XpathAxisName_5=ruleXpathAxisName
		{
			$current.merge(this_XpathAxisName_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXpathIDOrKwAccess().getXpathNodeTypeParserRuleCall_6());
		}
		this_XpathNodeType_6=ruleXpathNodeType
		{
			$current.merge(this_XpathNodeType_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw=Asterisk
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getXpathIDOrKwAccess().getAsteriskKeyword_7());
		}
	)
;

// Entry rule entryRuleQNAME
entryRuleQNAME returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQNAMERule()); }
	iv_ruleQNAME=ruleQNAME
	{ $current=$iv_ruleQNAME.current.getText(); }
	EOF;

// Rule QNAME
ruleQNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getQNAMEAccess().getIdOrKwParserRuleCall_0_0());
			}
			this_IdOrKw_0=ruleIdOrKw
			{
				$current.merge(this_IdOrKw_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=Colon
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQNAMEAccess().getColonKeyword_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getQNAMEAccess().getIdOrKwParserRuleCall_1());
		}
		this_IdOrKw_2=ruleIdOrKw
		{
			$current.merge(this_IdOrKw_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current.getText(); }
	EOF;

// Rule StringValue
ruleStringValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall());
		}
	)+
;

// Entry rule entryRuleIdOrKw
entryRuleIdOrKw returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdOrKwRule()); }
	iv_ruleIdOrKw=ruleIdOrKw
	{ $current=$iv_ruleIdOrKw.current.getText(); }
	EOF;

// Rule IdOrKw
ruleIdOrKw returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getIdOrKwAccess().getIDTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getIdOrKwAccess().getBUILTIN_TYPEParserRuleCall_1());
		}
		this_BUILTIN_TYPE_1=ruleBUILTIN_TYPE
		{
			$current.merge(this_BUILTIN_TYPE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIdOrKwAccess().getKEYWORDParserRuleCall_2());
		}
		this_KEYWORD_2=ruleKEYWORD
		{
			$current.merge(this_KEYWORD_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQualifiedTypeName
entryRuleQualifiedTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedTypeNameRule()); }
	iv_ruleQualifiedTypeName=ruleQualifiedTypeName
	{ $current=$iv_ruleQualifiedTypeName.current.getText(); }
	EOF;

// Rule QualifiedTypeName
ruleQualifiedTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				this_ID_0=RULE_ID
				{
					$current.merge(this_ID_0);
				}
				{
					newLeafNode(this_ID_0, grammarAccess.getQualifiedTypeNameAccess().getIDTerminalRuleCall_0_0_0());
				}
				    |
				{
					newCompositeNode(grammarAccess.getQualifiedTypeNameAccess().getKEYWORDParserRuleCall_0_0_1());
				}
				this_KEYWORD_1=ruleKEYWORD
				{
					$current.merge(this_KEYWORD_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			kw=Colon
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedTypeNameAccess().getColonKeyword_0_1());
			}
		)?
		(
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getQualifiedTypeNameAccess().getIDTerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getQualifiedTypeNameAccess().getKEYWORDParserRuleCall_1_1());
			}
			this_KEYWORD_4=ruleKEYWORD
			{
				$current.merge(this_KEYWORD_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBUILTIN_TYPE
entryRuleBUILTIN_TYPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBUILTIN_TYPERule()); }
	iv_ruleBUILTIN_TYPE=ruleBUILTIN_TYPE
	{ $current=$iv_ruleBUILTIN_TYPE.current.getText(); }
	EOF;

// Rule BUILTIN_TYPE
ruleBUILTIN_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Binary
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getBinaryKeyword_0());
		}
		    |
		kw=Bits
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getBitsKeyword_1());
		}
		    |
		kw=Boolean
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getBooleanKeyword_2());
		}
		    |
		kw=Decimal64
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getDecimal64Keyword_3());
		}
		    |
		kw=Empty
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getEmptyKeyword_4());
		}
		    |
		kw=Enumeration
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getEnumerationKeyword_5());
		}
		    |
		kw=Identityref
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getIdentityrefKeyword_6());
		}
		    |
		kw=InstanceIdentifier
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getInstanceIdentifierKeyword_7());
		}
		    |
		kw=Int8
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getInt8Keyword_8());
		}
		    |
		kw=Int16
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getInt16Keyword_9());
		}
		    |
		kw=Int32
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getInt32Keyword_10());
		}
		    |
		kw=Int64
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getInt64Keyword_11());
		}
		    |
		kw=Leafref
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getLeafrefKeyword_12());
		}
		    |
		kw=String
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getStringKeyword_13());
		}
		    |
		kw=Uint8
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getUint8Keyword_14());
		}
		    |
		kw=Uint16
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getUint16Keyword_15());
		}
		    |
		kw=Uint32
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getUint32Keyword_16());
		}
		    |
		kw=Uint64
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getUint64Keyword_17());
		}
		    |
		kw=Union
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBUILTIN_TYPEAccess().getUnionKeyword_18());
		}
	)
;

// Entry rule entryRuleKEYWORD
entryRuleKEYWORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKEYWORDRule()); }
	iv_ruleKEYWORD=ruleKEYWORD
	{ $current=$iv_ruleKEYWORD.current.getText(); }
	EOF;

// Rule KEYWORD
ruleKEYWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getKEYWORDAccess().getSTATEMENT_KEYWORDParserRuleCall_0());
		}
		this_STATEMENT_KEYWORD_0=ruleSTATEMENT_KEYWORD
		{
			$current.merge(this_STATEMENT_KEYWORD_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw=Add
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getAddKeyword_1());
		}
		    |
		kw=Current
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getCurrentKeyword_2());
		}
		    |
		kw=Delete
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getDeleteKeyword_3());
		}
		    |
		kw=Deprecated
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getDeprecatedKeyword_4());
		}
		    |
		kw=False
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getFalseKeyword_5());
		}
		    |
		kw=Max
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getMaxKeyword_6());
		}
		    |
		kw=Min
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getMinKeyword_7());
		}
		    |
		kw=NotSupported
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getNotSupportedKeyword_8());
		}
		    |
		kw=Obsolete
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getObsoleteKeyword_9());
		}
		    |
		kw=Replace
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getReplaceKeyword_10());
		}
		    |
		kw=KW_System
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getSystemKeyword_11());
		}
		    |
		kw=True
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getTrueKeyword_12());
		}
		    |
		kw=Unbounded
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getUnboundedKeyword_13());
		}
		    |
		kw=User
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getKEYWORDAccess().getUserKeyword_14());
		}
	)
;

// Entry rule entryRuleSTATEMENT_KEYWORD
entryRuleSTATEMENT_KEYWORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSTATEMENT_KEYWORDRule()); }
	iv_ruleSTATEMENT_KEYWORD=ruleSTATEMENT_KEYWORD
	{ $current=$iv_ruleSTATEMENT_KEYWORD.current.getText(); }
	EOF;

// Rule STATEMENT_KEYWORD
ruleSTATEMENT_KEYWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Action
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getActionKeyword_0());
		}
		    |
		kw=Anydata
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getAnydataKeyword_1());
		}
		    |
		kw=Anyxml
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getAnyxmlKeyword_2());
		}
		    |
		kw=Argument
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getArgumentKeyword_3());
		}
		    |
		kw=Augment
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getAugmentKeyword_4());
		}
		    |
		kw=Base
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getBaseKeyword_5());
		}
		    |
		kw=BelongsTo
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getBelongsToKeyword_6());
		}
		    |
		kw=Bit
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getBitKeyword_7());
		}
		    |
		kw=Case
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getCaseKeyword_8());
		}
		    |
		kw=Choice
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getChoiceKeyword_9());
		}
		    |
		kw=Config
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getConfigKeyword_10());
		}
		    |
		kw=Contact
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getContactKeyword_11());
		}
		    |
		kw=Container
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getContainerKeyword_12());
		}
		    |
		kw=Default
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getDefaultKeyword_13());
		}
		    |
		kw=Description
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getDescriptionKeyword_14());
		}
		    |
		kw=Enum
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getEnumKeyword_15());
		}
		    |
		kw=ErrorAppTag
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getErrorAppTagKeyword_16());
		}
		    |
		kw=ErrorMessage
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getErrorMessageKeyword_17());
		}
		    |
		kw=Extension
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getExtensionKeyword_18());
		}
		    |
		kw=Deviation
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getDeviationKeyword_19());
		}
		    |
		kw=Deviate
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getDeviateKeyword_20());
		}
		    |
		kw=Feature
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getFeatureKeyword_21());
		}
		    |
		kw=FractionDigits
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getFractionDigitsKeyword_22());
		}
		    |
		kw=Grouping
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getGroupingKeyword_23());
		}
		    |
		kw=Identity
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getIdentityKeyword_24());
		}
		    |
		kw=IfFeature
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getIfFeatureKeyword_25());
		}
		    |
		kw=Import
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getImportKeyword_26());
		}
		    |
		kw=Include
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getIncludeKeyword_27());
		}
		    |
		kw=Input
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getInputKeyword_28());
		}
		    |
		kw=Key
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getKeyKeyword_29());
		}
		    |
		kw=Leaf
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getLeafKeyword_30());
		}
		    |
		kw=LeafList
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getLeafListKeyword_31());
		}
		    |
		kw=Length
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getLengthKeyword_32());
		}
		    |
		kw=List
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getListKeyword_33());
		}
		    |
		kw=Mandatory
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getMandatoryKeyword_34());
		}
		    |
		kw=MaxElements
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getMaxElementsKeyword_35());
		}
		    |
		kw=MinElements
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getMinElementsKeyword_36());
		}
		    |
		kw=Modifier
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getModifierKeyword_37());
		}
		    |
		kw=Module
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getModuleKeyword_38());
		}
		    |
		kw=Must
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getMustKeyword_39());
		}
		    |
		kw=Namespace
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getNamespaceKeyword_40());
		}
		    |
		kw=Notification
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getNotificationKeyword_41());
		}
		    |
		kw=OrderedBy
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getOrderedByKeyword_42());
		}
		    |
		kw=Organization
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getOrganizationKeyword_43());
		}
		    |
		kw=Output
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getOutputKeyword_44());
		}
		    |
		kw=Path
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getPathKeyword_45());
		}
		    |
		kw=Pattern
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getPatternKeyword_46());
		}
		    |
		kw=Position
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getPositionKeyword_47());
		}
		    |
		kw=Prefix
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getPrefixKeyword_48());
		}
		    |
		kw=Presence
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getPresenceKeyword_49());
		}
		    |
		kw=Range
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getRangeKeyword_50());
		}
		    |
		kw=Reference
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getReferenceKeyword_51());
		}
		    |
		kw=Refine
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getRefineKeyword_52());
		}
		    |
		kw=RequireInstance
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getRequireInstanceKeyword_53());
		}
		    |
		kw=Revision
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getRevisionKeyword_54());
		}
		    |
		kw=RevisionDate
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getRevisionDateKeyword_55());
		}
		    |
		kw=Rpc
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getRpcKeyword_56());
		}
		    |
		kw=Status
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getStatusKeyword_57());
		}
		    |
		kw=Submodule
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getSubmoduleKeyword_58());
		}
		    |
		kw=Type
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getTypeKeyword_59());
		}
		    |
		kw=Typedef
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getTypedefKeyword_60());
		}
		    |
		kw=Unique
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getUniqueKeyword_61());
		}
		    |
		kw=Units
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getUnitsKeyword_62());
		}
		    |
		kw=Uses
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getUsesKeyword_63());
		}
		    |
		kw=Value
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getValueKeyword_64());
		}
		    |
		kw=When
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getWhenKeyword_65());
		}
		    |
		kw=YangVersion
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getYangVersionKeyword_66());
		}
		    |
		kw=YinElement
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSTATEMENT_KEYWORDAccess().getYinElementKeyword_67());
		}
	)
;
