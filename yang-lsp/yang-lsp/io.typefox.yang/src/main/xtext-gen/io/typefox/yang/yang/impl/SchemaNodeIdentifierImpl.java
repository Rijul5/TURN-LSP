/**
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package io.typefox.yang.yang.impl;

import io.typefox.yang.yang.SchemaNode;
import io.typefox.yang.yang.SchemaNodeIdentifier;
import io.typefox.yang.yang.YangPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Schema Node Identifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.typefox.yang.yang.impl.SchemaNodeIdentifierImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link io.typefox.yang.yang.impl.SchemaNodeIdentifierImpl#getSchemaNode <em>Schema Node</em>}</li>
 *   <li>{@link io.typefox.yang.yang.impl.SchemaNodeIdentifierImpl#isIsAbsolute <em>Is Absolute</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SchemaNodeIdentifierImpl extends MinimalEObjectImpl.Container implements SchemaNodeIdentifier
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected SchemaNodeIdentifier target;

  /**
   * The cached value of the '{@link #getSchemaNode() <em>Schema Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchemaNode()
   * @generated
   * @ordered
   */
  protected SchemaNode schemaNode;

  /**
   * The default value of the '{@link #isIsAbsolute() <em>Is Absolute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsAbsolute()
   * @generated
   * @ordered
   */
  protected static final boolean IS_ABSOLUTE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsAbsolute() <em>Is Absolute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsAbsolute()
   * @generated
   * @ordered
   */
  protected boolean isAbsolute = IS_ABSOLUTE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchemaNodeIdentifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return YangPackage.Literals.SCHEMA_NODE_IDENTIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchemaNodeIdentifier getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTarget(SchemaNodeIdentifier newTarget, NotificationChain msgs)
  {
    SchemaNodeIdentifier oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET, oldTarget, newTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTarget(SchemaNodeIdentifier newTarget)
  {
    if (newTarget != target)
    {
      NotificationChain msgs = null;
      if (target != null)
        msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET, null, msgs);
      if (newTarget != null)
        msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET, null, msgs);
      msgs = basicSetTarget(newTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET, newTarget, newTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchemaNode getSchemaNode()
  {
    if (schemaNode != null && schemaNode.eIsProxy())
    {
      InternalEObject oldSchemaNode = (InternalEObject)schemaNode;
      schemaNode = (SchemaNode)eResolveProxy(oldSchemaNode);
      if (schemaNode != oldSchemaNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, YangPackage.SCHEMA_NODE_IDENTIFIER__SCHEMA_NODE, oldSchemaNode, schemaNode));
      }
    }
    return schemaNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SchemaNode basicGetSchemaNode()
  {
    return schemaNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSchemaNode(SchemaNode newSchemaNode)
  {
    SchemaNode oldSchemaNode = schemaNode;
    schemaNode = newSchemaNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, YangPackage.SCHEMA_NODE_IDENTIFIER__SCHEMA_NODE, oldSchemaNode, schemaNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsAbsolute()
  {
    return isAbsolute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsAbsolute(boolean newIsAbsolute)
  {
    boolean oldIsAbsolute = isAbsolute;
    isAbsolute = newIsAbsolute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, YangPackage.SCHEMA_NODE_IDENTIFIER__IS_ABSOLUTE, oldIsAbsolute, isAbsolute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET:
        return basicSetTarget(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET:
        return getTarget();
      case YangPackage.SCHEMA_NODE_IDENTIFIER__SCHEMA_NODE:
        if (resolve) return getSchemaNode();
        return basicGetSchemaNode();
      case YangPackage.SCHEMA_NODE_IDENTIFIER__IS_ABSOLUTE:
        return isIsAbsolute();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET:
        setTarget((SchemaNodeIdentifier)newValue);
        return;
      case YangPackage.SCHEMA_NODE_IDENTIFIER__SCHEMA_NODE:
        setSchemaNode((SchemaNode)newValue);
        return;
      case YangPackage.SCHEMA_NODE_IDENTIFIER__IS_ABSOLUTE:
        setIsAbsolute((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET:
        setTarget((SchemaNodeIdentifier)null);
        return;
      case YangPackage.SCHEMA_NODE_IDENTIFIER__SCHEMA_NODE:
        setSchemaNode((SchemaNode)null);
        return;
      case YangPackage.SCHEMA_NODE_IDENTIFIER__IS_ABSOLUTE:
        setIsAbsolute(IS_ABSOLUTE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case YangPackage.SCHEMA_NODE_IDENTIFIER__TARGET:
        return target != null;
      case YangPackage.SCHEMA_NODE_IDENTIFIER__SCHEMA_NODE:
        return schemaNode != null;
      case YangPackage.SCHEMA_NODE_IDENTIFIER__IS_ABSOLUTE:
        return isAbsolute != IS_ABSOLUTE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isAbsolute: ");
    result.append(isAbsolute);
    result.append(')');
    return result.toString();
  }

} //SchemaNodeIdentifierImpl
