/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package io.typefox.yang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class YangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AbstractModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.AbstractModule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubmoduleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractModule:
		//	Module | Submodule;
		@Override public ParserRule getRule() { return rule; }
		
		//Module | Submodule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Module
		public RuleCall getModuleParserRuleCall_0() { return cModuleParserRuleCall_0; }
		
		//Submodule
		public RuleCall getSubmoduleParserRuleCall_1() { return cSubmoduleParserRuleCall_1; }
	}
	public class StatementEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.StatementEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSubstatementsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubstatementsStatementParserRuleCall_0_1_0 = (RuleCall)cSubstatementsAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//fragment StatementEnd returns Statement:
		//	'{'
		//	substatements+=Statement*
		//	'}' | ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' substatements+=Statement* '}' | ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' substatements+=Statement* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//substatements+=Statement*
		public Assignment getSubstatementsAssignment_0_1() { return cSubstatementsAssignment_0_1; }
		
		//Statement
		public RuleCall getSubstatementsStatementParserRuleCall_0_1_0() { return cSubstatementsStatementParserRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSchemaNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	SchemaNode | OtherStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//SchemaNode | OtherStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SchemaNode
		public RuleCall getSchemaNodeParserRuleCall_0() { return cSchemaNodeParserRuleCall_0; }
		
		//OtherStatement
		public RuleCall getOtherStatementParserRuleCall_1() { return cOtherStatementParserRuleCall_1; }
	}
	public class AbstractImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.AbstractImport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncludeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractImport:
		//	Import
		//	| Include;
		@Override public ParserRule getRule() { return rule; }
		
		//Import | Include
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_1() { return cIncludeParserRuleCall_1; }
	}
	public class SchemaNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.SchemaNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataSchemaNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtensionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGroupingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIdentityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNotificationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRpcParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cActionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInputParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOutputParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTypedefParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//SchemaNode:
		//	DataSchemaNode | Extension | Feature | Grouping | Identity | Notification | Rpc | Action | Input | Output | Typedef;
		@Override public ParserRule getRule() { return rule; }
		
		//DataSchemaNode | Extension | Feature | Grouping | Identity | Notification | Rpc | Action | Input | Output | Typedef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataSchemaNode
		public RuleCall getDataSchemaNodeParserRuleCall_0() { return cDataSchemaNodeParserRuleCall_0; }
		
		//Extension
		public RuleCall getExtensionParserRuleCall_1() { return cExtensionParserRuleCall_1; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_2() { return cFeatureParserRuleCall_2; }
		
		//Grouping
		public RuleCall getGroupingParserRuleCall_3() { return cGroupingParserRuleCall_3; }
		
		//Identity
		public RuleCall getIdentityParserRuleCall_4() { return cIdentityParserRuleCall_4; }
		
		//Notification
		public RuleCall getNotificationParserRuleCall_5() { return cNotificationParserRuleCall_5; }
		
		//Rpc
		public RuleCall getRpcParserRuleCall_6() { return cRpcParserRuleCall_6; }
		
		//Action
		public RuleCall getActionParserRuleCall_7() { return cActionParserRuleCall_7; }
		
		//Input
		public RuleCall getInputParserRuleCall_8() { return cInputParserRuleCall_8; }
		
		//Output
		public RuleCall getOutputParserRuleCall_9() { return cOutputParserRuleCall_9; }
		
		//Typedef
		public RuleCall getTypedefParserRuleCall_10() { return cTypedefParserRuleCall_10; }
	}
	public class DataSchemaNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.DataSchemaNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnydataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnyxmlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContainerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChoiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCaseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cListParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLeafParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLeafListParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//DataSchemaNode:
		//	Anydata | Anyxml | Container | Choice | Case | List | Leaf | LeafList;
		@Override public ParserRule getRule() { return rule; }
		
		//Anydata | Anyxml | Container | Choice | Case | List | Leaf | LeafList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Anydata
		public RuleCall getAnydataParserRuleCall_0() { return cAnydataParserRuleCall_0; }
		
		//Anyxml
		public RuleCall getAnyxmlParserRuleCall_1() { return cAnyxmlParserRuleCall_1; }
		
		//Container
		public RuleCall getContainerParserRuleCall_2() { return cContainerParserRuleCall_2; }
		
		//Choice
		public RuleCall getChoiceParserRuleCall_3() { return cChoiceParserRuleCall_3; }
		
		//Case
		public RuleCall getCaseParserRuleCall_4() { return cCaseParserRuleCall_4; }
		
		//List
		public RuleCall getListParserRuleCall_5() { return cListParserRuleCall_5; }
		
		//Leaf
		public RuleCall getLeafParserRuleCall_6() { return cLeafParserRuleCall_6; }
		
		//LeafList
		public RuleCall getLeafListParserRuleCall_7() { return cLeafListParserRuleCall_7; }
	}
	public class OtherStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.OtherStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAugmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBaseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBelongsToParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConfigParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cContactParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDefaultParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDescriptionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEnumerableParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cErrorAppTagParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cErrorMessageParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDeviationParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDeviateParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cFractionDigitsParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cIfFeatureParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cKeyParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cMandatoryParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cMaxElementsParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cMinElementsParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cModifierParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cMustParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cNamespaceParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cOrderedParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cOrderedByParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cOrganizationParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cPathParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cPatternParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cPrefixParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cPresenceParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cReferenceParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cRefineParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cRefinableParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cRequireInstanceParserRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cRevisionParserRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cRevisionDateParserRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		private final RuleCall cStatusParserRuleCall_37 = (RuleCall)cAlternatives.eContents().get(37);
		private final RuleCall cTypeParserRuleCall_38 = (RuleCall)cAlternatives.eContents().get(38);
		private final RuleCall cUniqueParserRuleCall_39 = (RuleCall)cAlternatives.eContents().get(39);
		private final RuleCall cUnitsParserRuleCall_40 = (RuleCall)cAlternatives.eContents().get(40);
		private final RuleCall cUnknownParserRuleCall_41 = (RuleCall)cAlternatives.eContents().get(41);
		private final RuleCall cUsesParserRuleCall_42 = (RuleCall)cAlternatives.eContents().get(42);
		private final RuleCall cWhenParserRuleCall_43 = (RuleCall)cAlternatives.eContents().get(43);
		private final RuleCall cYangVersionParserRuleCall_44 = (RuleCall)cAlternatives.eContents().get(44);
		private final RuleCall cYinElementParserRuleCall_45 = (RuleCall)cAlternatives.eContents().get(45);
		
		//OtherStatement:
		//	AbstractModule
		//	| AbstractImport
		//	| Argument
		//	| Augment
		//	| Base
		//	| BelongsTo
		//	| Config
		//	| Contact
		//	| Default
		//	| Description
		//	| Enumerable
		//	| ErrorAppTag
		//	| ErrorMessage
		//	| Deviation
		//	| Deviate
		//	| FractionDigits
		//	| IfFeature
		//	| Key
		//	| Mandatory
		//	| MaxElements
		//	| MinElements
		//	| Modifier
		//	| Must
		//	| Namespace
		//	| Ordered
		//	| OrderedBy
		//	| Organization
		//	| Path
		//	| Pattern
		//	| Prefix
		//	| Presence
		//	| Reference
		//	| Refine
		//	| Refinable
		//	| RequireInstance
		//	| Revision
		//	| RevisionDate
		//	| Status
		//	| Type
		//	| Unique
		//	| Units
		//	| Unknown
		//	| Uses
		//	| When
		//	| YangVersion
		//	| YinElement;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractModule | AbstractImport | Argument | Augment | Base | BelongsTo | Config | Contact | Default | Description |
		//Enumerable | ErrorAppTag | ErrorMessage | Deviation | Deviate | FractionDigits | IfFeature | Key | Mandatory |
		//MaxElements | MinElements | Modifier | Must | Namespace | Ordered | OrderedBy | Organization | Path | Pattern | Prefix
		//| Presence | Reference | Refine | Refinable | RequireInstance | Revision | RevisionDate | Status | Type | Unique |
		//Units | Unknown | Uses | When | YangVersion | YinElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractModule
		public RuleCall getAbstractModuleParserRuleCall_0() { return cAbstractModuleParserRuleCall_0; }
		
		//AbstractImport
		public RuleCall getAbstractImportParserRuleCall_1() { return cAbstractImportParserRuleCall_1; }
		
		//Argument
		public RuleCall getArgumentParserRuleCall_2() { return cArgumentParserRuleCall_2; }
		
		//Augment
		public RuleCall getAugmentParserRuleCall_3() { return cAugmentParserRuleCall_3; }
		
		//Base
		public RuleCall getBaseParserRuleCall_4() { return cBaseParserRuleCall_4; }
		
		//BelongsTo
		public RuleCall getBelongsToParserRuleCall_5() { return cBelongsToParserRuleCall_5; }
		
		//Config
		public RuleCall getConfigParserRuleCall_6() { return cConfigParserRuleCall_6; }
		
		//Contact
		public RuleCall getContactParserRuleCall_7() { return cContactParserRuleCall_7; }
		
		//Default
		public RuleCall getDefaultParserRuleCall_8() { return cDefaultParserRuleCall_8; }
		
		//Description
		public RuleCall getDescriptionParserRuleCall_9() { return cDescriptionParserRuleCall_9; }
		
		//Enumerable
		public RuleCall getEnumerableParserRuleCall_10() { return cEnumerableParserRuleCall_10; }
		
		//ErrorAppTag
		public RuleCall getErrorAppTagParserRuleCall_11() { return cErrorAppTagParserRuleCall_11; }
		
		//ErrorMessage
		public RuleCall getErrorMessageParserRuleCall_12() { return cErrorMessageParserRuleCall_12; }
		
		//Deviation
		public RuleCall getDeviationParserRuleCall_13() { return cDeviationParserRuleCall_13; }
		
		//Deviate
		public RuleCall getDeviateParserRuleCall_14() { return cDeviateParserRuleCall_14; }
		
		//FractionDigits
		public RuleCall getFractionDigitsParserRuleCall_15() { return cFractionDigitsParserRuleCall_15; }
		
		//IfFeature
		public RuleCall getIfFeatureParserRuleCall_16() { return cIfFeatureParserRuleCall_16; }
		
		//Key
		public RuleCall getKeyParserRuleCall_17() { return cKeyParserRuleCall_17; }
		
		//Mandatory
		public RuleCall getMandatoryParserRuleCall_18() { return cMandatoryParserRuleCall_18; }
		
		//MaxElements
		public RuleCall getMaxElementsParserRuleCall_19() { return cMaxElementsParserRuleCall_19; }
		
		//MinElements
		public RuleCall getMinElementsParserRuleCall_20() { return cMinElementsParserRuleCall_20; }
		
		//Modifier
		public RuleCall getModifierParserRuleCall_21() { return cModifierParserRuleCall_21; }
		
		//Must
		public RuleCall getMustParserRuleCall_22() { return cMustParserRuleCall_22; }
		
		//Namespace
		public RuleCall getNamespaceParserRuleCall_23() { return cNamespaceParserRuleCall_23; }
		
		//Ordered
		public RuleCall getOrderedParserRuleCall_24() { return cOrderedParserRuleCall_24; }
		
		//OrderedBy
		public RuleCall getOrderedByParserRuleCall_25() { return cOrderedByParserRuleCall_25; }
		
		//Organization
		public RuleCall getOrganizationParserRuleCall_26() { return cOrganizationParserRuleCall_26; }
		
		//Path
		public RuleCall getPathParserRuleCall_27() { return cPathParserRuleCall_27; }
		
		//Pattern
		public RuleCall getPatternParserRuleCall_28() { return cPatternParserRuleCall_28; }
		
		//Prefix
		public RuleCall getPrefixParserRuleCall_29() { return cPrefixParserRuleCall_29; }
		
		//Presence
		public RuleCall getPresenceParserRuleCall_30() { return cPresenceParserRuleCall_30; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_31() { return cReferenceParserRuleCall_31; }
		
		//Refine
		public RuleCall getRefineParserRuleCall_32() { return cRefineParserRuleCall_32; }
		
		//Refinable
		public RuleCall getRefinableParserRuleCall_33() { return cRefinableParserRuleCall_33; }
		
		//RequireInstance
		public RuleCall getRequireInstanceParserRuleCall_34() { return cRequireInstanceParserRuleCall_34; }
		
		//Revision
		public RuleCall getRevisionParserRuleCall_35() { return cRevisionParserRuleCall_35; }
		
		//RevisionDate
		public RuleCall getRevisionDateParserRuleCall_36() { return cRevisionDateParserRuleCall_36; }
		
		//Status
		public RuleCall getStatusParserRuleCall_37() { return cStatusParserRuleCall_37; }
		
		//Type
		public RuleCall getTypeParserRuleCall_38() { return cTypeParserRuleCall_38; }
		
		//Unique
		public RuleCall getUniqueParserRuleCall_39() { return cUniqueParserRuleCall_39; }
		
		//Units
		public RuleCall getUnitsParserRuleCall_40() { return cUnitsParserRuleCall_40; }
		
		//Unknown
		public RuleCall getUnknownParserRuleCall_41() { return cUnknownParserRuleCall_41; }
		
		//Uses
		public RuleCall getUsesParserRuleCall_42() { return cUsesParserRuleCall_42; }
		
		//When
		public RuleCall getWhenParserRuleCall_43() { return cWhenParserRuleCall_43; }
		
		//YangVersion
		public RuleCall getYangVersionParserRuleCall_44() { return cYangVersionParserRuleCall_44; }
		
		//YinElement
		public RuleCall getYinElementParserRuleCall_45() { return cYinElementParserRuleCall_45; }
	}
	public class EnumerableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Enumerable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Enumerable:
		//	Enum | Bit;
		@Override public ParserRule getRule() { return rule; }
		
		//Enum | Bit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }
		
		//Bit
		public RuleCall getBitParserRuleCall_1() { return cBitParserRuleCall_1; }
	}
	public class OrderedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Ordered");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Ordered:
		//	Position | Value;
		@Override public ParserRule getRule() { return rule; }
		
		//Position | Value
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Position
		public RuleCall getPositionParserRuleCall_0() { return cPositionParserRuleCall_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class RefinableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Refinable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLengthParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Refinable:
		//	Range | Length;
		@Override public ParserRule getRule() { return rule; }
		
		//Range | Length
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Range
		public RuleCall getRangeParserRuleCall_0() { return cRangeParserRuleCall_0; }
		
		//Length
		public RuleCall getLengthParserRuleCall_1() { return cLengthParserRuleCall_1; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1	
		//Module:
		//	'module' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class YangVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.YangVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYangVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cYangVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYangVersionStringValueParserRuleCall_1_0 = (RuleCall)cYangVersionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.2 
		//YangVersion:
		//	'yang-version' yangVersion=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'yang-version' yangVersion=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'yang-version'
		public Keyword getYangVersionKeyword_0() { return cYangVersionKeyword_0; }
		
		//yangVersion=StringValue
		public Assignment getYangVersionAssignment_1() { return cYangVersionAssignment_1; }
		
		//StringValue
		public RuleCall getYangVersionStringValueParserRuleCall_1_0() { return cYangVersionStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUriStringValueParserRuleCall_1_0 = (RuleCall)cUriAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.3
		//Namespace:
		//	'namespace' uri=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' uri=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//uri=StringValue
		public Assignment getUriAssignment_1() { return cUriAssignment_1; }
		
		//StringValue
		public RuleCall getUriStringValueParserRuleCall_1_0() { return cUriStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixStringValueParserRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.4
		//Prefix:
		//	'prefix' prefix=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'prefix' prefix=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//prefix=StringValue
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }
		
		//StringValue
		public RuleCall getPrefixStringValueParserRuleCall_1_0() { return cPrefixStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleAbstractModuleCrossReference_1_0 = (CrossReference)cModuleAssignment_1.eContents().get(0);
		private final RuleCall cModuleAbstractModuleStringValueParserRuleCall_1_0_1 = (RuleCall)cModuleAbstractModuleCrossReference_1_0.eContents().get(1);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.5
		//Import:
		//	'import' module=[AbstractModule|StringValue] StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' module=[AbstractModule|StringValue] StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//module=[AbstractModule|StringValue]
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }
		
		//[AbstractModule|StringValue]
		public CrossReference getModuleAbstractModuleCrossReference_1_0() { return cModuleAbstractModuleCrossReference_1_0; }
		
		//StringValue
		public RuleCall getModuleAbstractModuleStringValueParserRuleCall_1_0_1() { return cModuleAbstractModuleStringValueParserRuleCall_1_0_1; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RevisionDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.RevisionDate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRevisionDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDateRevisionCrossReference_1_0 = (CrossReference)cDateAssignment_1.eContents().get(0);
		private final RuleCall cDateRevisionStringValueParserRuleCall_1_0_1 = (RuleCall)cDateRevisionCrossReference_1_0.eContents().get(1);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.5.1
		//RevisionDate:
		//	'revision-date' date=[Revision|StringValue] StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'revision-date' date=[Revision|StringValue] StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'revision-date'
		public Keyword getRevisionDateKeyword_0() { return cRevisionDateKeyword_0; }
		
		//date=[Revision|StringValue]
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//[Revision|StringValue]
		public CrossReference getDateRevisionCrossReference_1_0() { return cDateRevisionCrossReference_1_0; }
		
		//StringValue
		public RuleCall getDateRevisionStringValueParserRuleCall_1_0_1() { return cDateRevisionStringValueParserRuleCall_1_0_1; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleAbstractModuleCrossReference_1_0 = (CrossReference)cModuleAssignment_1.eContents().get(0);
		private final RuleCall cModuleAbstractModuleStringValueParserRuleCall_1_0_1 = (RuleCall)cModuleAbstractModuleCrossReference_1_0.eContents().get(1);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.6
		//Include:
		//	'include' module=[AbstractModule|StringValue] StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' module=[AbstractModule|StringValue] StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//module=[AbstractModule|StringValue]
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }
		
		//[AbstractModule|StringValue]
		public CrossReference getModuleAbstractModuleCrossReference_1_0() { return cModuleAbstractModuleCrossReference_1_0; }
		
		//StringValue
		public RuleCall getModuleAbstractModuleStringValueParserRuleCall_1_0_1() { return cModuleAbstractModuleStringValueParserRuleCall_1_0_1; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class OrganizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Organization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrganizationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrganizationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrganizationStringValueParserRuleCall_1_0 = (RuleCall)cOrganizationAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.7
		//Organization:
		//	'organization' organization=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'organization' organization=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'organization'
		public Keyword getOrganizationKeyword_0() { return cOrganizationKeyword_0; }
		
		//organization=StringValue
		public Assignment getOrganizationAssignment_1() { return cOrganizationAssignment_1; }
		
		//StringValue
		public RuleCall getOrganizationStringValueParserRuleCall_1_0() { return cOrganizationStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ContactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Contact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContactStringValueParserRuleCall_1_0 = (RuleCall)cContactAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.8
		//Contact:
		//	'contact' contact=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'contact' contact=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'contact'
		public Keyword getContactKeyword_0() { return cContactKeyword_0; }
		
		//contact=StringValue
		public Assignment getContactAssignment_1() { return cContactAssignment_1; }
		
		//StringValue
		public RuleCall getContactStringValueParserRuleCall_1_0() { return cContactStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RevisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Revision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRevisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRevisionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRevisionStringValueParserRuleCall_1_0 = (RuleCall)cRevisionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.1.9
		//Revision:
		//	'revision' revision=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'revision' revision=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'revision'
		public Keyword getRevisionKeyword_0() { return cRevisionKeyword_0; }
		
		//revision=StringValue
		public Assignment getRevisionAssignment_1() { return cRevisionAssignment_1; }
		
		//StringValue
		public RuleCall getRevisionStringValueParserRuleCall_1_0() { return cRevisionStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class SubmoduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Submodule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubmoduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.2
		//Submodule:
		//	'submodule' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'submodule' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'submodule'
		public Keyword getSubmoduleKeyword_0() { return cSubmoduleKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class BelongsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.BelongsTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBelongsToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_1_0 = (CrossReference)cModuleAssignment_1.eContents().get(0);
		private final RuleCall cModuleModuleStringValueParserRuleCall_1_0_1 = (RuleCall)cModuleModuleCrossReference_1_0.eContents().get(1);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.2.2
		//BelongsTo:
		//	'belongs-to' module=[Module|StringValue] StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'belongs-to' module=[Module|StringValue] StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'belongs-to'
		public Keyword getBelongsToKeyword_0() { return cBelongsToKeyword_0; }
		
		//module=[Module|StringValue]
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }
		
		//[Module|StringValue]
		public CrossReference getModuleModuleCrossReference_1_0() { return cModuleModuleCrossReference_1_0; }
		
		//StringValue
		public RuleCall getModuleModuleStringValueParserRuleCall_1_0_1() { return cModuleModuleStringValueParserRuleCall_1_0_1; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class TypedefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Typedef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.3
		//Typedef:
		//	'typedef' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class UnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Units");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionStringValueParserRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.3.3
		//Units:
		//	'units' definition=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'units' definition=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'units'
		public Keyword getUnitsKeyword_0() { return cUnitsKeyword_0; }
		
		//definition=StringValue
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }
		
		//StringValue
		public RuleCall getDefinitionStringValueParserRuleCall_1_0() { return cDefinitionStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class DefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Default");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefaultStringValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefaultStringValueStringValueParserRuleCall_1_0 = (RuleCall)cDefaultStringValueAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.3.4
		//Default:
		//	'default' defaultStringValue=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'default' defaultStringValue=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//defaultStringValue=StringValue
		public Assignment getDefaultStringValueAssignment_1() { return cDefaultStringValueAssignment_1; }
		
		//StringValue
		public RuleCall getDefaultStringValueStringValueParserRuleCall_1_0() { return cDefaultStringValueStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRefTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeRefAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.4
		//Type:
		//	'type' typeRef=TypeReference StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' typeRef=TypeReference StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//typeRef=TypeReference
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }
		
		//TypeReference
		public RuleCall getTypeRefTypeReferenceParserRuleCall_1_0() { return cTypeRefTypeReferenceParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBuiltinAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltinBUILTIN_TYPEParserRuleCall_0_0 = (RuleCall)cBuiltinAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cTypeTypedefCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypedefQualifiedTypeNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypedefCrossReference_1_0.eContents().get(1);
		
		//TypeReference:
		//	builtin=BUILTIN_TYPE | type=[Typedef|QualifiedTypeName];
		@Override public ParserRule getRule() { return rule; }
		
		//builtin=BUILTIN_TYPE | type=[Typedef|QualifiedTypeName]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//builtin=BUILTIN_TYPE
		public Assignment getBuiltinAssignment_0() { return cBuiltinAssignment_0; }
		
		//BUILTIN_TYPE
		public RuleCall getBuiltinBUILTIN_TYPEParserRuleCall_0_0() { return cBuiltinBUILTIN_TYPEParserRuleCall_0_0; }
		
		//type=[Typedef|QualifiedTypeName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Typedef|QualifiedTypeName]
		public CrossReference getTypeTypedefCrossReference_1_0() { return cTypeTypedefCrossReference_1_0; }
		
		//QualifiedTypeName
		public RuleCall getTypeTypedefQualifiedTypeNameParserRuleCall_1_0_1() { return cTypeTypedefQualifiedTypeNameParserRuleCall_1_0_1; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.5
		//Container:
		//	'container' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'container' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class MustElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Must");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMustKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintXpathExpressionParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.5.3
		//Must:
		//	'must' constraint=XpathExpression StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'must' constraint=XpathExpression StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'must'
		public Keyword getMustKeyword_0() { return cMustKeyword_0; }
		
		//constraint=XpathExpression
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }
		
		//XpathExpression
		public RuleCall getConstraintXpathExpressionParserRuleCall_1_0() { return cConstraintXpathExpressionParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ErrorMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ErrorMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageStringValueParserRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.5.4.1 
		//ErrorMessage:
		//	'error-message' message=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'error-message' message=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'error-message'
		public Keyword getErrorMessageKeyword_0() { return cErrorMessageKeyword_0; }
		
		//message=StringValue
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//StringValue
		public RuleCall getMessageStringValueParserRuleCall_1_0() { return cMessageStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ErrorAppTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ErrorAppTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorAppTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagStringValueParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.5.4.2
		//ErrorAppTag:
		//	'error-app-tag' tag=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'error-app-tag' tag=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'error-app-tag'
		public Keyword getErrorAppTagKeyword_0() { return cErrorAppTagKeyword_0; }
		
		//tag=StringValue
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//StringValue
		public RuleCall getTagStringValueParserRuleCall_1_0() { return cTagStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class PresenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Presence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionStringValueParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.5.5
		//Presence:
		//	'presence' description=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'presence' description=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'presence'
		public Keyword getPresenceKeyword_0() { return cPresenceKeyword_0; }
		
		//description=StringValue
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_1_0() { return cDescriptionStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class LeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Leaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeafKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.6
		//Leaf:
		//	'leaf' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'leaf' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'leaf'
		public Keyword getLeafKeyword_0() { return cLeafKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Mandatory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIsMandatoryStringValueParserRuleCall_1_0 = (RuleCall)cIsMandatoryAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.6.5
		//Mandatory:
		//	'mandatory' isMandatory=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'mandatory' isMandatory=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }
		
		//isMandatory=StringValue
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }
		
		//StringValue
		public RuleCall getIsMandatoryStringValueParserRuleCall_1_0() { return cIsMandatoryStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class LeafListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.LeafList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeafListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.7
		//LeafList:
		//	'leaf-list' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'leaf-list' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'leaf-list'
		public Keyword getLeafListKeyword_0() { return cLeafListKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class MinElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.MinElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinElementsStringValueParserRuleCall_1_0 = (RuleCall)cMinElementsAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.7.5
		//MinElements:
		//	'min-elements' minElements=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'min-elements' minElements=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'min-elements'
		public Keyword getMinElementsKeyword_0() { return cMinElementsKeyword_0; }
		
		//minElements=StringValue
		public Assignment getMinElementsAssignment_1() { return cMinElementsAssignment_1; }
		
		//StringValue
		public RuleCall getMinElementsStringValueParserRuleCall_1_0() { return cMinElementsStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class MaxElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.MaxElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxElementsStringValueParserRuleCall_1_0 = (RuleCall)cMaxElementsAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.7.6
		//MaxElements:
		//	'max-elements' maxElements=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'max-elements' maxElements=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'max-elements'
		public Keyword getMaxElementsKeyword_0() { return cMaxElementsKeyword_0; }
		
		//maxElements=StringValue
		public Assignment getMaxElementsAssignment_1() { return cMaxElementsAssignment_1; }
		
		//StringValue
		public RuleCall getMaxElementsStringValueParserRuleCall_1_0() { return cMaxElementsStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class OrderedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.OrderedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderedByAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderedByStringValueParserRuleCall_1_0 = (RuleCall)cOrderedByAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.7.7
		//OrderedBy:
		//	'ordered-by' orderedBy=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'ordered-by' orderedBy=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'ordered-by'
		public Keyword getOrderedByKeyword_0() { return cOrderedByKeyword_0; }
		
		//orderedBy=StringValue
		public Assignment getOrderedByAssignment_1() { return cOrderedByAssignment_1; }
		
		//StringValue
		public RuleCall getOrderedByStringValueParserRuleCall_1_0() { return cOrderedByStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.8
		//List:
		//	'list' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'list' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKeyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferencesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferencesKeyReferenceParserRuleCall_2_0 = (RuleCall)cReferencesAssignment_2.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// 7.8.2
		//Key:
		//	{Key} 'key' references+=KeyReference+ StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{Key} 'key' references+=KeyReference+ StatementEnd
		public Group getGroup() { return cGroup; }
		
		//{Key}
		public Action getKeyAction_0() { return cKeyAction_0; }
		
		//'key'
		public Keyword getKeyKeyword_1() { return cKeyKeyword_1; }
		
		//references+=KeyReference+
		public Assignment getReferencesAssignment_2() { return cReferencesAssignment_2; }
		
		//KeyReference
		public RuleCall getReferencesKeyReferenceParserRuleCall_2_0() { return cReferencesKeyReferenceParserRuleCall_2_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_3() { return cStatementEndParserRuleCall_3; }
	}
	public class KeyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.KeyReference");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodeLeafCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodeLeafQNAMEParserRuleCall_0_1 = (RuleCall)cNodeLeafCrossReference_0.eContents().get(1);
		
		//KeyReference:
		//	node=[Leaf|QNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//node=[Leaf|QNAME]
		public Assignment getNodeAssignment() { return cNodeAssignment; }
		
		//[Leaf|QNAME]
		public CrossReference getNodeLeafCrossReference_0() { return cNodeLeafCrossReference_0; }
		
		//QNAME
		public RuleCall getNodeLeafQNAMEParserRuleCall_0_1() { return cNodeLeafQNAMEParserRuleCall_0_1; }
	}
	public class DescendantSchemaNodeIdentifierReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.DescendantSchemaNodeIdentifierReferences");
		private final Assignment cReferencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReferencesDescendantSchemaNodeIdentifierParserRuleCall_0 = (RuleCall)cReferencesAssignment.eContents().get(0);
		
		//fragment DescendantSchemaNodeIdentifierReferences:
		//	references+=DescendantSchemaNodeIdentifier+;
		@Override public ParserRule getRule() { return rule; }
		
		//references+=DescendantSchemaNodeIdentifier+
		public Assignment getReferencesAssignment() { return cReferencesAssignment; }
		
		//DescendantSchemaNodeIdentifier
		public RuleCall getReferencesDescendantSchemaNodeIdentifierParserRuleCall_0() { return cReferencesDescendantSchemaNodeIdentifierParserRuleCall_0; }
	}
	public class UniqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Unique");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUniqueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUniqueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cDescendantSchemaNodeIdentifierReferencesParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStatementEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// 7.8.3
		//Unique:
		//	{Unique} 'unique' DescendantSchemaNodeIdentifierReferences StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unique} 'unique' DescendantSchemaNodeIdentifierReferences StatementEnd
		public Group getGroup() { return cGroup; }
		
		//{Unique}
		public Action getUniqueAction_0() { return cUniqueAction_0; }
		
		//'unique'
		public Keyword getUniqueKeyword_1() { return cUniqueKeyword_1; }
		
		//DescendantSchemaNodeIdentifierReferences
		public RuleCall getDescendantSchemaNodeIdentifierReferencesParserRuleCall_2() { return cDescendantSchemaNodeIdentifierReferencesParserRuleCall_2; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_3() { return cStatementEndParserRuleCall_3; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.9
		//Choice:
		//	'choice' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'choice' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'choice'
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.9.2
		//Case:
		//	'case' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class AnydataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Anydata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnydataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.10
		//Anydata:
		//	'anydata' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'anydata' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'anydata'
		public Keyword getAnydataKeyword_0() { return cAnydataKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class AnyxmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Anyxml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnyxmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.11
		//Anyxml:
		//	'anyxml' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'anyxml' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'anyxml'
		public Keyword getAnyxmlKeyword_0() { return cAnyxmlKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class GroupingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Grouping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.12
		//Grouping:
		//	'grouping' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'grouping' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'grouping'
		public Keyword getGroupingKeyword_0() { return cGroupingKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class UsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Uses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGroupingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGroupingGroupingRefParserRuleCall_1_0 = (RuleCall)cGroupingAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.13
		//Uses:
		//	'uses' grouping=GroupingRef StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'uses' grouping=GroupingRef StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'uses'
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//grouping=GroupingRef
		public Assignment getGroupingAssignment_1() { return cGroupingAssignment_1; }
		
		//GroupingRef
		public RuleCall getGroupingGroupingRefParserRuleCall_1_0() { return cGroupingGroupingRefParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Refine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeSchemaNodeIdentifierParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.13.2
		//Refine:
		//	'refine' node=SchemaNodeIdentifier StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'refine' node=SchemaNodeIdentifier StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'refine'
		public Keyword getRefineKeyword_0() { return cRefineKeyword_0; }
		
		//node=SchemaNodeIdentifier
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }
		
		//SchemaNodeIdentifier
		public RuleCall getNodeSchemaNodeIdentifierParserRuleCall_1_0() { return cNodeSchemaNodeIdentifierParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RpcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Rpc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRpcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.14
		//Rpc:
		//	'rpc' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'rpc' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'rpc'
		public Keyword getRpcKeyword_0() { return cRpcKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringValueParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// input and output should never have name, but we want it to be a subtype of SchemaNode
		//// 7.14.2
		//Input:
		//	{Input} 'input' name=StringValue? StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} 'input' name=StringValue? StatementEnd
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//'input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//name=StringValue?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_2_0() { return cNameStringValueParserRuleCall_2_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_3() { return cStatementEndParserRuleCall_3; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringValueParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// 7.14.3
		//Output:
		//	{Output} 'output' name=StringValue? StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{Output} 'output' name=StringValue? StatementEnd
		public Group getGroup() { return cGroup; }
		
		//{Output}
		public Action getOutputAction_0() { return cOutputAction_0; }
		
		//'output'
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }
		
		//name=StringValue?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_2_0() { return cNameStringValueParserRuleCall_2_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_3() { return cStatementEndParserRuleCall_3; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.15
		//Action:
		//	'action' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class NotificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Notification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.16
		//Notification:
		//	'notification' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'notification' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class AugmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Augment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAugmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSchemaNodeIdentifierParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.17
		//Augment:
		//	'augment' path=SchemaNodeIdentifier StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'augment' path=SchemaNodeIdentifier StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'augment'
		public Keyword getAugmentKeyword_0() { return cAugmentKeyword_0; }
		
		//path=SchemaNodeIdentifier
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//SchemaNodeIdentifier
		public RuleCall getPathSchemaNodeIdentifierParserRuleCall_1_0() { return cPathSchemaNodeIdentifierParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class IdentityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Identity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.18
		//Identity:
		//	'identity' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'identity' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'identity'
		public Keyword getIdentityKeyword_0() { return cIdentityKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Base");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceIdentityCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceIdentityQNAMEParserRuleCall_1_0_1 = (RuleCall)cReferenceIdentityCrossReference_1_0.eContents().get(1);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.18.2
		//Base:
		//	'base' reference=[Identity|QNAME] StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'base' reference=[Identity|QNAME] StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'base'
		public Keyword getBaseKeyword_0() { return cBaseKeyword_0; }
		
		//reference=[Identity|QNAME]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[Identity|QNAME]
		public CrossReference getReferenceIdentityCrossReference_1_0() { return cReferenceIdentityCrossReference_1_0; }
		
		//QNAME
		public RuleCall getReferenceIdentityQNAMEParserRuleCall_1_0_1() { return cReferenceIdentityQNAMEParserRuleCall_1_0_1; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.19
		//Extension:
		//	'extension' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'extension' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.19.2
		//Argument:
		//	'argument' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'argument' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'argument'
		public Keyword getArgumentKeyword_0() { return cArgumentKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class YinElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.YinElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYinElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsYinElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIsYinElementStringValueParserRuleCall_1_0 = (RuleCall)cIsYinElementAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.19.3
		//YinElement:
		//	'yin-element' isYinElement=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'yin-element' isYinElement=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'yin-element'
		public Keyword getYinElementKeyword_0() { return cYinElementKeyword_0; }
		
		//isYinElement=StringValue
		public Assignment getIsYinElementAssignment_1() { return cIsYinElementAssignment_1; }
		
		//StringValue
		public RuleCall getIsYinElementStringValueParserRuleCall_1_0() { return cIsYinElementStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.20.1
		//Feature:
		//	'feature' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'feature' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class IfFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.IfFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionIfFeatureOrExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.20.2
		//IfFeature:
		//	'if-feature' condition=IfFeatureOrExpression StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'if-feature' condition=IfFeatureOrExpression StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'if-feature'
		public Keyword getIfFeatureKeyword_0() { return cIfFeatureKeyword_0; }
		
		//condition=IfFeatureOrExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//IfFeatureOrExpression
		public RuleCall getConditionIfFeatureOrExpressionParserRuleCall_1_0() { return cConditionIfFeatureOrExpressionParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class IfFeatureOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.IfFeatureOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfFeatureAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorOrKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIfFeatureAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//IfFeatureOrExpression Expression:
		//	IfFeatureAndExpression ({BinaryOperator.left=current} operator='or' right=IfFeatureAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IfFeatureAndExpression ({BinaryOperator.left=current} operator='or' right=IfFeatureAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//IfFeatureAndExpression
		public RuleCall getIfFeatureAndExpressionParserRuleCall_0() { return cIfFeatureAndExpressionParserRuleCall_0; }
		
		//({BinaryOperator.left=current} operator='or' right=IfFeatureAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//operator='or'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_1_0() { return cOperatorOrKeyword_1_1_0; }
		
		//right=IfFeatureAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//IfFeatureAndExpression
		public RuleCall getRightIfFeatureAndExpressionParserRuleCall_1_2_0() { return cRightIfFeatureAndExpressionParserRuleCall_1_2_0; }
	}
	public class IfFeatureAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.IfFeatureAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIfFeatureExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAndKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIfFeatureExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//IfFeatureAndExpression Expression:
		//	IfFeatureExpression ({BinaryOperator.left=current} operator='and' right=IfFeatureExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IfFeatureExpression ({BinaryOperator.left=current} operator='and' right=IfFeatureExpression)*
		public Group getGroup() { return cGroup; }
		
		//IfFeatureExpression
		public RuleCall getIfFeatureExpressionParserRuleCall_0() { return cIfFeatureExpressionParserRuleCall_0; }
		
		//({BinaryOperator.left=current} operator='and' right=IfFeatureExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//operator='and'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_1_0() { return cOperatorAndKeyword_1_1_0; }
		
		//right=IfFeatureExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//IfFeatureExpression
		public RuleCall getRightIfFeatureExpressionParserRuleCall_1_2_0() { return cRightIfFeatureExpressionParserRuleCall_1_2_0; }
	}
	public class IfFeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.IfFeatureExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFeatureReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureFeatureQNAMEParserRuleCall_0_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorNotKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetIfFeatureExpressionParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIfFeatureOrExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//IfFeatureExpression Expression:
		//	{FeatureReference} feature=[Feature|QNAME] | {UnaryOperation} operator='not' target=IfFeatureExpression |
		//	'(' IfFeatureOrExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FeatureReference} feature=[Feature|QNAME] | {UnaryOperation} operator='not' target=IfFeatureExpression | '('
		//IfFeatureOrExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FeatureReference} feature=[Feature|QNAME]
		public Group getGroup_0() { return cGroup_0; }
		
		//{FeatureReference}
		public Action getFeatureReferenceAction_0_0() { return cFeatureReferenceAction_0_0; }
		
		//feature=[Feature|QNAME]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//[Feature|QNAME]
		public CrossReference getFeatureFeatureCrossReference_0_1_0() { return cFeatureFeatureCrossReference_0_1_0; }
		
		//QNAME
		public RuleCall getFeatureFeatureQNAMEParserRuleCall_0_1_0_1() { return cFeatureFeatureQNAMEParserRuleCall_0_1_0_1; }
		
		//{UnaryOperation} operator='not' target=IfFeatureExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryOperation}
		public Action getUnaryOperationAction_1_0() { return cUnaryOperationAction_1_0; }
		
		//operator='not'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'not'
		public Keyword getOperatorNotKeyword_1_1_0() { return cOperatorNotKeyword_1_1_0; }
		
		//target=IfFeatureExpression
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//IfFeatureExpression
		public RuleCall getTargetIfFeatureExpressionParserRuleCall_1_2_0() { return cTargetIfFeatureExpressionParserRuleCall_1_2_0; }
		
		//'(' IfFeatureOrExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//IfFeatureOrExpression
		public RuleCall getIfFeatureOrExpressionParserRuleCall_2_1() { return cIfFeatureOrExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class DeviationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Deviation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceSchemaNodeIdentifierParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.20.3
		//Deviation:
		//	'deviation' reference=SchemaNodeIdentifier StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'deviation' reference=SchemaNodeIdentifier StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'deviation'
		public Keyword getDeviationKeyword_0() { return cDeviationKeyword_0; }
		
		//reference=SchemaNodeIdentifier
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//SchemaNodeIdentifier
		public RuleCall getReferenceSchemaNodeIdentifierParserRuleCall_1_0() { return cReferenceSchemaNodeIdentifierParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class DeviateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Deviate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentStringValueParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.20.3.2
		//Deviate:
		//	'deviate' argument=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'deviate' argument=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'deviate'
		public Keyword getDeviateKeyword_0() { return cDeviateKeyword_0; }
		
		//argument=StringValue
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//StringValue
		public RuleCall getArgumentStringValueParserRuleCall_1_0() { return cArgumentStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIsConfigStringValueParserRuleCall_1_0 = (RuleCall)cIsConfigAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// Common Statement
		//// 7.21.1
		//Config:
		//	'config' isConfig=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'config' isConfig=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//isConfig=StringValue
		public Assignment getIsConfigAssignment_1() { return cIsConfigAssignment_1; }
		
		//StringValue
		public RuleCall getIsConfigStringValueParserRuleCall_1_0() { return cIsConfigStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class StatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Status");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentStringValueParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.21.2
		//Status:
		//	'status' argument=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'status' argument=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'status'
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }
		
		//argument=StringValue
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//StringValue
		public RuleCall getArgumentStringValueParserRuleCall_1_0() { return cArgumentStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionStringValueParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.21.3
		//Description:
		//	'description' description=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'description' description=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//description=StringValue
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_1_0() { return cDescriptionStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceStringValueParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.21.4
		//Reference:
		//	'reference' reference=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'reference' reference=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'reference'
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }
		
		//reference=StringValue
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//StringValue
		public RuleCall getReferenceStringValueParserRuleCall_1_0() { return cReferenceStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionXpathExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 7.21.5
		//When:
		//	'when' condition=XpathExpression StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' condition=XpathExpression StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//condition=XpathExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//XpathExpression
		public RuleCall getConditionXpathExpressionParserRuleCall_1_0() { return cConditionXpathExpressionParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionRefinementExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.2.4 
		//Range:
		//	'range' expression=RefinementExpression StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'range' expression=RefinementExpression StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'range'
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//expression=RefinementExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//RefinementExpression
		public RuleCall getExpressionRefinementExpressionParserRuleCall_1_0() { return cExpressionRefinementExpressionParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RefinementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.RefinementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRangeRefinementExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRangeRefinementExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RefinementExpression Expression:
		//	RangeRefinementExpression ({BinaryOperation.left=current} operator='|' right=RangeRefinementExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeRefinementExpression ({BinaryOperation.left=current} operator='|' right=RangeRefinementExpression)*
		public Group getGroup() { return cGroup; }
		
		//RangeRefinementExpression
		public RuleCall getRangeRefinementExpressionParserRuleCall_0() { return cRangeRefinementExpressionParserRuleCall_0; }
		
		//({BinaryOperation.left=current} operator='|' right=RangeRefinementExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }
		
		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }
		
		//right=RangeRefinementExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RangeRefinementExpression
		public RuleCall getRightRangeRefinementExpressionParserRuleCall_1_2_0() { return cRightRangeRefinementExpressionParserRuleCall_1_2_0; }
	}
	public class RangeRefinementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.RangeRefinementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExplicitRefinementExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExplicitRefinementExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RangeRefinementExpression Expression:
		//	ExplicitRefinementExpression ({BinaryOperation.left=current} operator='..' right=ExplicitRefinementExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ExplicitRefinementExpression ({BinaryOperation.left=current} operator='..' right=ExplicitRefinementExpression)?
		public Group getGroup() { return cGroup; }
		
		//ExplicitRefinementExpression
		public RuleCall getExplicitRefinementExpressionParserRuleCall_0() { return cExplicitRefinementExpressionParserRuleCall_0; }
		
		//({BinaryOperation.left=current} operator='..' right=ExplicitRefinementExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperation.left=current}
		public Action getBinaryOperationLeftAction_1_0() { return cBinaryOperationLeftAction_1_0; }
		
		//operator='..'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0() { return cOperatorFullStopFullStopKeyword_1_1_0; }
		
		//right=ExplicitRefinementExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExplicitRefinementExpression
		public RuleCall getRightExplicitRefinementExpressionParserRuleCall_1_2_0() { return cRightExplicitRefinementExpressionParserRuleCall_1_2_0; }
	}
	public class ExplicitRefinementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ExplicitRefinementExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMinKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMaxAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMaxKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ExplicitRefinementExpression Expression:
		//	{Literal} value=NUMBER | {Min} 'min' | {Max} 'max';
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} value=NUMBER | {Min} 'min' | {Max} 'max'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Literal} value=NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		//{Literal}
		public Action getLiteralAction_0_0() { return cLiteralAction_0_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_0_1_0() { return cValueNUMBERTerminalRuleCall_0_1_0; }
		
		//{Min} 'min'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Min}
		public Action getMinAction_1_0() { return cMinAction_1_0; }
		
		//'min'
		public Keyword getMinKeyword_1_1() { return cMinKeyword_1_1; }
		
		//{Max} 'max'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Max}
		public Action getMaxAction_2_0() { return cMaxAction_2_0; }
		
		//'max'
		public Keyword getMaxKeyword_2_1() { return cMaxKeyword_2_1; }
	}
	public class FractionDigitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.FractionDigits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFractionDigitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangeStringValueParserRuleCall_1_0 = (RuleCall)cRangeAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.3.4
		//FractionDigits:
		//	'fraction-digits' range=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'fraction-digits' range=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'fraction-digits'
		public Keyword getFractionDigitsKeyword_0() { return cFractionDigitsKeyword_0; }
		
		//range=StringValue
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }
		
		//StringValue
		public RuleCall getRangeStringValueParserRuleCall_1_0() { return cRangeStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Length");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionRefinementExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.4.4
		//Length:
		//	'length' expression=RefinementExpression StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'length' expression=RefinementExpression StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'length'
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//expression=RefinementExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//RefinementExpression
		public RuleCall getExpressionRefinementExpressionParserRuleCall_1_0() { return cExpressionRefinementExpressionParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegexpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegexpStringValueParserRuleCall_1_0 = (RuleCall)cRegexpAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.4.5
		//Pattern:
		//	'pattern' regexp=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' regexp=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//regexp=StringValue
		public Assignment getRegexpAssignment_1() { return cRegexpAssignment_1; }
		
		//StringValue
		public RuleCall getRegexpStringValueParserRuleCall_1_0() { return cRegexpStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Modifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierStringValueParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.4.5
		//Modifier:
		//	'modifier' modifier=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'modifier' modifier=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'modifier'
		public Keyword getModifierKeyword_0() { return cModifierKeyword_0; }
		
		//modifier=StringValue
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }
		
		//StringValue
		public RuleCall getModifierStringValueParserRuleCall_1_0() { return cModifierStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.6.4
		//Enum:
		//	'enum' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrdinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrdinalStringValueParserRuleCall_1_0 = (RuleCall)cOrdinalAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.6.4.2
		//Value:
		//	'value' ordinal=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'value' ordinal=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//ordinal=StringValue
		public Assignment getOrdinalAssignment_1() { return cOrdinalAssignment_1; }
		
		//StringValue
		public RuleCall getOrdinalStringValueParserRuleCall_1_0() { return cOrdinalStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class BitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Bit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.7.4
		//Bit:
		//	'bit' name=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'bit' name=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'bit'
		public Keyword getBitKeyword_0() { return cBitKeyword_0; }
		
		//name=StringValue
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrdinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrdinalStringValueParserRuleCall_1_0 = (RuleCall)cOrdinalAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.7.4.2
		//Position:
		//	'position' ordinal=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'position' ordinal=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'position'
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }
		
		//ordinal=StringValue
		public Assignment getOrdinalAssignment_1() { return cOrdinalAssignment_1; }
		
		//StringValue
		public RuleCall getOrdinalStringValueParserRuleCall_1_0() { return cOrdinalStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceXpathExpressionParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.9.2
		//Path:
		//	'path' reference=XpathExpression StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'path' reference=XpathExpression StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'path'
		public Keyword getPathKeyword_0() { return cPathKeyword_0; }
		
		//reference=XpathExpression
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//XpathExpression
		public RuleCall getReferenceXpathExpressionParserRuleCall_1_0() { return cReferenceXpathExpressionParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class RequireInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.RequireInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsRequireInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIsRequireInstanceStringValueParserRuleCall_1_0 = (RuleCall)cIsRequireInstanceAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 9.9.3
		//RequireInstance:
		//	'require-instance' isRequireInstance=StringValue StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//'require-instance' isRequireInstance=StringValue StatementEnd
		public Group getGroup() { return cGroup; }
		
		//'require-instance'
		public Keyword getRequireInstanceKeyword_0() { return cRequireInstanceKeyword_0; }
		
		//isRequireInstance=StringValue
		public Assignment getIsRequireInstanceAssignment_1() { return cIsRequireInstanceAssignment_1; }
		
		//StringValue
		public RuleCall getIsRequireInstanceStringValueParserRuleCall_1_0() { return cIsRequireInstanceStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class UnknownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Unknown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExtensionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExtensionExtensionCrossReference_0_0 = (CrossReference)cExtensionAssignment_0.eContents().get(0);
		private final RuleCall cExtensionExtensionEXTENSION_NAMETerminalRuleCall_0_0_1 = (RuleCall)cExtensionExtensionCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStringValueParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cStatementEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Unknown:
		//	extension=[Extension|EXTENSION_NAME] name=StringValue? StatementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//extension=[Extension|EXTENSION_NAME] name=StringValue? StatementEnd
		public Group getGroup() { return cGroup; }
		
		//extension=[Extension|EXTENSION_NAME]
		public Assignment getExtensionAssignment_0() { return cExtensionAssignment_0; }
		
		//[Extension|EXTENSION_NAME]
		public CrossReference getExtensionExtensionCrossReference_0_0() { return cExtensionExtensionCrossReference_0_0; }
		
		//EXTENSION_NAME
		public RuleCall getExtensionExtensionEXTENSION_NAMETerminalRuleCall_0_0_1() { return cExtensionExtensionEXTENSION_NAMETerminalRuleCall_0_0_1; }
		
		//name=StringValue?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StringValue
		public RuleCall getNameStringValueParserRuleCall_1_0() { return cNameStringValueParserRuleCall_1_0; }
		
		//StatementEnd
		public RuleCall getStatementEndParserRuleCall_2() { return cStatementEndParserRuleCall_2; }
	}
	public class DescendantSchemaNodeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.DescendantSchemaNodeIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDescendantRootSchemaNodeIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSchemaNodeIdentifierTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSchemaNodeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSchemaNodeSchemaNodeCrossReference_1_2_0 = (CrossReference)cSchemaNodeAssignment_1_2.eContents().get(0);
		private final RuleCall cSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1 = (RuleCall)cSchemaNodeSchemaNodeCrossReference_1_2_0.eContents().get(1);
		
		//DescendantSchemaNodeIdentifier SchemaNodeIdentifier:
		//	DescendantRootSchemaNodeIdentifier ({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*;
		@Override public ParserRule getRule() { return rule; }
		
		//DescendantRootSchemaNodeIdentifier ({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*
		public Group getGroup() { return cGroup; }
		
		//DescendantRootSchemaNodeIdentifier
		public RuleCall getDescendantRootSchemaNodeIdentifierParserRuleCall_0() { return cDescendantRootSchemaNodeIdentifierParserRuleCall_0; }
		
		//({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SchemaNodeIdentifier.target=current}
		public Action getSchemaNodeIdentifierTargetAction_1_0() { return cSchemaNodeIdentifierTargetAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//schemaNode=[SchemaNode|QNAME]
		public Assignment getSchemaNodeAssignment_1_2() { return cSchemaNodeAssignment_1_2; }
		
		//[SchemaNode|QNAME]
		public CrossReference getSchemaNodeSchemaNodeCrossReference_1_2_0() { return cSchemaNodeSchemaNodeCrossReference_1_2_0; }
		
		//QNAME
		public RuleCall getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1() { return cSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1; }
	}
	public class DescendantRootSchemaNodeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.DescendantRootSchemaNodeIdentifier");
		private final Assignment cSchemaNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSchemaNodeSchemaNodeCrossReference_0 = (CrossReference)cSchemaNodeAssignment.eContents().get(0);
		private final RuleCall cSchemaNodeSchemaNodeQNAMEParserRuleCall_0_1 = (RuleCall)cSchemaNodeSchemaNodeCrossReference_0.eContents().get(1);
		
		//DescendantRootSchemaNodeIdentifier SchemaNodeIdentifier:
		//	schemaNode=[SchemaNode|QNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//schemaNode=[SchemaNode|QNAME]
		public Assignment getSchemaNodeAssignment() { return cSchemaNodeAssignment; }
		
		//[SchemaNode|QNAME]
		public CrossReference getSchemaNodeSchemaNodeCrossReference_0() { return cSchemaNodeSchemaNodeCrossReference_0; }
		
		//QNAME
		public RuleCall getSchemaNodeSchemaNodeQNAMEParserRuleCall_0_1() { return cSchemaNodeSchemaNodeQNAMEParserRuleCall_0_1; }
	}
	public class SchemaNodeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.SchemaNodeIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRootSchemaNodeIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSchemaNodeIdentifierTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSchemaNodeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSchemaNodeSchemaNodeCrossReference_1_2_0 = (CrossReference)cSchemaNodeAssignment_1_2.eContents().get(0);
		private final RuleCall cSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1 = (RuleCall)cSchemaNodeSchemaNodeCrossReference_1_2_0.eContents().get(1);
		
		//SchemaNodeIdentifier:
		//	RootSchemaNodeIdentifier ({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*;
		@Override public ParserRule getRule() { return rule; }
		
		//RootSchemaNodeIdentifier ({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*
		public Group getGroup() { return cGroup; }
		
		//RootSchemaNodeIdentifier
		public RuleCall getRootSchemaNodeIdentifierParserRuleCall_0() { return cRootSchemaNodeIdentifierParserRuleCall_0; }
		
		//({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SchemaNodeIdentifier.target=current}
		public Action getSchemaNodeIdentifierTargetAction_1_0() { return cSchemaNodeIdentifierTargetAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//schemaNode=[SchemaNode|QNAME]
		public Assignment getSchemaNodeAssignment_1_2() { return cSchemaNodeAssignment_1_2; }
		
		//[SchemaNode|QNAME]
		public CrossReference getSchemaNodeSchemaNodeCrossReference_1_2_0() { return cSchemaNodeSchemaNodeCrossReference_1_2_0; }
		
		//QNAME
		public RuleCall getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1() { return cSchemaNodeSchemaNodeQNAMEParserRuleCall_1_2_0_1; }
	}
	public class RootSchemaNodeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.RootSchemaNodeIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbsoluteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbsoluteSolidusKeyword_0_0 = (Keyword)cIsAbsoluteAssignment_0.eContents().get(0);
		private final Assignment cSchemaNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSchemaNodeSchemaNodeCrossReference_1_0 = (CrossReference)cSchemaNodeAssignment_1.eContents().get(0);
		private final RuleCall cSchemaNodeSchemaNodeQNAMEParserRuleCall_1_0_1 = (RuleCall)cSchemaNodeSchemaNodeCrossReference_1_0.eContents().get(1);
		
		//RootSchemaNodeIdentifier SchemaNodeIdentifier:
		//	isAbsolute?='/'? schemaNode=[SchemaNode|QNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//isAbsolute?='/'? schemaNode=[SchemaNode|QNAME]
		public Group getGroup() { return cGroup; }
		
		//isAbsolute?='/'?
		public Assignment getIsAbsoluteAssignment_0() { return cIsAbsoluteAssignment_0; }
		
		//'/'
		public Keyword getIsAbsoluteSolidusKeyword_0_0() { return cIsAbsoluteSolidusKeyword_0_0; }
		
		//schemaNode=[SchemaNode|QNAME]
		public Assignment getSchemaNodeAssignment_1() { return cSchemaNodeAssignment_1; }
		
		//[SchemaNode|QNAME]
		public CrossReference getSchemaNodeSchemaNodeCrossReference_1_0() { return cSchemaNodeSchemaNodeCrossReference_1_0; }
		
		//QNAME
		public RuleCall getSchemaNodeSchemaNodeQNAMEParserRuleCall_1_0_1() { return cSchemaNodeSchemaNodeQNAMEParserRuleCall_1_0_1; }
	}
	public class GroupingRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.GroupingRef");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNodeGroupingCrossReference_0 = (CrossReference)cNodeAssignment.eContents().get(0);
		private final RuleCall cNodeGroupingQNAMEParserRuleCall_0_1 = (RuleCall)cNodeGroupingCrossReference_0.eContents().get(1);
		
		//GroupingRef:
		//	node=[Grouping|QNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//node=[Grouping|QNAME]
		public Assignment getNodeAssignment() { return cNodeAssignment; }
		
		//[Grouping|QNAME]
		public CrossReference getNodeGroupingCrossReference_0() { return cNodeGroupingCrossReference_0; }
		
		//QNAME
		public RuleCall getNodeGroupingQNAMEParserRuleCall_0_1() { return cNodeGroupingQNAMEParserRuleCall_0_1; }
	}
	public class XpathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnparsedXpathAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignLessThanSignLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTextAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cTextAssignment_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cParsedXpathExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////////////////////
		//// Xpath 1.0
		///////////////////////////////////
		//XpathExpression:
		//	{UnparsedXpath} '<<<<' text=STRING '>>>>'
		//	| ParsedXpathExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnparsedXpath} '<<<<' text=STRING '>>>>' | ParsedXpathExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnparsedXpath} '<<<<' text=STRING '>>>>'
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnparsedXpath}
		public Action getUnparsedXpathAction_0_0() { return cUnparsedXpathAction_0_0; }
		
		//'<<<<'
		public Keyword getLessThanSignLessThanSignLessThanSignLessThanSignKeyword_0_1() { return cLessThanSignLessThanSignLessThanSignLessThanSignKeyword_0_1; }
		
		//text=STRING
		public Assignment getTextAssignment_0_2() { return cTextAssignment_0_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_2_0() { return cTextSTRINGTerminalRuleCall_0_2_0; }
		
		//'>>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_3() { return cGreaterThanSignGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0_3; }
		
		//ParsedXpathExpression
		public RuleCall getParsedXpathExpressionParserRuleCall_1() { return cParsedXpathExpressionParserRuleCall_1; }
	}
	public class ParsedXpathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ParsedXpathExpression");
		private final RuleCall cXpathOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParsedXpathExpression XpathExpression:
		//	XpathOrExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathOrExpr
		public RuleCall getXpathOrExprParserRuleCall() { return cXpathOrExprParserRuleCall; }
	}
	public class XpathOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathOrOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorOrKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathOrExpr XpathExpression:
		//	XpathAndExpr ({XpathOrOperation.left=current} operator='or' right=XpathAndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathAndExpr ({XpathOrOperation.left=current} operator='or' right=XpathAndExpr)*
		public Group getGroup() { return cGroup; }
		
		//XpathAndExpr
		public RuleCall getXpathAndExprParserRuleCall_0() { return cXpathAndExprParserRuleCall_0; }
		
		//({XpathOrOperation.left=current} operator='or' right=XpathAndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathOrOperation.left=current}
		public Action getXpathOrOperationLeftAction_1_0() { return cXpathOrOperationLeftAction_1_0; }
		
		//operator='or'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_1_0() { return cOperatorOrKeyword_1_1_0; }
		
		//right=XpathAndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathAndExpr
		public RuleCall getRightXpathAndExprParserRuleCall_1_2_0() { return cRightXpathAndExprParserRuleCall_1_2_0; }
	}
	public class XpathAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathEqualityExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathAndOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAndKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathEqualityExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathAndExpr XpathExpression:
		//	XpathEqualityExpr ({XpathAndOperation.left=current} operator='and' right=XpathEqualityExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathEqualityExpr ({XpathAndOperation.left=current} operator='and' right=XpathEqualityExpr)*
		public Group getGroup() { return cGroup; }
		
		//XpathEqualityExpr
		public RuleCall getXpathEqualityExprParserRuleCall_0() { return cXpathEqualityExprParserRuleCall_0; }
		
		//({XpathAndOperation.left=current} operator='and' right=XpathEqualityExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathAndOperation.left=current}
		public Action getXpathAndOperationLeftAction_1_0() { return cXpathAndOperationLeftAction_1_0; }
		
		//operator='and'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_1_0() { return cOperatorAndKeyword_1_1_0; }
		
		//right=XpathEqualityExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathEqualityExpr
		public RuleCall getRightXpathEqualityExprParserRuleCall_1_2_0() { return cRightXpathEqualityExprParserRuleCall_1_2_0; }
	}
	public class XpathEqualityExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathEqualityExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathEqualityOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathRelationalExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathEqualityExpr XpathExpression:
		//	XpathRelationalExpr ({XpathEqualityOperation.left=current} operator=('=' | '!=') right=XpathRelationalExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathRelationalExpr ({XpathEqualityOperation.left=current} operator=('=' | '!=') right=XpathRelationalExpr)*
		public Group getGroup() { return cGroup; }
		
		//XpathRelationalExpr
		public RuleCall getXpathRelationalExprParserRuleCall_0() { return cXpathRelationalExprParserRuleCall_0; }
		
		//({XpathEqualityOperation.left=current} operator=('=' | '!=') right=XpathRelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathEqualityOperation.left=current}
		public Action getXpathEqualityOperationLeftAction_1_0() { return cXpathEqualityOperationLeftAction_1_0; }
		
		//operator=('=' | '!=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('=' | '!=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=XpathRelationalExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathRelationalExpr
		public RuleCall getRightXpathRelationalExprParserRuleCall_1_2_0() { return cRightXpathRelationalExprParserRuleCall_1_2_0; }
	}
	public class XpathRelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathRelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathAdditiveExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathRelationalOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathAdditiveExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathRelationalExpr XpathExpression:
		//	XpathAdditiveExpr ({XpathRelationalOperation.left=current} operator=('<' | '>' | '<=' | '>=')
		//	right=XpathAdditiveExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathAdditiveExpr ({XpathRelationalOperation.left=current} operator=('<' | '>' | '<=' | '>=') right=XpathAdditiveExpr)*
		public Group getGroup() { return cGroup; }
		
		//XpathAdditiveExpr
		public RuleCall getXpathAdditiveExprParserRuleCall_0() { return cXpathAdditiveExprParserRuleCall_0; }
		
		//({XpathRelationalOperation.left=current} operator=('<' | '>' | '<=' | '>=') right=XpathAdditiveExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathRelationalOperation.left=current}
		public Action getXpathRelationalOperationLeftAction_1_0() { return cXpathRelationalOperationLeftAction_1_0; }
		
		//operator=('<' | '>' | '<=' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<' | '>' | '<=' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_2() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=XpathAdditiveExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathAdditiveExpr
		public RuleCall getRightXpathAdditiveExprParserRuleCall_1_2_0() { return cRightXpathAdditiveExprParserRuleCall_1_2_0; }
	}
	public class XpathAdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathAdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathMultiplicativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathAdditiveOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathMultiplicativeExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathAdditiveExpr XpathExpression:
		//	XpathMultiplicativeExpr ({XpathAdditiveOperation.left=current} operator=('+' | '-') right=XpathMultiplicativeExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathMultiplicativeExpr ({XpathAdditiveOperation.left=current} operator=('+' | '-') right=XpathMultiplicativeExpr)*
		public Group getGroup() { return cGroup; }
		
		//XpathMultiplicativeExpr
		public RuleCall getXpathMultiplicativeExprParserRuleCall_0() { return cXpathMultiplicativeExprParserRuleCall_0; }
		
		//({XpathAdditiveOperation.left=current} operator=('+' | '-') right=XpathMultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathAdditiveOperation.left=current}
		public Action getXpathAdditiveOperationLeftAction_1_0() { return cXpathAdditiveOperationLeftAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right=XpathMultiplicativeExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathMultiplicativeExpr
		public RuleCall getRightXpathMultiplicativeExprParserRuleCall_1_2_0() { return cRightXpathMultiplicativeExprParserRuleCall_1_2_0; }
	}
	public class XpathMultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathMultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathMultiplicativeOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorDivKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorModKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathMultiplicativeExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathMultiplicativeExpr XpathExpression:
		//	XpathUnaryExpr ({XpathMultiplicativeOperation.left=current} operator=('*' | 'div' | 'mod')
		//	right=XpathMultiplicativeExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathUnaryExpr ({XpathMultiplicativeOperation.left=current} operator=('*' | 'div' | 'mod')
		//right=XpathMultiplicativeExpr)?
		public Group getGroup() { return cGroup; }
		
		//XpathUnaryExpr
		public RuleCall getXpathUnaryExprParserRuleCall_0() { return cXpathUnaryExprParserRuleCall_0; }
		
		//({XpathMultiplicativeOperation.left=current} operator=('*' | 'div' | 'mod') right=XpathMultiplicativeExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathMultiplicativeOperation.left=current}
		public Action getXpathMultiplicativeOperationLeftAction_1_0() { return cXpathMultiplicativeOperationLeftAction_1_0; }
		
		//operator=('*' | 'div' | 'mod')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | 'div' | 'mod')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'div'
		public Keyword getOperatorDivKeyword_1_1_0_1() { return cOperatorDivKeyword_1_1_0_1; }
		
		//'mod'
		public Keyword getOperatorModKeyword_1_1_0_2() { return cOperatorModKeyword_1_1_0_2; }
		
		//right=XpathMultiplicativeExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathMultiplicativeExpr
		public RuleCall getRightXpathMultiplicativeExprParserRuleCall_1_2_0() { return cRightXpathMultiplicativeExprParserRuleCall_1_2_0; }
	}
	public class XpathUnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathUnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXpathUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperatorHyphenMinusKeyword_0_1_0 = (Keyword)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cTargetAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTargetXpathUnionExprParserRuleCall_0_2_0 = (RuleCall)cTargetAssignment_0_2.eContents().get(0);
		private final RuleCall cXpathUnionExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XpathUnaryExpr XpathExpression:
		//	{XpathUnaryOperation} operator='-' target=XpathUnionExpr
		//	| XpathUnionExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//{XpathUnaryOperation} operator='-' target=XpathUnionExpr | XpathUnionExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{XpathUnaryOperation} operator='-' target=XpathUnionExpr
		public Group getGroup_0() { return cGroup_0; }
		
		//{XpathUnaryOperation}
		public Action getXpathUnaryOperationAction_0_0() { return cXpathUnaryOperationAction_0_0; }
		
		//operator='-'
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_0_1_0() { return cOperatorHyphenMinusKeyword_0_1_0; }
		
		//target=XpathUnionExpr
		public Assignment getTargetAssignment_0_2() { return cTargetAssignment_0_2; }
		
		//XpathUnionExpr
		public RuleCall getTargetXpathUnionExprParserRuleCall_0_2_0() { return cTargetXpathUnionExprParserRuleCall_0_2_0; }
		
		//XpathUnionExpr
		public RuleCall getXpathUnionExprParserRuleCall_1() { return cXpathUnionExprParserRuleCall_1; }
	}
	public class XpathUnionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathUnionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathPathExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathUnionOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXpathUnionExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XpathUnionExpr XpathExpression:
		//	XpathPathExpr ({XpathUnionOperation.left=current} operator='|' right=XpathUnionExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathPathExpr ({XpathUnionOperation.left=current} operator='|' right=XpathUnionExpr)?
		public Group getGroup() { return cGroup; }
		
		//XpathPathExpr
		public RuleCall getXpathPathExprParserRuleCall_0() { return cXpathPathExprParserRuleCall_0; }
		
		//({XpathUnionOperation.left=current} operator='|' right=XpathUnionExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathUnionOperation.left=current}
		public Action getXpathUnionOperationLeftAction_1_0() { return cXpathUnionOperationLeftAction_1_0; }
		
		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }
		
		//right=XpathUnionExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XpathUnionExpr
		public RuleCall getRightXpathUnionExprParserRuleCall_1_2_0() { return cRightXpathUnionExprParserRuleCall_1_2_0; }
	}
	public class XpathPathExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathPathExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathFilterExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathLocationTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cIsDescendantsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cIsDescendantsSolidusKeyword_1_2_0_0 = (Keyword)cIsDescendantsAssignment_1_2_0.eContents().get(0);
		private final Assignment cStepAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStepXpathStepParserRuleCall_1_3_0 = (RuleCall)cStepAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Action cXpathFilterTargetAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cPredicateAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cPredicateXpathExpressionParserRuleCall_1_4_2_0 = (RuleCall)cPredicateAssignment_1_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4_3 = (Keyword)cGroup_1_4.eContents().get(3);
		
		//XpathPathExpr XpathExpression:
		//	XpathFilterExpr ({XpathLocation.target=current} '/' -> (isDescendants?='/')? step=XpathStep
		//	({XpathFilter.target=current} '[' predicate=XpathExpression ']')*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathFilterExpr ({XpathLocation.target=current} '/' -> (isDescendants?='/')? step=XpathStep
		//({XpathFilter.target=current} '[' predicate=XpathExpression ']')*)*
		public Group getGroup() { return cGroup; }
		
		//XpathFilterExpr
		public RuleCall getXpathFilterExprParserRuleCall_0() { return cXpathFilterExprParserRuleCall_0; }
		
		//({XpathLocation.target=current} '/' -> (isDescendants?='/')? step=XpathStep ({XpathFilter.target=current} '['
		//predicate=XpathExpression ']')*)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathLocation.target=current}
		public Action getXpathLocationTargetAction_1_0() { return cXpathLocationTargetAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//-> (isDescendants?='/')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//isDescendants?='/'
		public Assignment getIsDescendantsAssignment_1_2_0() { return cIsDescendantsAssignment_1_2_0; }
		
		//'/'
		public Keyword getIsDescendantsSolidusKeyword_1_2_0_0() { return cIsDescendantsSolidusKeyword_1_2_0_0; }
		
		//step=XpathStep
		public Assignment getStepAssignment_1_3() { return cStepAssignment_1_3; }
		
		//XpathStep
		public RuleCall getStepXpathStepParserRuleCall_1_3_0() { return cStepXpathStepParserRuleCall_1_3_0; }
		
		//({XpathFilter.target=current} '[' predicate=XpathExpression ']')*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{XpathFilter.target=current}
		public Action getXpathFilterTargetAction_1_4_0() { return cXpathFilterTargetAction_1_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_4_1() { return cLeftSquareBracketKeyword_1_4_1; }
		
		//predicate=XpathExpression
		public Assignment getPredicateAssignment_1_4_2() { return cPredicateAssignment_1_4_2; }
		
		//XpathExpression
		public RuleCall getPredicateXpathExpressionParserRuleCall_1_4_2_0() { return cPredicateXpathExpressionParserRuleCall_1_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4_3() { return cRightSquareBracketKeyword_1_4_3; }
	}
	public class XpathFilterExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathFilterExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXpathPrimaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXpathFilterTargetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPredicateAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPredicateXpathExpressionParserRuleCall_1_2_0 = (RuleCall)cPredicateAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//XpathFilterExpr XpathExpression:
		//	XpathPrimaryExpr ({XpathFilter.target=current} '[' predicate=XpathExpression ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//XpathPrimaryExpr ({XpathFilter.target=current} '[' predicate=XpathExpression ']')*
		public Group getGroup() { return cGroup; }
		
		//XpathPrimaryExpr
		public RuleCall getXpathPrimaryExprParserRuleCall_0() { return cXpathPrimaryExprParserRuleCall_0; }
		
		//({XpathFilter.target=current} '[' predicate=XpathExpression ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathFilter.target=current}
		public Action getXpathFilterTargetAction_1_0() { return cXpathFilterTargetAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//predicate=XpathExpression
		public Assignment getPredicateAssignment_1_2() { return cPredicateAssignment_1_2; }
		
		//XpathExpression
		public RuleCall getPredicateXpathExpressionParserRuleCall_1_2_0() { return cPredicateXpathExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class XpathPrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathPrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXpathVariableReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameQNAMEParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cXpathExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cXpathStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cXpathNumberLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cXpathFunctionCallAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameQNAMEParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Assignment cArgsAssignment_4_3_0 = (Assignment)cGroup_4_3.eContents().get(0);
		private final RuleCall cArgsXpathExpressionParserRuleCall_4_3_0_0 = (RuleCall)cArgsAssignment_4_3_0.eContents().get(0);
		private final Group cGroup_4_3_1 = (Group)cGroup_4_3.eContents().get(1);
		private final Keyword cCommaKeyword_4_3_1_0 = (Keyword)cGroup_4_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_4_3_1_1 = (Assignment)cGroup_4_3_1.eContents().get(1);
		private final RuleCall cArgsXpathExpressionParserRuleCall_4_3_1_1_0 = (RuleCall)cArgsAssignment_4_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRelativePathAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cStepAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStepXpathStepParserRuleCall_5_1_0 = (RuleCall)cStepAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cAbsolutePathAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cSolidusKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cIsDescendantsAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final Keyword cIsDescendantsSolidusKeyword_6_2_0_0 = (Keyword)cIsDescendantsAssignment_6_2_0.eContents().get(0);
		private final Assignment cStepAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cStepXpathStepParserRuleCall_6_3_0 = (RuleCall)cStepAssignment_6_3.eContents().get(0);
		
		//XpathPrimaryExpr XpathExpression:
		//	{XpathVariableReference} '$' name=QNAME
		//	| '(' XpathExpression ')'
		//	| {XpathStringLiteral} value=STRING
		//	| {XpathNumberLiteral} value=NUMBER
		//	| {XpathFunctionCall} name=QNAME '(' (args+=XpathExpression (',' args+=XpathExpression)*)? ')'
		//	| {RelativePath} step=XpathStep
		//	| {AbsolutePath} '/' -> (isDescendants?='/')? -> step=XpathStep?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XpathVariableReference} '$' name=QNAME | '(' XpathExpression ')' | {XpathStringLiteral} value=STRING |
		//{XpathNumberLiteral} value=NUMBER | {XpathFunctionCall} name=QNAME '(' (args+=XpathExpression (','
		//args+=XpathExpression)*)? ')' | {RelativePath} step=XpathStep | {AbsolutePath} '/' -> (isDescendants?='/')? ->
		//step=XpathStep?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{XpathVariableReference} '$' name=QNAME
		public Group getGroup_0() { return cGroup_0; }
		
		//{XpathVariableReference}
		public Action getXpathVariableReferenceAction_0_0() { return cXpathVariableReferenceAction_0_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_0_1() { return cDollarSignKeyword_0_1; }
		
		//name=QNAME
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//QNAME
		public RuleCall getNameQNAMEParserRuleCall_0_2_0() { return cNameQNAMEParserRuleCall_0_2_0; }
		
		//'(' XpathExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//XpathExpression
		public RuleCall getXpathExpressionParserRuleCall_1_1() { return cXpathExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//{XpathStringLiteral} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{XpathStringLiteral}
		public Action getXpathStringLiteralAction_2_0() { return cXpathStringLiteralAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{XpathNumberLiteral} value=NUMBER
		public Group getGroup_3() { return cGroup_3; }
		
		//{XpathNumberLiteral}
		public Action getXpathNumberLiteralAction_3_0() { return cXpathNumberLiteralAction_3_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_3_1_0() { return cValueNUMBERTerminalRuleCall_3_1_0; }
		
		//{XpathFunctionCall} name=QNAME '(' (args+=XpathExpression (',' args+=XpathExpression)*)? ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{XpathFunctionCall}
		public Action getXpathFunctionCallAction_4_0() { return cXpathFunctionCallAction_4_0; }
		
		//name=QNAME
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//QNAME
		public RuleCall getNameQNAMEParserRuleCall_4_1_0() { return cNameQNAMEParserRuleCall_4_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//(args+=XpathExpression (',' args+=XpathExpression)*)?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//args+=XpathExpression
		public Assignment getArgsAssignment_4_3_0() { return cArgsAssignment_4_3_0; }
		
		//XpathExpression
		public RuleCall getArgsXpathExpressionParserRuleCall_4_3_0_0() { return cArgsXpathExpressionParserRuleCall_4_3_0_0; }
		
		//(',' args+=XpathExpression)*
		public Group getGroup_4_3_1() { return cGroup_4_3_1; }
		
		//','
		public Keyword getCommaKeyword_4_3_1_0() { return cCommaKeyword_4_3_1_0; }
		
		//args+=XpathExpression
		public Assignment getArgsAssignment_4_3_1_1() { return cArgsAssignment_4_3_1_1; }
		
		//XpathExpression
		public RuleCall getArgsXpathExpressionParserRuleCall_4_3_1_1_0() { return cArgsXpathExpressionParserRuleCall_4_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{RelativePath} step=XpathStep
		public Group getGroup_5() { return cGroup_5; }
		
		//{RelativePath}
		public Action getRelativePathAction_5_0() { return cRelativePathAction_5_0; }
		
		//step=XpathStep
		public Assignment getStepAssignment_5_1() { return cStepAssignment_5_1; }
		
		//XpathStep
		public RuleCall getStepXpathStepParserRuleCall_5_1_0() { return cStepXpathStepParserRuleCall_5_1_0; }
		
		//{AbsolutePath} '/' -> (isDescendants?='/')? -> step=XpathStep?
		public Group getGroup_6() { return cGroup_6; }
		
		//{AbsolutePath}
		public Action getAbsolutePathAction_6_0() { return cAbsolutePathAction_6_0; }
		
		//'/'
		public Keyword getSolidusKeyword_6_1() { return cSolidusKeyword_6_1; }
		
		//-> (isDescendants?='/')?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//isDescendants?='/'
		public Assignment getIsDescendantsAssignment_6_2_0() { return cIsDescendantsAssignment_6_2_0; }
		
		//'/'
		public Keyword getIsDescendantsSolidusKeyword_6_2_0_0() { return cIsDescendantsSolidusKeyword_6_2_0_0; }
		
		//-> step=XpathStep?
		public Assignment getStepAssignment_6_3() { return cStepAssignment_6_3; }
		
		//XpathStep
		public RuleCall getStepXpathStepParserRuleCall_6_3_0() { return cStepXpathStepParserRuleCall_6_3_0; }
	}
	public class XpathStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCurrentRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cRefSchemaNodeCrossReference_0_1_0 = (CrossReference)cRefAssignment_0_1.eContents().get(0);
		private final RuleCall cRefSchemaNodeDotParserRuleCall_0_1_0_1 = (RuleCall)cRefSchemaNodeCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParentRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefSchemaNodeCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefSchemaNodeDotDotParserRuleCall_1_1_0_1 = (RuleCall)cRefSchemaNodeCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAbbrevAttributeStepAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttributeNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAttributeNameXpathIDOrKwParserRuleCall_2_2_0 = (RuleCall)cAttributeNameAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cAxisAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cAxisXpathAxisNameParserRuleCall_3_0_0_0 = (RuleCall)cAxisAssignment_3_0_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Keyword cColonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cNodeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNodeXpathNodeTestParserRuleCall_3_1_0 = (RuleCall)cNodeAssignment_3_1.eContents().get(0);
		
		//XpathStep:
		//	{CurrentRef} ref=[SchemaNode|Dot] | {ParentRef} ref=[SchemaNode|DotDot] | {AbbrevAttributeStep} '@'
		//	attributeName=XpathIDOrKw | (axis=XpathAxisName ':' ':')? node=XpathNodeTest;
		@Override public ParserRule getRule() { return rule; }
		
		//{CurrentRef} ref=[SchemaNode|Dot] | {ParentRef} ref=[SchemaNode|DotDot] | {AbbrevAttributeStep} '@'
		//attributeName=XpathIDOrKw | (axis=XpathAxisName ':' ':')? node=XpathNodeTest
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CurrentRef} ref=[SchemaNode|Dot]
		public Group getGroup_0() { return cGroup_0; }
		
		//{CurrentRef}
		public Action getCurrentRefAction_0_0() { return cCurrentRefAction_0_0; }
		
		//ref=[SchemaNode|Dot]
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//[SchemaNode|Dot]
		public CrossReference getRefSchemaNodeCrossReference_0_1_0() { return cRefSchemaNodeCrossReference_0_1_0; }
		
		//Dot
		public RuleCall getRefSchemaNodeDotParserRuleCall_0_1_0_1() { return cRefSchemaNodeDotParserRuleCall_0_1_0_1; }
		
		//{ParentRef} ref=[SchemaNode|DotDot]
		public Group getGroup_1() { return cGroup_1; }
		
		//{ParentRef}
		public Action getParentRefAction_1_0() { return cParentRefAction_1_0; }
		
		//ref=[SchemaNode|DotDot]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[SchemaNode|DotDot]
		public CrossReference getRefSchemaNodeCrossReference_1_1_0() { return cRefSchemaNodeCrossReference_1_1_0; }
		
		//DotDot
		public RuleCall getRefSchemaNodeDotDotParserRuleCall_1_1_0_1() { return cRefSchemaNodeDotDotParserRuleCall_1_1_0_1; }
		
		//{AbbrevAttributeStep} '@' attributeName=XpathIDOrKw
		public Group getGroup_2() { return cGroup_2; }
		
		//{AbbrevAttributeStep}
		public Action getAbbrevAttributeStepAction_2_0() { return cAbbrevAttributeStepAction_2_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2_1() { return cCommercialAtKeyword_2_1; }
		
		//attributeName=XpathIDOrKw
		public Assignment getAttributeNameAssignment_2_2() { return cAttributeNameAssignment_2_2; }
		
		//XpathIDOrKw
		public RuleCall getAttributeNameXpathIDOrKwParserRuleCall_2_2_0() { return cAttributeNameXpathIDOrKwParserRuleCall_2_2_0; }
		
		//(axis=XpathAxisName ':' ':')? node=XpathNodeTest
		public Group getGroup_3() { return cGroup_3; }
		
		//(axis=XpathAxisName ':' ':')?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//axis=XpathAxisName
		public Assignment getAxisAssignment_3_0_0() { return cAxisAssignment_3_0_0; }
		
		//XpathAxisName
		public RuleCall getAxisXpathAxisNameParserRuleCall_3_0_0_0() { return cAxisXpathAxisNameParserRuleCall_3_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//':'
		public Keyword getColonKeyword_3_0_2() { return cColonKeyword_3_0_2; }
		
		//node=XpathNodeTest
		public Assignment getNodeAssignment_3_1() { return cNodeAssignment_3_1; }
		
		//XpathNodeTest
		public RuleCall getNodeXpathNodeTestParserRuleCall_3_1_0() { return cNodeXpathNodeTestParserRuleCall_3_1_0; }
	}
	public class DotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.Dot");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//Dot:
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'.'
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class DotDotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.DotDot");
		private final Keyword cFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//DotDot:
		//	'..';
		@Override public ParserRule getRule() { return rule; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword() { return cFullStopFullStopKeyword; }
	}
	public class XpathNodeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathNodeTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXpathNameTestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cXpathNodeTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameXpathNodeTypeParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cProcessingInstructionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cProcessingInstructionKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInstructionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cInstructionSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cInstructionAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//XpathNodeTest:
		//	XpathNameTest
		//	| {XpathNodeType} name=XpathNodeType '(' ')'
		//	| {ProcessingInstruction} 'processing-instruction' '(' instruction=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//XpathNameTest | {XpathNodeType} name=XpathNodeType '(' ')' | {ProcessingInstruction} 'processing-instruction' '('
		//instruction=STRING ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XpathNameTest
		public RuleCall getXpathNameTestParserRuleCall_0() { return cXpathNameTestParserRuleCall_0; }
		
		//{XpathNodeType} name=XpathNodeType '(' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{XpathNodeType}
		public Action getXpathNodeTypeAction_1_0() { return cXpathNodeTypeAction_1_0; }
		
		//name=XpathNodeType
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//XpathNodeType
		public RuleCall getNameXpathNodeTypeParserRuleCall_1_1_0() { return cNameXpathNodeTypeParserRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//{ProcessingInstruction} 'processing-instruction' '(' instruction=STRING ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ProcessingInstruction}
		public Action getProcessingInstructionAction_2_0() { return cProcessingInstructionAction_2_0; }
		
		//'processing-instruction'
		public Keyword getProcessingInstructionKeyword_2_1() { return cProcessingInstructionKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//instruction=STRING
		public Assignment getInstructionAssignment_2_3() { return cInstructionAssignment_2_3; }
		
		//STRING
		public RuleCall getInstructionSTRINGTerminalRuleCall_2_3_0() { return cInstructionSTRINGTerminalRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	public class XpathNameTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathNameTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_0_0_0 = (RuleCall)cPrefixAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefSchemaNodeCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefSchemaNodeXpathIDOrKwParserRuleCall_1_0_1 = (RuleCall)cRefSchemaNodeCrossReference_1_0.eContents().get(1);
		
		//XpathNameTest:
		//	(prefix=ID ':')? ref=[SchemaNode|XpathIDOrKw];
		@Override public ParserRule getRule() { return rule; }
		
		//(prefix=ID ':')? ref=[SchemaNode|XpathIDOrKw]
		public Group getGroup() { return cGroup; }
		
		//(prefix=ID ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_0_0() { return cPrefixAssignment_0_0; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_0_0_0() { return cPrefixIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//ref=[SchemaNode|XpathIDOrKw]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[SchemaNode|XpathIDOrKw]
		public CrossReference getRefSchemaNodeCrossReference_1_0() { return cRefSchemaNodeCrossReference_1_0; }
		
		//XpathIDOrKw
		public RuleCall getRefSchemaNodeXpathIDOrKwParserRuleCall_1_0_1() { return cRefSchemaNodeXpathIDOrKwParserRuleCall_1_0_1; }
	}
	public class XpathNodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathNodeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNodeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//XpathNodeType:
		//	'comment'
		//	| 'text'
		//	| 'node';
		@Override public ParserRule getRule() { return rule; }
		
		//'comment' | 'text' | 'node'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'comment'
		public Keyword getCommentKeyword_0() { return cCommentKeyword_0; }
		
		//'text'
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//'node'
		public Keyword getNodeKeyword_2() { return cNodeKeyword_2; }
	}
	public class XpathAxisNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathAxisName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAncestorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAncestorOrSelfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAttributeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cChildKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDescendantKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDescendantOrSelfKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFollowingKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFollowingSiblingKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNamespaceKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cParentKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPrecedingKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPrecedingSiblingKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSelfKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//XpathAxisName:
		//	'ancestor'
		//	| 'ancestor-or-self'
		//	| 'attribute'
		//	| 'child'
		//	| 'descendant'
		//	| 'descendant-or-self'
		//	| 'following'
		//	| 'following-sibling'
		//	| 'namespace'
		//	| 'parent'
		//	| 'preceding'
		//	| 'preceding-sibling'
		//	| 'self';
		@Override public ParserRule getRule() { return rule; }
		
		//'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'following' |
		//'following-sibling' | 'namespace' | 'parent' | 'preceding' | 'preceding-sibling' | 'self'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ancestor'
		public Keyword getAncestorKeyword_0() { return cAncestorKeyword_0; }
		
		//'ancestor-or-self'
		public Keyword getAncestorOrSelfKeyword_1() { return cAncestorOrSelfKeyword_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_2() { return cAttributeKeyword_2; }
		
		//'child'
		public Keyword getChildKeyword_3() { return cChildKeyword_3; }
		
		//'descendant'
		public Keyword getDescendantKeyword_4() { return cDescendantKeyword_4; }
		
		//'descendant-or-self'
		public Keyword getDescendantOrSelfKeyword_5() { return cDescendantOrSelfKeyword_5; }
		
		//'following'
		public Keyword getFollowingKeyword_6() { return cFollowingKeyword_6; }
		
		//'following-sibling'
		public Keyword getFollowingSiblingKeyword_7() { return cFollowingSiblingKeyword_7; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_8() { return cNamespaceKeyword_8; }
		
		//'parent'
		public Keyword getParentKeyword_9() { return cParentKeyword_9; }
		
		//'preceding'
		public Keyword getPrecedingKeyword_10() { return cPrecedingKeyword_10; }
		
		//'preceding-sibling'
		public Keyword getPrecedingSiblingKeyword_11() { return cPrecedingSiblingKeyword_11; }
		
		//'self'
		public Keyword getSelfKeyword_12() { return cSelfKeyword_12; }
	}
	public class XpathIDOrKwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.XpathIDOrKw");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cDivKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAndKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOrKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cModKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final RuleCall cXpathAxisNameParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXpathNodeTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Keyword cAsteriskKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//XpathIDOrKw:
		//	ID | 'div' | 'and' | 'or' | 'mod' | XpathAxisName | XpathNodeType | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | 'div' | 'and' | 'or' | 'mod' | XpathAxisName | XpathNodeType | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'div'
		public Keyword getDivKeyword_1() { return cDivKeyword_1; }
		
		//'and'
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }
		
		//'or'
		public Keyword getOrKeyword_3() { return cOrKeyword_3; }
		
		//'mod'
		public Keyword getModKeyword_4() { return cModKeyword_4; }
		
		//XpathAxisName
		public RuleCall getXpathAxisNameParserRuleCall_5() { return cXpathAxisNameParserRuleCall_5; }
		
		//XpathNodeType
		public RuleCall getXpathNodeTypeParserRuleCall_6() { return cXpathNodeTypeParserRuleCall_6; }
		
		//'*'
		public Keyword getAsteriskKeyword_7() { return cAsteriskKeyword_7; }
	}
	public class QNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.QNAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIdOrKwParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIdOrKwParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///////////////////////////////////
		///////////////////////////////////
		///////////////////////////////////
		///////////////////////////////////
		///////////////////////////////////
		///////////////////////////////////
		///////////////////////////////////
		//// Leafref path
		//QNAME:
		//	(IdOrKw ':')? IdOrKw;
		@Override public ParserRule getRule() { return rule; }
		
		//(IdOrKw ':')? IdOrKw
		public Group getGroup() { return cGroup; }
		
		//(IdOrKw ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//IdOrKw
		public RuleCall getIdOrKwParserRuleCall_0_0() { return cIdOrKwParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//IdOrKw
		public RuleCall getIdOrKwParserRuleCall_1() { return cIdOrKwParserRuleCall_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.StringValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringValue:
		//	STRING+;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING+
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class IdOrKwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.IdOrKw");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBUILTIN_TYPEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKEYWORDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IdOrKw:
		//	ID | BUILTIN_TYPE | KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | BUILTIN_TYPE | KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//BUILTIN_TYPE
		public RuleCall getBUILTIN_TYPEParserRuleCall_1() { return cBUILTIN_TYPEParserRuleCall_1; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_2() { return cKEYWORDParserRuleCall_2; }
	}
	public class QualifiedTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.QualifiedTypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cKEYWORDParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cKEYWORDParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//QualifiedTypeName:
		//	((ID | KEYWORD) ':')? (ID | KEYWORD);
		@Override public ParserRule getRule() { return rule; }
		
		//((ID | KEYWORD) ':')? (ID | KEYWORD)
		public Group getGroup() { return cGroup; }
		
		//((ID | KEYWORD) ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//ID | KEYWORD
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0_0() { return cIDTerminalRuleCall_0_0_0; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_0_0_1() { return cKEYWORDParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//ID | KEYWORD
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_1_1() { return cKEYWORDParserRuleCall_1_1; }
	}
	public class BUILTIN_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.BUILTIN_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBinaryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBitsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDecimal64Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEmptyKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEnumerationKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIdentityrefKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cInstanceIdentifierKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInt8Keyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cInt16Keyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cInt32Keyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cInt64Keyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLeafrefKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cStringKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cUint8Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cUint16Keyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUint32Keyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUint64Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cUnionKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		
		//BUILTIN_TYPE:
		//	'binary' |
		//	'bits' |
		//	'boolean' |
		//	'decimal64' |
		//	'empty' |
		//	'enumeration' |
		//	'identityref' |
		//	'instance-identifier' |
		//	'int8' |
		//	'int16' |
		//	'int32' |
		//	'int64' |
		//	'leafref' |
		//	'string' |
		//	'uint8' |
		//	'uint16' |
		//	'uint32' |
		//	'uint64' |
		//	'union';
		@Override public ParserRule getRule() { return rule; }
		
		//'binary' | 'bits' | 'boolean' | 'decimal64' | 'empty' | 'enumeration' | 'identityref' | 'instance-identifier' | 'int8' |
		//'int16' | 'int32' | 'int64' | 'leafref' | 'string' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'union'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'binary'
		public Keyword getBinaryKeyword_0() { return cBinaryKeyword_0; }
		
		//'bits'
		public Keyword getBitsKeyword_1() { return cBitsKeyword_1; }
		
		//'boolean'
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//'decimal64'
		public Keyword getDecimal64Keyword_3() { return cDecimal64Keyword_3; }
		
		//'empty'
		public Keyword getEmptyKeyword_4() { return cEmptyKeyword_4; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_5() { return cEnumerationKeyword_5; }
		
		//'identityref'
		public Keyword getIdentityrefKeyword_6() { return cIdentityrefKeyword_6; }
		
		//'instance-identifier'
		public Keyword getInstanceIdentifierKeyword_7() { return cInstanceIdentifierKeyword_7; }
		
		//'int8'
		public Keyword getInt8Keyword_8() { return cInt8Keyword_8; }
		
		//'int16'
		public Keyword getInt16Keyword_9() { return cInt16Keyword_9; }
		
		//'int32'
		public Keyword getInt32Keyword_10() { return cInt32Keyword_10; }
		
		//'int64'
		public Keyword getInt64Keyword_11() { return cInt64Keyword_11; }
		
		//'leafref'
		public Keyword getLeafrefKeyword_12() { return cLeafrefKeyword_12; }
		
		//'string'
		public Keyword getStringKeyword_13() { return cStringKeyword_13; }
		
		//'uint8'
		public Keyword getUint8Keyword_14() { return cUint8Keyword_14; }
		
		//'uint16'
		public Keyword getUint16Keyword_15() { return cUint16Keyword_15; }
		
		//'uint32'
		public Keyword getUint32Keyword_16() { return cUint32Keyword_16; }
		
		//'uint64'
		public Keyword getUint64Keyword_17() { return cUint64Keyword_17; }
		
		//'union'
		public Keyword getUnionKeyword_18() { return cUnionKeyword_18; }
	}
	public class KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTATEMENT_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAddKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCurrentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDeleteKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDeprecatedKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFalseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMaxKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMinKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cNotSupportedKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cObsoleteKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cReplaceKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSystemKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTrueKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cUnboundedKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cUserKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//KEYWORD:
		//	STATEMENT_KEYWORD
		//	// other keywords
		//	| 'add'
		//	| 'current'
		//	| 'delete'
		//	| 'deprecated'
		//	| 'false'
		//	| 'max'
		//	| 'min'
		//	| 'not-supported'
		//	| 'obsolete'
		//	| 'replace'
		//	| 'system'
		//	| 'true'
		//	| 'unbounded'
		//	| 'user';
		@Override public ParserRule getRule() { return rule; }
		
		//STATEMENT_KEYWORD // other keywords
		//| 'add' | 'current' | 'delete' | 'deprecated' | 'false' | 'max' | 'min' | 'not-supported' | 'obsolete' | 'replace' |
		//'system' | 'true' | 'unbounded' | 'user'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STATEMENT_KEYWORD
		public RuleCall getSTATEMENT_KEYWORDParserRuleCall_0() { return cSTATEMENT_KEYWORDParserRuleCall_0; }
		
		//'add'
		public Keyword getAddKeyword_1() { return cAddKeyword_1; }
		
		//'current'
		public Keyword getCurrentKeyword_2() { return cCurrentKeyword_2; }
		
		//'delete'
		public Keyword getDeleteKeyword_3() { return cDeleteKeyword_3; }
		
		//'deprecated'
		public Keyword getDeprecatedKeyword_4() { return cDeprecatedKeyword_4; }
		
		//'false'
		public Keyword getFalseKeyword_5() { return cFalseKeyword_5; }
		
		//'max'
		public Keyword getMaxKeyword_6() { return cMaxKeyword_6; }
		
		//'min'
		public Keyword getMinKeyword_7() { return cMinKeyword_7; }
		
		//'not-supported'
		public Keyword getNotSupportedKeyword_8() { return cNotSupportedKeyword_8; }
		
		//'obsolete'
		public Keyword getObsoleteKeyword_9() { return cObsoleteKeyword_9; }
		
		//'replace'
		public Keyword getReplaceKeyword_10() { return cReplaceKeyword_10; }
		
		//'system'
		public Keyword getSystemKeyword_11() { return cSystemKeyword_11; }
		
		//'true'
		public Keyword getTrueKeyword_12() { return cTrueKeyword_12; }
		
		//'unbounded'
		public Keyword getUnboundedKeyword_13() { return cUnboundedKeyword_13; }
		
		//'user'
		public Keyword getUserKeyword_14() { return cUserKeyword_14; }
	}
	public class STATEMENT_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.STATEMENT_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAnydataKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAnyxmlKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cArgumentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAugmentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBaseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBelongsToKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBitKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCaseKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cChoiceKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cConfigKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cContactKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cContainerKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDefaultKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDescriptionKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cEnumKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cErrorAppTagKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cErrorMessageKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cExtensionKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cDeviationKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cDeviateKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cFeatureKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cFractionDigitsKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cGroupingKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cIdentityKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cIfFeatureKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cImportKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cIncludeKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cInputKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cKeyKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cLeafKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cLeafListKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cLengthKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cListKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cMandatoryKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cMaxElementsKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cMinElementsKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cModifierKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cModuleKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cMustKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cNamespaceKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cNotificationKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cOrderedByKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cOrganizationKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cOutputKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cPathKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cPatternKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cPositionKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cPrefixKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cPresenceKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cRangeKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cReferenceKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cRefineKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cRequireInstanceKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cRevisionKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cRevisionDateKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cRpcKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cStatusKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cSubmoduleKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cTypeKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cTypedefKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cUniqueKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cUnitsKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cUsesKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cValueKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cWhenKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cYangVersionKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cYinElementKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		
		//STATEMENT_KEYWORD:
		//	'action'
		//	| 'anydata'
		//	| 'anyxml'
		//	| 'argument'
		//	| 'augment'
		//	| 'base'
		//	| 'belongs-to'
		//	| 'bit'
		//	| 'case'
		//	| 'choice'
		//	| 'config'
		//	| 'contact'
		//	| 'container'
		//	| 'default'
		//	| 'description'
		//	| 'enum'
		//	| 'error-app-tag'
		//	| 'error-message'
		//	| 'extension'
		//	| 'deviation'
		//	| 'deviate'
		//	| 'feature'
		//	| 'fraction-digits'
		//	| 'grouping'
		//	| 'identity'
		//	| 'if-feature'
		//	| 'import'
		//	| 'include'
		//	| 'input'
		//	| 'key'
		//	| 'leaf'
		//	| 'leaf-list'
		//	| 'length'
		//	| 'list'
		//	| 'mandatory'
		//	| 'max-elements'
		//	| 'min-elements'
		//	| 'modifier'
		//	| 'module'
		//	| 'must'
		//	| 'namespace'
		//	| 'notification'
		//	| 'ordered-by'
		//	| 'organization'
		//	| 'output'
		//	| 'path'
		//	| 'pattern'
		//	| 'position'
		//	| 'prefix'
		//	| 'presence'
		//	| 'range'
		//	| 'reference'
		//	| 'refine'
		//	| 'require-instance'
		//	| 'revision'
		//	| 'revision-date'
		//	| 'rpc'
		//	| 'status'
		//	| 'submodule'
		//	| 'type'
		//	| 'typedef'
		//	| 'unique'
		//	| 'units'
		//	| 'uses'
		//	| 'value'
		//	| 'when'
		//	| 'yang-version'
		//	| 'yin-element';
		@Override public ParserRule getRule() { return rule; }
		
		//'action' | 'anydata' | 'anyxml' | 'argument' | 'augment' | 'base' | 'belongs-to' | 'bit' | 'case' | 'choice' | 'config'
		//| 'contact' | 'container' | 'default' | 'description' | 'enum' | 'error-app-tag' | 'error-message' | 'extension' |
		//'deviation' | 'deviate' | 'feature' | 'fraction-digits' | 'grouping' | 'identity' | 'if-feature' | 'import' | 'include'
		//| 'input' | 'key' | 'leaf' | 'leaf-list' | 'length' | 'list' | 'mandatory' | 'max-elements' | 'min-elements' |
		//'modifier' | 'module' | 'must' | 'namespace' | 'notification' | 'ordered-by' | 'organization' | 'output' | 'path' |
		//'pattern' | 'position' | 'prefix' | 'presence' | 'range' | 'reference' | 'refine' | 'require-instance' | 'revision' |
		//'revision-date' | 'rpc' | 'status' | 'submodule' | 'type' | 'typedef' | 'unique' | 'units' | 'uses' | 'value' | 'when'
		//| 'yang-version' | 'yin-element'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//'anydata'
		public Keyword getAnydataKeyword_1() { return cAnydataKeyword_1; }
		
		//'anyxml'
		public Keyword getAnyxmlKeyword_2() { return cAnyxmlKeyword_2; }
		
		//'argument'
		public Keyword getArgumentKeyword_3() { return cArgumentKeyword_3; }
		
		//'augment'
		public Keyword getAugmentKeyword_4() { return cAugmentKeyword_4; }
		
		//'base'
		public Keyword getBaseKeyword_5() { return cBaseKeyword_5; }
		
		//'belongs-to'
		public Keyword getBelongsToKeyword_6() { return cBelongsToKeyword_6; }
		
		//'bit'
		public Keyword getBitKeyword_7() { return cBitKeyword_7; }
		
		//'case'
		public Keyword getCaseKeyword_8() { return cCaseKeyword_8; }
		
		//'choice'
		public Keyword getChoiceKeyword_9() { return cChoiceKeyword_9; }
		
		//'config'
		public Keyword getConfigKeyword_10() { return cConfigKeyword_10; }
		
		//'contact'
		public Keyword getContactKeyword_11() { return cContactKeyword_11; }
		
		//'container'
		public Keyword getContainerKeyword_12() { return cContainerKeyword_12; }
		
		//'default'
		public Keyword getDefaultKeyword_13() { return cDefaultKeyword_13; }
		
		//'description'
		public Keyword getDescriptionKeyword_14() { return cDescriptionKeyword_14; }
		
		//'enum'
		public Keyword getEnumKeyword_15() { return cEnumKeyword_15; }
		
		//'error-app-tag'
		public Keyword getErrorAppTagKeyword_16() { return cErrorAppTagKeyword_16; }
		
		//'error-message'
		public Keyword getErrorMessageKeyword_17() { return cErrorMessageKeyword_17; }
		
		//'extension'
		public Keyword getExtensionKeyword_18() { return cExtensionKeyword_18; }
		
		//'deviation'
		public Keyword getDeviationKeyword_19() { return cDeviationKeyword_19; }
		
		//'deviate'
		public Keyword getDeviateKeyword_20() { return cDeviateKeyword_20; }
		
		//'feature'
		public Keyword getFeatureKeyword_21() { return cFeatureKeyword_21; }
		
		//'fraction-digits'
		public Keyword getFractionDigitsKeyword_22() { return cFractionDigitsKeyword_22; }
		
		//'grouping'
		public Keyword getGroupingKeyword_23() { return cGroupingKeyword_23; }
		
		//'identity'
		public Keyword getIdentityKeyword_24() { return cIdentityKeyword_24; }
		
		//'if-feature'
		public Keyword getIfFeatureKeyword_25() { return cIfFeatureKeyword_25; }
		
		//'import'
		public Keyword getImportKeyword_26() { return cImportKeyword_26; }
		
		//'include'
		public Keyword getIncludeKeyword_27() { return cIncludeKeyword_27; }
		
		//'input'
		public Keyword getInputKeyword_28() { return cInputKeyword_28; }
		
		//'key'
		public Keyword getKeyKeyword_29() { return cKeyKeyword_29; }
		
		//'leaf'
		public Keyword getLeafKeyword_30() { return cLeafKeyword_30; }
		
		//'leaf-list'
		public Keyword getLeafListKeyword_31() { return cLeafListKeyword_31; }
		
		//'length'
		public Keyword getLengthKeyword_32() { return cLengthKeyword_32; }
		
		//'list'
		public Keyword getListKeyword_33() { return cListKeyword_33; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_34() { return cMandatoryKeyword_34; }
		
		//'max-elements'
		public Keyword getMaxElementsKeyword_35() { return cMaxElementsKeyword_35; }
		
		//'min-elements'
		public Keyword getMinElementsKeyword_36() { return cMinElementsKeyword_36; }
		
		//'modifier'
		public Keyword getModifierKeyword_37() { return cModifierKeyword_37; }
		
		//'module'
		public Keyword getModuleKeyword_38() { return cModuleKeyword_38; }
		
		//'must'
		public Keyword getMustKeyword_39() { return cMustKeyword_39; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_40() { return cNamespaceKeyword_40; }
		
		//'notification'
		public Keyword getNotificationKeyword_41() { return cNotificationKeyword_41; }
		
		//'ordered-by'
		public Keyword getOrderedByKeyword_42() { return cOrderedByKeyword_42; }
		
		//'organization'
		public Keyword getOrganizationKeyword_43() { return cOrganizationKeyword_43; }
		
		//'output'
		public Keyword getOutputKeyword_44() { return cOutputKeyword_44; }
		
		//'path'
		public Keyword getPathKeyword_45() { return cPathKeyword_45; }
		
		//'pattern'
		public Keyword getPatternKeyword_46() { return cPatternKeyword_46; }
		
		//'position'
		public Keyword getPositionKeyword_47() { return cPositionKeyword_47; }
		
		//'prefix'
		public Keyword getPrefixKeyword_48() { return cPrefixKeyword_48; }
		
		//'presence'
		public Keyword getPresenceKeyword_49() { return cPresenceKeyword_49; }
		
		//'range'
		public Keyword getRangeKeyword_50() { return cRangeKeyword_50; }
		
		//'reference'
		public Keyword getReferenceKeyword_51() { return cReferenceKeyword_51; }
		
		//'refine'
		public Keyword getRefineKeyword_52() { return cRefineKeyword_52; }
		
		//'require-instance'
		public Keyword getRequireInstanceKeyword_53() { return cRequireInstanceKeyword_53; }
		
		//'revision'
		public Keyword getRevisionKeyword_54() { return cRevisionKeyword_54; }
		
		//'revision-date'
		public Keyword getRevisionDateKeyword_55() { return cRevisionDateKeyword_55; }
		
		//'rpc'
		public Keyword getRpcKeyword_56() { return cRpcKeyword_56; }
		
		//'status'
		public Keyword getStatusKeyword_57() { return cStatusKeyword_57; }
		
		//'submodule'
		public Keyword getSubmoduleKeyword_58() { return cSubmoduleKeyword_58; }
		
		//'type'
		public Keyword getTypeKeyword_59() { return cTypeKeyword_59; }
		
		//'typedef'
		public Keyword getTypedefKeyword_60() { return cTypedefKeyword_60; }
		
		//'unique'
		public Keyword getUniqueKeyword_61() { return cUniqueKeyword_61; }
		
		//'units'
		public Keyword getUnitsKeyword_62() { return cUnitsKeyword_62; }
		
		//'uses'
		public Keyword getUsesKeyword_63() { return cUsesKeyword_63; }
		
		//'value'
		public Keyword getValueKeyword_64() { return cValueKeyword_64; }
		
		//'when'
		public Keyword getWhenKeyword_65() { return cWhenKeyword_65; }
		
		//'yang-version'
		public Keyword getYangVersionKeyword_66() { return cYangVersionKeyword_66; }
		
		//'yin-element'
		public Keyword getYinElementKeyword_67() { return cYinElementKeyword_67; }
	}
	
	
	private final AbstractModuleElements pAbstractModule;
	private final StatementEndElements pStatementEnd;
	private final StatementElements pStatement;
	private final AbstractImportElements pAbstractImport;
	private final SchemaNodeElements pSchemaNode;
	private final DataSchemaNodeElements pDataSchemaNode;
	private final OtherStatementElements pOtherStatement;
	private final EnumerableElements pEnumerable;
	private final OrderedElements pOrdered;
	private final RefinableElements pRefinable;
	private final ModuleElements pModule;
	private final YangVersionElements pYangVersion;
	private final NamespaceElements pNamespace;
	private final PrefixElements pPrefix;
	private final ImportElements pImport;
	private final RevisionDateElements pRevisionDate;
	private final IncludeElements pInclude;
	private final OrganizationElements pOrganization;
	private final ContactElements pContact;
	private final RevisionElements pRevision;
	private final SubmoduleElements pSubmodule;
	private final BelongsToElements pBelongsTo;
	private final TypedefElements pTypedef;
	private final UnitsElements pUnits;
	private final DefaultElements pDefault;
	private final TypeElements pType;
	private final TypeReferenceElements pTypeReference;
	private final ContainerElements pContainer;
	private final MustElements pMust;
	private final ErrorMessageElements pErrorMessage;
	private final ErrorAppTagElements pErrorAppTag;
	private final PresenceElements pPresence;
	private final LeafElements pLeaf;
	private final MandatoryElements pMandatory;
	private final LeafListElements pLeafList;
	private final MinElementsElements pMinElements;
	private final MaxElementsElements pMaxElements;
	private final OrderedByElements pOrderedBy;
	private final ListElements pList;
	private final KeyElements pKey;
	private final KeyReferenceElements pKeyReference;
	private final DescendantSchemaNodeIdentifierReferencesElements pDescendantSchemaNodeIdentifierReferences;
	private final UniqueElements pUnique;
	private final ChoiceElements pChoice;
	private final CaseElements pCase;
	private final AnydataElements pAnydata;
	private final AnyxmlElements pAnyxml;
	private final GroupingElements pGrouping;
	private final UsesElements pUses;
	private final RefineElements pRefine;
	private final RpcElements pRpc;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final ActionElements pAction;
	private final NotificationElements pNotification;
	private final AugmentElements pAugment;
	private final IdentityElements pIdentity;
	private final BaseElements pBase;
	private final ExtensionElements pExtension;
	private final ArgumentElements pArgument;
	private final YinElementElements pYinElement;
	private final FeatureElements pFeature;
	private final IfFeatureElements pIfFeature;
	private final IfFeatureOrExpressionElements pIfFeatureOrExpression;
	private final IfFeatureAndExpressionElements pIfFeatureAndExpression;
	private final IfFeatureExpressionElements pIfFeatureExpression;
	private final DeviationElements pDeviation;
	private final DeviateElements pDeviate;
	private final ConfigElements pConfig;
	private final StatusElements pStatus;
	private final DescriptionElements pDescription;
	private final ReferenceElements pReference;
	private final WhenElements pWhen;
	private final RangeElements pRange;
	private final RefinementExpressionElements pRefinementExpression;
	private final RangeRefinementExpressionElements pRangeRefinementExpression;
	private final ExplicitRefinementExpressionElements pExplicitRefinementExpression;
	private final FractionDigitsElements pFractionDigits;
	private final LengthElements pLength;
	private final PatternElements pPattern;
	private final ModifierElements pModifier;
	private final EnumElements pEnum;
	private final ValueElements pValue;
	private final BitElements pBit;
	private final PositionElements pPosition;
	private final PathElements pPath;
	private final RequireInstanceElements pRequireInstance;
	private final UnknownElements pUnknown;
	private final DescendantSchemaNodeIdentifierElements pDescendantSchemaNodeIdentifier;
	private final DescendantRootSchemaNodeIdentifierElements pDescendantRootSchemaNodeIdentifier;
	private final SchemaNodeIdentifierElements pSchemaNodeIdentifier;
	private final RootSchemaNodeIdentifierElements pRootSchemaNodeIdentifier;
	private final GroupingRefElements pGroupingRef;
	private final XpathExpressionElements pXpathExpression;
	private final ParsedXpathExpressionElements pParsedXpathExpression;
	private final XpathOrExprElements pXpathOrExpr;
	private final XpathAndExprElements pXpathAndExpr;
	private final XpathEqualityExprElements pXpathEqualityExpr;
	private final XpathRelationalExprElements pXpathRelationalExpr;
	private final XpathAdditiveExprElements pXpathAdditiveExpr;
	private final XpathMultiplicativeExprElements pXpathMultiplicativeExpr;
	private final XpathUnaryExprElements pXpathUnaryExpr;
	private final XpathUnionExprElements pXpathUnionExpr;
	private final XpathPathExprElements pXpathPathExpr;
	private final XpathFilterExprElements pXpathFilterExpr;
	private final XpathPrimaryExprElements pXpathPrimaryExpr;
	private final XpathStepElements pXpathStep;
	private final DotElements pDot;
	private final DotDotElements pDotDot;
	private final XpathNodeTestElements pXpathNodeTest;
	private final XpathNameTestElements pXpathNameTest;
	private final XpathNodeTypeElements pXpathNodeType;
	private final XpathAxisNameElements pXpathAxisName;
	private final XpathIDOrKwElements pXpathIDOrKw;
	private final QNAMEElements pQNAME;
	private final StringValueElements pStringValue;
	private final IdOrKwElements pIdOrKw;
	private final QualifiedTypeNameElements pQualifiedTypeName;
	private final BUILTIN_TYPEElements pBUILTIN_TYPE;
	private final KEYWORDElements pKEYWORD;
	private final STATEMENT_KEYWORDElements pSTATEMENT_KEYWORD;
	private final TerminalRule tID;
	private final TerminalRule tEXTENSION_NAME;
	private final TerminalRule tSTRING;
	private final TerminalRule tNUMBER;
	private final TerminalRule tOPERATOR;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tHIDDEN;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public YangGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pAbstractModule = new AbstractModuleElements();
		this.pStatementEnd = new StatementEndElements();
		this.pStatement = new StatementElements();
		this.pAbstractImport = new AbstractImportElements();
		this.pSchemaNode = new SchemaNodeElements();
		this.pDataSchemaNode = new DataSchemaNodeElements();
		this.pOtherStatement = new OtherStatementElements();
		this.pEnumerable = new EnumerableElements();
		this.pOrdered = new OrderedElements();
		this.pRefinable = new RefinableElements();
		this.pModule = new ModuleElements();
		this.pYangVersion = new YangVersionElements();
		this.pNamespace = new NamespaceElements();
		this.pPrefix = new PrefixElements();
		this.pImport = new ImportElements();
		this.pRevisionDate = new RevisionDateElements();
		this.pInclude = new IncludeElements();
		this.pOrganization = new OrganizationElements();
		this.pContact = new ContactElements();
		this.pRevision = new RevisionElements();
		this.pSubmodule = new SubmoduleElements();
		this.pBelongsTo = new BelongsToElements();
		this.pTypedef = new TypedefElements();
		this.pUnits = new UnitsElements();
		this.pDefault = new DefaultElements();
		this.pType = new TypeElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pContainer = new ContainerElements();
		this.pMust = new MustElements();
		this.pErrorMessage = new ErrorMessageElements();
		this.pErrorAppTag = new ErrorAppTagElements();
		this.pPresence = new PresenceElements();
		this.pLeaf = new LeafElements();
		this.pMandatory = new MandatoryElements();
		this.pLeafList = new LeafListElements();
		this.pMinElements = new MinElementsElements();
		this.pMaxElements = new MaxElementsElements();
		this.pOrderedBy = new OrderedByElements();
		this.pList = new ListElements();
		this.pKey = new KeyElements();
		this.pKeyReference = new KeyReferenceElements();
		this.pDescendantSchemaNodeIdentifierReferences = new DescendantSchemaNodeIdentifierReferencesElements();
		this.pUnique = new UniqueElements();
		this.pChoice = new ChoiceElements();
		this.pCase = new CaseElements();
		this.pAnydata = new AnydataElements();
		this.pAnyxml = new AnyxmlElements();
		this.pGrouping = new GroupingElements();
		this.pUses = new UsesElements();
		this.pRefine = new RefineElements();
		this.pRpc = new RpcElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pAction = new ActionElements();
		this.pNotification = new NotificationElements();
		this.pAugment = new AugmentElements();
		this.pIdentity = new IdentityElements();
		this.pBase = new BaseElements();
		this.pExtension = new ExtensionElements();
		this.pArgument = new ArgumentElements();
		this.pYinElement = new YinElementElements();
		this.pFeature = new FeatureElements();
		this.pIfFeature = new IfFeatureElements();
		this.pIfFeatureOrExpression = new IfFeatureOrExpressionElements();
		this.pIfFeatureAndExpression = new IfFeatureAndExpressionElements();
		this.pIfFeatureExpression = new IfFeatureExpressionElements();
		this.pDeviation = new DeviationElements();
		this.pDeviate = new DeviateElements();
		this.pConfig = new ConfigElements();
		this.pStatus = new StatusElements();
		this.pDescription = new DescriptionElements();
		this.pReference = new ReferenceElements();
		this.pWhen = new WhenElements();
		this.pRange = new RangeElements();
		this.pRefinementExpression = new RefinementExpressionElements();
		this.pRangeRefinementExpression = new RangeRefinementExpressionElements();
		this.pExplicitRefinementExpression = new ExplicitRefinementExpressionElements();
		this.pFractionDigits = new FractionDigitsElements();
		this.pLength = new LengthElements();
		this.pPattern = new PatternElements();
		this.pModifier = new ModifierElements();
		this.pEnum = new EnumElements();
		this.pValue = new ValueElements();
		this.pBit = new BitElements();
		this.pPosition = new PositionElements();
		this.pPath = new PathElements();
		this.pRequireInstance = new RequireInstanceElements();
		this.pUnknown = new UnknownElements();
		this.pDescendantSchemaNodeIdentifier = new DescendantSchemaNodeIdentifierElements();
		this.pDescendantRootSchemaNodeIdentifier = new DescendantRootSchemaNodeIdentifierElements();
		this.pSchemaNodeIdentifier = new SchemaNodeIdentifierElements();
		this.pRootSchemaNodeIdentifier = new RootSchemaNodeIdentifierElements();
		this.pGroupingRef = new GroupingRefElements();
		this.pXpathExpression = new XpathExpressionElements();
		this.pParsedXpathExpression = new ParsedXpathExpressionElements();
		this.pXpathOrExpr = new XpathOrExprElements();
		this.pXpathAndExpr = new XpathAndExprElements();
		this.pXpathEqualityExpr = new XpathEqualityExprElements();
		this.pXpathRelationalExpr = new XpathRelationalExprElements();
		this.pXpathAdditiveExpr = new XpathAdditiveExprElements();
		this.pXpathMultiplicativeExpr = new XpathMultiplicativeExprElements();
		this.pXpathUnaryExpr = new XpathUnaryExprElements();
		this.pXpathUnionExpr = new XpathUnionExprElements();
		this.pXpathPathExpr = new XpathPathExprElements();
		this.pXpathFilterExpr = new XpathFilterExprElements();
		this.pXpathPrimaryExpr = new XpathPrimaryExprElements();
		this.pXpathStep = new XpathStepElements();
		this.pDot = new DotElements();
		this.pDotDot = new DotDotElements();
		this.pXpathNodeTest = new XpathNodeTestElements();
		this.pXpathNameTest = new XpathNameTestElements();
		this.pXpathNodeType = new XpathNodeTypeElements();
		this.pXpathAxisName = new XpathAxisNameElements();
		this.pXpathIDOrKw = new XpathIDOrKwElements();
		this.pQNAME = new QNAMEElements();
		this.pStringValue = new StringValueElements();
		this.pIdOrKw = new IdOrKwElements();
		this.pQualifiedTypeName = new QualifiedTypeNameElements();
		this.pBUILTIN_TYPE = new BUILTIN_TYPEElements();
		this.pKEYWORD = new KEYWORDElements();
		this.pSTATEMENT_KEYWORD = new STATEMENT_KEYWORDElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ID");
		this.tEXTENSION_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.EXTENSION_NAME");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.STRING");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.NUMBER");
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.OPERATOR");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.WS");
		this.tHIDDEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.HIDDEN");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.typefox.yang.Yang.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.typefox.yang.Yang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//AbstractModule:
	//	Module | Submodule;
	public AbstractModuleElements getAbstractModuleAccess() {
		return pAbstractModule;
	}
	
	public ParserRule getAbstractModuleRule() {
		return getAbstractModuleAccess().getRule();
	}
	
	//fragment StatementEnd returns Statement:
	//	'{'
	//	substatements+=Statement*
	//	'}' | ';';
	public StatementEndElements getStatementEndAccess() {
		return pStatementEnd;
	}
	
	public ParserRule getStatementEndRule() {
		return getStatementEndAccess().getRule();
	}
	
	//Statement:
	//	SchemaNode | OtherStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AbstractImport:
	//	Import
	//	| Include;
	public AbstractImportElements getAbstractImportAccess() {
		return pAbstractImport;
	}
	
	public ParserRule getAbstractImportRule() {
		return getAbstractImportAccess().getRule();
	}
	
	//SchemaNode:
	//	DataSchemaNode | Extension | Feature | Grouping | Identity | Notification | Rpc | Action | Input | Output | Typedef;
	public SchemaNodeElements getSchemaNodeAccess() {
		return pSchemaNode;
	}
	
	public ParserRule getSchemaNodeRule() {
		return getSchemaNodeAccess().getRule();
	}
	
	//DataSchemaNode:
	//	Anydata | Anyxml | Container | Choice | Case | List | Leaf | LeafList;
	public DataSchemaNodeElements getDataSchemaNodeAccess() {
		return pDataSchemaNode;
	}
	
	public ParserRule getDataSchemaNodeRule() {
		return getDataSchemaNodeAccess().getRule();
	}
	
	//OtherStatement:
	//	AbstractModule
	//	| AbstractImport
	//	| Argument
	//	| Augment
	//	| Base
	//	| BelongsTo
	//	| Config
	//	| Contact
	//	| Default
	//	| Description
	//	| Enumerable
	//	| ErrorAppTag
	//	| ErrorMessage
	//	| Deviation
	//	| Deviate
	//	| FractionDigits
	//	| IfFeature
	//	| Key
	//	| Mandatory
	//	| MaxElements
	//	| MinElements
	//	| Modifier
	//	| Must
	//	| Namespace
	//	| Ordered
	//	| OrderedBy
	//	| Organization
	//	| Path
	//	| Pattern
	//	| Prefix
	//	| Presence
	//	| Reference
	//	| Refine
	//	| Refinable
	//	| RequireInstance
	//	| Revision
	//	| RevisionDate
	//	| Status
	//	| Type
	//	| Unique
	//	| Units
	//	| Unknown
	//	| Uses
	//	| When
	//	| YangVersion
	//	| YinElement;
	public OtherStatementElements getOtherStatementAccess() {
		return pOtherStatement;
	}
	
	public ParserRule getOtherStatementRule() {
		return getOtherStatementAccess().getRule();
	}
	
	//Enumerable:
	//	Enum | Bit;
	public EnumerableElements getEnumerableAccess() {
		return pEnumerable;
	}
	
	public ParserRule getEnumerableRule() {
		return getEnumerableAccess().getRule();
	}
	
	//Ordered:
	//	Position | Value;
	public OrderedElements getOrderedAccess() {
		return pOrdered;
	}
	
	public ParserRule getOrderedRule() {
		return getOrderedAccess().getRule();
	}
	
	//Refinable:
	//	Range | Length;
	public RefinableElements getRefinableAccess() {
		return pRefinable;
	}
	
	public ParserRule getRefinableRule() {
		return getRefinableAccess().getRule();
	}
	
	//// 7.1	
	//Module:
	//	'module' name=StringValue StatementEnd;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//// 7.1.2 
	//YangVersion:
	//	'yang-version' yangVersion=StringValue StatementEnd;
	public YangVersionElements getYangVersionAccess() {
		return pYangVersion;
	}
	
	public ParserRule getYangVersionRule() {
		return getYangVersionAccess().getRule();
	}
	
	//// 7.1.3
	//Namespace:
	//	'namespace' uri=StringValue StatementEnd;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//// 7.1.4
	//Prefix:
	//	'prefix' prefix=StringValue StatementEnd;
	public PrefixElements getPrefixAccess() {
		return pPrefix;
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}
	
	//// 7.1.5
	//Import:
	//	'import' module=[AbstractModule|StringValue] StatementEnd;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//// 7.1.5.1
	//RevisionDate:
	//	'revision-date' date=[Revision|StringValue] StatementEnd;
	public RevisionDateElements getRevisionDateAccess() {
		return pRevisionDate;
	}
	
	public ParserRule getRevisionDateRule() {
		return getRevisionDateAccess().getRule();
	}
	
	//// 7.1.6
	//Include:
	//	'include' module=[AbstractModule|StringValue] StatementEnd;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//// 7.1.7
	//Organization:
	//	'organization' organization=StringValue StatementEnd;
	public OrganizationElements getOrganizationAccess() {
		return pOrganization;
	}
	
	public ParserRule getOrganizationRule() {
		return getOrganizationAccess().getRule();
	}
	
	//// 7.1.8
	//Contact:
	//	'contact' contact=StringValue StatementEnd;
	public ContactElements getContactAccess() {
		return pContact;
	}
	
	public ParserRule getContactRule() {
		return getContactAccess().getRule();
	}
	
	//// 7.1.9
	//Revision:
	//	'revision' revision=StringValue StatementEnd;
	public RevisionElements getRevisionAccess() {
		return pRevision;
	}
	
	public ParserRule getRevisionRule() {
		return getRevisionAccess().getRule();
	}
	
	//// 7.2
	//Submodule:
	//	'submodule' name=StringValue StatementEnd;
	public SubmoduleElements getSubmoduleAccess() {
		return pSubmodule;
	}
	
	public ParserRule getSubmoduleRule() {
		return getSubmoduleAccess().getRule();
	}
	
	//// 7.2.2
	//BelongsTo:
	//	'belongs-to' module=[Module|StringValue] StatementEnd;
	public BelongsToElements getBelongsToAccess() {
		return pBelongsTo;
	}
	
	public ParserRule getBelongsToRule() {
		return getBelongsToAccess().getRule();
	}
	
	//// 7.3
	//Typedef:
	//	'typedef' name=StringValue StatementEnd;
	public TypedefElements getTypedefAccess() {
		return pTypedef;
	}
	
	public ParserRule getTypedefRule() {
		return getTypedefAccess().getRule();
	}
	
	//// 7.3.3
	//Units:
	//	'units' definition=StringValue StatementEnd;
	public UnitsElements getUnitsAccess() {
		return pUnits;
	}
	
	public ParserRule getUnitsRule() {
		return getUnitsAccess().getRule();
	}
	
	//// 7.3.4
	//Default:
	//	'default' defaultStringValue=StringValue StatementEnd;
	public DefaultElements getDefaultAccess() {
		return pDefault;
	}
	
	public ParserRule getDefaultRule() {
		return getDefaultAccess().getRule();
	}
	
	//// 7.4
	//Type:
	//	'type' typeRef=TypeReference StatementEnd;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeReference:
	//	builtin=BUILTIN_TYPE | type=[Typedef|QualifiedTypeName];
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//// 7.5
	//Container:
	//	'container' name=StringValue StatementEnd;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//// 7.5.3
	//Must:
	//	'must' constraint=XpathExpression StatementEnd;
	public MustElements getMustAccess() {
		return pMust;
	}
	
	public ParserRule getMustRule() {
		return getMustAccess().getRule();
	}
	
	//// 7.5.4.1 
	//ErrorMessage:
	//	'error-message' message=StringValue StatementEnd;
	public ErrorMessageElements getErrorMessageAccess() {
		return pErrorMessage;
	}
	
	public ParserRule getErrorMessageRule() {
		return getErrorMessageAccess().getRule();
	}
	
	//// 7.5.4.2
	//ErrorAppTag:
	//	'error-app-tag' tag=StringValue StatementEnd;
	public ErrorAppTagElements getErrorAppTagAccess() {
		return pErrorAppTag;
	}
	
	public ParserRule getErrorAppTagRule() {
		return getErrorAppTagAccess().getRule();
	}
	
	//// 7.5.5
	//Presence:
	//	'presence' description=StringValue StatementEnd;
	public PresenceElements getPresenceAccess() {
		return pPresence;
	}
	
	public ParserRule getPresenceRule() {
		return getPresenceAccess().getRule();
	}
	
	//// 7.6
	//Leaf:
	//	'leaf' name=StringValue StatementEnd;
	public LeafElements getLeafAccess() {
		return pLeaf;
	}
	
	public ParserRule getLeafRule() {
		return getLeafAccess().getRule();
	}
	
	//// 7.6.5
	//Mandatory:
	//	'mandatory' isMandatory=StringValue StatementEnd;
	public MandatoryElements getMandatoryAccess() {
		return pMandatory;
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}
	
	//// 7.7
	//LeafList:
	//	'leaf-list' name=StringValue StatementEnd;
	public LeafListElements getLeafListAccess() {
		return pLeafList;
	}
	
	public ParserRule getLeafListRule() {
		return getLeafListAccess().getRule();
	}
	
	//// 7.7.5
	//MinElements:
	//	'min-elements' minElements=StringValue StatementEnd;
	public MinElementsElements getMinElementsAccess() {
		return pMinElements;
	}
	
	public ParserRule getMinElementsRule() {
		return getMinElementsAccess().getRule();
	}
	
	//// 7.7.6
	//MaxElements:
	//	'max-elements' maxElements=StringValue StatementEnd;
	public MaxElementsElements getMaxElementsAccess() {
		return pMaxElements;
	}
	
	public ParserRule getMaxElementsRule() {
		return getMaxElementsAccess().getRule();
	}
	
	//// 7.7.7
	//OrderedBy:
	//	'ordered-by' orderedBy=StringValue StatementEnd;
	public OrderedByElements getOrderedByAccess() {
		return pOrderedBy;
	}
	
	public ParserRule getOrderedByRule() {
		return getOrderedByAccess().getRule();
	}
	
	//// 7.8
	//List:
	//	'list' name=StringValue StatementEnd;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//// 7.8.2
	//Key:
	//	{Key} 'key' references+=KeyReference+ StatementEnd;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//KeyReference:
	//	node=[Leaf|QNAME];
	public KeyReferenceElements getKeyReferenceAccess() {
		return pKeyReference;
	}
	
	public ParserRule getKeyReferenceRule() {
		return getKeyReferenceAccess().getRule();
	}
	
	//fragment DescendantSchemaNodeIdentifierReferences:
	//	references+=DescendantSchemaNodeIdentifier+;
	public DescendantSchemaNodeIdentifierReferencesElements getDescendantSchemaNodeIdentifierReferencesAccess() {
		return pDescendantSchemaNodeIdentifierReferences;
	}
	
	public ParserRule getDescendantSchemaNodeIdentifierReferencesRule() {
		return getDescendantSchemaNodeIdentifierReferencesAccess().getRule();
	}
	
	//// 7.8.3
	//Unique:
	//	{Unique} 'unique' DescendantSchemaNodeIdentifierReferences StatementEnd;
	public UniqueElements getUniqueAccess() {
		return pUnique;
	}
	
	public ParserRule getUniqueRule() {
		return getUniqueAccess().getRule();
	}
	
	//// 7.9
	//Choice:
	//	'choice' name=StringValue StatementEnd;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//// 7.9.2
	//Case:
	//	'case' name=StringValue StatementEnd;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//// 7.10
	//Anydata:
	//	'anydata' name=StringValue StatementEnd;
	public AnydataElements getAnydataAccess() {
		return pAnydata;
	}
	
	public ParserRule getAnydataRule() {
		return getAnydataAccess().getRule();
	}
	
	//// 7.11
	//Anyxml:
	//	'anyxml' name=StringValue StatementEnd;
	public AnyxmlElements getAnyxmlAccess() {
		return pAnyxml;
	}
	
	public ParserRule getAnyxmlRule() {
		return getAnyxmlAccess().getRule();
	}
	
	//// 7.12
	//Grouping:
	//	'grouping' name=StringValue StatementEnd;
	public GroupingElements getGroupingAccess() {
		return pGrouping;
	}
	
	public ParserRule getGroupingRule() {
		return getGroupingAccess().getRule();
	}
	
	//// 7.13
	//Uses:
	//	'uses' grouping=GroupingRef StatementEnd;
	public UsesElements getUsesAccess() {
		return pUses;
	}
	
	public ParserRule getUsesRule() {
		return getUsesAccess().getRule();
	}
	
	//// 7.13.2
	//Refine:
	//	'refine' node=SchemaNodeIdentifier StatementEnd;
	public RefineElements getRefineAccess() {
		return pRefine;
	}
	
	public ParserRule getRefineRule() {
		return getRefineAccess().getRule();
	}
	
	//// 7.14
	//Rpc:
	//	'rpc' name=StringValue StatementEnd;
	public RpcElements getRpcAccess() {
		return pRpc;
	}
	
	public ParserRule getRpcRule() {
		return getRpcAccess().getRule();
	}
	
	//// input and output should never have name, but we want it to be a subtype of SchemaNode
	//// 7.14.2
	//Input:
	//	{Input} 'input' name=StringValue? StatementEnd;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//// 7.14.3
	//Output:
	//	{Output} 'output' name=StringValue? StatementEnd;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//// 7.15
	//Action:
	//	'action' name=StringValue StatementEnd;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//// 7.16
	//Notification:
	//	'notification' name=StringValue StatementEnd;
	public NotificationElements getNotificationAccess() {
		return pNotification;
	}
	
	public ParserRule getNotificationRule() {
		return getNotificationAccess().getRule();
	}
	
	//// 7.17
	//Augment:
	//	'augment' path=SchemaNodeIdentifier StatementEnd;
	public AugmentElements getAugmentAccess() {
		return pAugment;
	}
	
	public ParserRule getAugmentRule() {
		return getAugmentAccess().getRule();
	}
	
	//// 7.18
	//Identity:
	//	'identity' name=StringValue StatementEnd;
	public IdentityElements getIdentityAccess() {
		return pIdentity;
	}
	
	public ParserRule getIdentityRule() {
		return getIdentityAccess().getRule();
	}
	
	//// 7.18.2
	//Base:
	//	'base' reference=[Identity|QNAME] StatementEnd;
	public BaseElements getBaseAccess() {
		return pBase;
	}
	
	public ParserRule getBaseRule() {
		return getBaseAccess().getRule();
	}
	
	//// 7.19
	//Extension:
	//	'extension' name=StringValue StatementEnd;
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}
	
	//// 7.19.2
	//Argument:
	//	'argument' name=StringValue StatementEnd;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//// 7.19.3
	//YinElement:
	//	'yin-element' isYinElement=StringValue StatementEnd;
	public YinElementElements getYinElementAccess() {
		return pYinElement;
	}
	
	public ParserRule getYinElementRule() {
		return getYinElementAccess().getRule();
	}
	
	//// 7.20.1
	//Feature:
	//	'feature' name=StringValue StatementEnd;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//// 7.20.2
	//IfFeature:
	//	'if-feature' condition=IfFeatureOrExpression StatementEnd;
	public IfFeatureElements getIfFeatureAccess() {
		return pIfFeature;
	}
	
	public ParserRule getIfFeatureRule() {
		return getIfFeatureAccess().getRule();
	}
	
	//IfFeatureOrExpression Expression:
	//	IfFeatureAndExpression ({BinaryOperator.left=current} operator='or' right=IfFeatureAndExpression)*;
	public IfFeatureOrExpressionElements getIfFeatureOrExpressionAccess() {
		return pIfFeatureOrExpression;
	}
	
	public ParserRule getIfFeatureOrExpressionRule() {
		return getIfFeatureOrExpressionAccess().getRule();
	}
	
	//IfFeatureAndExpression Expression:
	//	IfFeatureExpression ({BinaryOperator.left=current} operator='and' right=IfFeatureExpression)*;
	public IfFeatureAndExpressionElements getIfFeatureAndExpressionAccess() {
		return pIfFeatureAndExpression;
	}
	
	public ParserRule getIfFeatureAndExpressionRule() {
		return getIfFeatureAndExpressionAccess().getRule();
	}
	
	//IfFeatureExpression Expression:
	//	{FeatureReference} feature=[Feature|QNAME] | {UnaryOperation} operator='not' target=IfFeatureExpression |
	//	'(' IfFeatureOrExpression ')';
	public IfFeatureExpressionElements getIfFeatureExpressionAccess() {
		return pIfFeatureExpression;
	}
	
	public ParserRule getIfFeatureExpressionRule() {
		return getIfFeatureExpressionAccess().getRule();
	}
	
	//// 7.20.3
	//Deviation:
	//	'deviation' reference=SchemaNodeIdentifier StatementEnd;
	public DeviationElements getDeviationAccess() {
		return pDeviation;
	}
	
	public ParserRule getDeviationRule() {
		return getDeviationAccess().getRule();
	}
	
	//// 7.20.3.2
	//Deviate:
	//	'deviate' argument=StringValue StatementEnd;
	public DeviateElements getDeviateAccess() {
		return pDeviate;
	}
	
	public ParserRule getDeviateRule() {
		return getDeviateAccess().getRule();
	}
	
	//// Common Statement
	//// 7.21.1
	//Config:
	//	'config' isConfig=StringValue StatementEnd;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//// 7.21.2
	//Status:
	//	'status' argument=StringValue StatementEnd;
	public StatusElements getStatusAccess() {
		return pStatus;
	}
	
	public ParserRule getStatusRule() {
		return getStatusAccess().getRule();
	}
	
	//// 7.21.3
	//Description:
	//	'description' description=StringValue StatementEnd;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//// 7.21.4
	//Reference:
	//	'reference' reference=StringValue StatementEnd;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//// 7.21.5
	//When:
	//	'when' condition=XpathExpression StatementEnd;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//// 9.2.4 
	//Range:
	//	'range' expression=RefinementExpression StatementEnd;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//RefinementExpression Expression:
	//	RangeRefinementExpression ({BinaryOperation.left=current} operator='|' right=RangeRefinementExpression)*;
	public RefinementExpressionElements getRefinementExpressionAccess() {
		return pRefinementExpression;
	}
	
	public ParserRule getRefinementExpressionRule() {
		return getRefinementExpressionAccess().getRule();
	}
	
	//RangeRefinementExpression Expression:
	//	ExplicitRefinementExpression ({BinaryOperation.left=current} operator='..' right=ExplicitRefinementExpression)?;
	public RangeRefinementExpressionElements getRangeRefinementExpressionAccess() {
		return pRangeRefinementExpression;
	}
	
	public ParserRule getRangeRefinementExpressionRule() {
		return getRangeRefinementExpressionAccess().getRule();
	}
	
	//ExplicitRefinementExpression Expression:
	//	{Literal} value=NUMBER | {Min} 'min' | {Max} 'max';
	public ExplicitRefinementExpressionElements getExplicitRefinementExpressionAccess() {
		return pExplicitRefinementExpression;
	}
	
	public ParserRule getExplicitRefinementExpressionRule() {
		return getExplicitRefinementExpressionAccess().getRule();
	}
	
	//// 9.3.4
	//FractionDigits:
	//	'fraction-digits' range=StringValue StatementEnd;
	public FractionDigitsElements getFractionDigitsAccess() {
		return pFractionDigits;
	}
	
	public ParserRule getFractionDigitsRule() {
		return getFractionDigitsAccess().getRule();
	}
	
	//// 9.4.4
	//Length:
	//	'length' expression=RefinementExpression StatementEnd;
	public LengthElements getLengthAccess() {
		return pLength;
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}
	
	//// 9.4.5
	//Pattern:
	//	'pattern' regexp=StringValue StatementEnd;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//// 9.4.5
	//Modifier:
	//	'modifier' modifier=StringValue StatementEnd;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//// 9.6.4
	//Enum:
	//	'enum' name=StringValue StatementEnd;
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//// 9.6.4.2
	//Value:
	//	'value' ordinal=StringValue StatementEnd;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//// 9.7.4
	//Bit:
	//	'bit' name=StringValue StatementEnd;
	public BitElements getBitAccess() {
		return pBit;
	}
	
	public ParserRule getBitRule() {
		return getBitAccess().getRule();
	}
	
	//// 9.7.4.2
	//Position:
	//	'position' ordinal=StringValue StatementEnd;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//// 9.9.2
	//Path:
	//	'path' reference=XpathExpression StatementEnd;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//// 9.9.3
	//RequireInstance:
	//	'require-instance' isRequireInstance=StringValue StatementEnd;
	public RequireInstanceElements getRequireInstanceAccess() {
		return pRequireInstance;
	}
	
	public ParserRule getRequireInstanceRule() {
		return getRequireInstanceAccess().getRule();
	}
	
	//Unknown:
	//	extension=[Extension|EXTENSION_NAME] name=StringValue? StatementEnd;
	public UnknownElements getUnknownAccess() {
		return pUnknown;
	}
	
	public ParserRule getUnknownRule() {
		return getUnknownAccess().getRule();
	}
	
	//DescendantSchemaNodeIdentifier SchemaNodeIdentifier:
	//	DescendantRootSchemaNodeIdentifier ({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*;
	public DescendantSchemaNodeIdentifierElements getDescendantSchemaNodeIdentifierAccess() {
		return pDescendantSchemaNodeIdentifier;
	}
	
	public ParserRule getDescendantSchemaNodeIdentifierRule() {
		return getDescendantSchemaNodeIdentifierAccess().getRule();
	}
	
	//DescendantRootSchemaNodeIdentifier SchemaNodeIdentifier:
	//	schemaNode=[SchemaNode|QNAME];
	public DescendantRootSchemaNodeIdentifierElements getDescendantRootSchemaNodeIdentifierAccess() {
		return pDescendantRootSchemaNodeIdentifier;
	}
	
	public ParserRule getDescendantRootSchemaNodeIdentifierRule() {
		return getDescendantRootSchemaNodeIdentifierAccess().getRule();
	}
	
	//SchemaNodeIdentifier:
	//	RootSchemaNodeIdentifier ({SchemaNodeIdentifier.target=current} '/' schemaNode=[SchemaNode|QNAME])*;
	public SchemaNodeIdentifierElements getSchemaNodeIdentifierAccess() {
		return pSchemaNodeIdentifier;
	}
	
	public ParserRule getSchemaNodeIdentifierRule() {
		return getSchemaNodeIdentifierAccess().getRule();
	}
	
	//RootSchemaNodeIdentifier SchemaNodeIdentifier:
	//	isAbsolute?='/'? schemaNode=[SchemaNode|QNAME];
	public RootSchemaNodeIdentifierElements getRootSchemaNodeIdentifierAccess() {
		return pRootSchemaNodeIdentifier;
	}
	
	public ParserRule getRootSchemaNodeIdentifierRule() {
		return getRootSchemaNodeIdentifierAccess().getRule();
	}
	
	//GroupingRef:
	//	node=[Grouping|QNAME];
	public GroupingRefElements getGroupingRefAccess() {
		return pGroupingRef;
	}
	
	public ParserRule getGroupingRefRule() {
		return getGroupingRefAccess().getRule();
	}
	
	///////////////////////////////////
	//// Xpath 1.0
	///////////////////////////////////
	//XpathExpression:
	//	{UnparsedXpath} '<<<<' text=STRING '>>>>'
	//	| ParsedXpathExpression;
	public XpathExpressionElements getXpathExpressionAccess() {
		return pXpathExpression;
	}
	
	public ParserRule getXpathExpressionRule() {
		return getXpathExpressionAccess().getRule();
	}
	
	//ParsedXpathExpression XpathExpression:
	//	XpathOrExpr;
	public ParsedXpathExpressionElements getParsedXpathExpressionAccess() {
		return pParsedXpathExpression;
	}
	
	public ParserRule getParsedXpathExpressionRule() {
		return getParsedXpathExpressionAccess().getRule();
	}
	
	//XpathOrExpr XpathExpression:
	//	XpathAndExpr ({XpathOrOperation.left=current} operator='or' right=XpathAndExpr)*;
	public XpathOrExprElements getXpathOrExprAccess() {
		return pXpathOrExpr;
	}
	
	public ParserRule getXpathOrExprRule() {
		return getXpathOrExprAccess().getRule();
	}
	
	//XpathAndExpr XpathExpression:
	//	XpathEqualityExpr ({XpathAndOperation.left=current} operator='and' right=XpathEqualityExpr)*;
	public XpathAndExprElements getXpathAndExprAccess() {
		return pXpathAndExpr;
	}
	
	public ParserRule getXpathAndExprRule() {
		return getXpathAndExprAccess().getRule();
	}
	
	//XpathEqualityExpr XpathExpression:
	//	XpathRelationalExpr ({XpathEqualityOperation.left=current} operator=('=' | '!=') right=XpathRelationalExpr)*;
	public XpathEqualityExprElements getXpathEqualityExprAccess() {
		return pXpathEqualityExpr;
	}
	
	public ParserRule getXpathEqualityExprRule() {
		return getXpathEqualityExprAccess().getRule();
	}
	
	//XpathRelationalExpr XpathExpression:
	//	XpathAdditiveExpr ({XpathRelationalOperation.left=current} operator=('<' | '>' | '<=' | '>=')
	//	right=XpathAdditiveExpr)*;
	public XpathRelationalExprElements getXpathRelationalExprAccess() {
		return pXpathRelationalExpr;
	}
	
	public ParserRule getXpathRelationalExprRule() {
		return getXpathRelationalExprAccess().getRule();
	}
	
	//XpathAdditiveExpr XpathExpression:
	//	XpathMultiplicativeExpr ({XpathAdditiveOperation.left=current} operator=('+' | '-') right=XpathMultiplicativeExpr)*;
	public XpathAdditiveExprElements getXpathAdditiveExprAccess() {
		return pXpathAdditiveExpr;
	}
	
	public ParserRule getXpathAdditiveExprRule() {
		return getXpathAdditiveExprAccess().getRule();
	}
	
	//XpathMultiplicativeExpr XpathExpression:
	//	XpathUnaryExpr ({XpathMultiplicativeOperation.left=current} operator=('*' | 'div' | 'mod')
	//	right=XpathMultiplicativeExpr)?;
	public XpathMultiplicativeExprElements getXpathMultiplicativeExprAccess() {
		return pXpathMultiplicativeExpr;
	}
	
	public ParserRule getXpathMultiplicativeExprRule() {
		return getXpathMultiplicativeExprAccess().getRule();
	}
	
	//XpathUnaryExpr XpathExpression:
	//	{XpathUnaryOperation} operator='-' target=XpathUnionExpr
	//	| XpathUnionExpr;
	public XpathUnaryExprElements getXpathUnaryExprAccess() {
		return pXpathUnaryExpr;
	}
	
	public ParserRule getXpathUnaryExprRule() {
		return getXpathUnaryExprAccess().getRule();
	}
	
	//XpathUnionExpr XpathExpression:
	//	XpathPathExpr ({XpathUnionOperation.left=current} operator='|' right=XpathUnionExpr)?;
	public XpathUnionExprElements getXpathUnionExprAccess() {
		return pXpathUnionExpr;
	}
	
	public ParserRule getXpathUnionExprRule() {
		return getXpathUnionExprAccess().getRule();
	}
	
	//XpathPathExpr XpathExpression:
	//	XpathFilterExpr ({XpathLocation.target=current} '/' -> (isDescendants?='/')? step=XpathStep
	//	({XpathFilter.target=current} '[' predicate=XpathExpression ']')*)*;
	public XpathPathExprElements getXpathPathExprAccess() {
		return pXpathPathExpr;
	}
	
	public ParserRule getXpathPathExprRule() {
		return getXpathPathExprAccess().getRule();
	}
	
	//XpathFilterExpr XpathExpression:
	//	XpathPrimaryExpr ({XpathFilter.target=current} '[' predicate=XpathExpression ']')*;
	public XpathFilterExprElements getXpathFilterExprAccess() {
		return pXpathFilterExpr;
	}
	
	public ParserRule getXpathFilterExprRule() {
		return getXpathFilterExprAccess().getRule();
	}
	
	//XpathPrimaryExpr XpathExpression:
	//	{XpathVariableReference} '$' name=QNAME
	//	| '(' XpathExpression ')'
	//	| {XpathStringLiteral} value=STRING
	//	| {XpathNumberLiteral} value=NUMBER
	//	| {XpathFunctionCall} name=QNAME '(' (args+=XpathExpression (',' args+=XpathExpression)*)? ')'
	//	| {RelativePath} step=XpathStep
	//	| {AbsolutePath} '/' -> (isDescendants?='/')? -> step=XpathStep?;
	public XpathPrimaryExprElements getXpathPrimaryExprAccess() {
		return pXpathPrimaryExpr;
	}
	
	public ParserRule getXpathPrimaryExprRule() {
		return getXpathPrimaryExprAccess().getRule();
	}
	
	//XpathStep:
	//	{CurrentRef} ref=[SchemaNode|Dot] | {ParentRef} ref=[SchemaNode|DotDot] | {AbbrevAttributeStep} '@'
	//	attributeName=XpathIDOrKw | (axis=XpathAxisName ':' ':')? node=XpathNodeTest;
	public XpathStepElements getXpathStepAccess() {
		return pXpathStep;
	}
	
	public ParserRule getXpathStepRule() {
		return getXpathStepAccess().getRule();
	}
	
	//Dot:
	//	'.';
	public DotElements getDotAccess() {
		return pDot;
	}
	
	public ParserRule getDotRule() {
		return getDotAccess().getRule();
	}
	
	//DotDot:
	//	'..';
	public DotDotElements getDotDotAccess() {
		return pDotDot;
	}
	
	public ParserRule getDotDotRule() {
		return getDotDotAccess().getRule();
	}
	
	//XpathNodeTest:
	//	XpathNameTest
	//	| {XpathNodeType} name=XpathNodeType '(' ')'
	//	| {ProcessingInstruction} 'processing-instruction' '(' instruction=STRING ')';
	public XpathNodeTestElements getXpathNodeTestAccess() {
		return pXpathNodeTest;
	}
	
	public ParserRule getXpathNodeTestRule() {
		return getXpathNodeTestAccess().getRule();
	}
	
	//XpathNameTest:
	//	(prefix=ID ':')? ref=[SchemaNode|XpathIDOrKw];
	public XpathNameTestElements getXpathNameTestAccess() {
		return pXpathNameTest;
	}
	
	public ParserRule getXpathNameTestRule() {
		return getXpathNameTestAccess().getRule();
	}
	
	//XpathNodeType:
	//	'comment'
	//	| 'text'
	//	| 'node';
	public XpathNodeTypeElements getXpathNodeTypeAccess() {
		return pXpathNodeType;
	}
	
	public ParserRule getXpathNodeTypeRule() {
		return getXpathNodeTypeAccess().getRule();
	}
	
	//XpathAxisName:
	//	'ancestor'
	//	| 'ancestor-or-self'
	//	| 'attribute'
	//	| 'child'
	//	| 'descendant'
	//	| 'descendant-or-self'
	//	| 'following'
	//	| 'following-sibling'
	//	| 'namespace'
	//	| 'parent'
	//	| 'preceding'
	//	| 'preceding-sibling'
	//	| 'self';
	public XpathAxisNameElements getXpathAxisNameAccess() {
		return pXpathAxisName;
	}
	
	public ParserRule getXpathAxisNameRule() {
		return getXpathAxisNameAccess().getRule();
	}
	
	//XpathIDOrKw:
	//	ID | 'div' | 'and' | 'or' | 'mod' | XpathAxisName | XpathNodeType | '*';
	public XpathIDOrKwElements getXpathIDOrKwAccess() {
		return pXpathIDOrKw;
	}
	
	public ParserRule getXpathIDOrKwRule() {
		return getXpathIDOrKwAccess().getRule();
	}
	
	///////////////////////////////////
	///////////////////////////////////
	///////////////////////////////////
	///////////////////////////////////
	///////////////////////////////////
	///////////////////////////////////
	///////////////////////////////////
	//// Leafref path
	//QNAME:
	//	(IdOrKw ':')? IdOrKw;
	public QNAMEElements getQNAMEAccess() {
		return pQNAME;
	}
	
	public ParserRule getQNAMERule() {
		return getQNAMEAccess().getRule();
	}
	
	//StringValue:
	//	STRING+;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//IdOrKw:
	//	ID | BUILTIN_TYPE | KEYWORD;
	public IdOrKwElements getIdOrKwAccess() {
		return pIdOrKw;
	}
	
	public ParserRule getIdOrKwRule() {
		return getIdOrKwAccess().getRule();
	}
	
	//QualifiedTypeName:
	//	((ID | KEYWORD) ':')? (ID | KEYWORD);
	public QualifiedTypeNameElements getQualifiedTypeNameAccess() {
		return pQualifiedTypeName;
	}
	
	public ParserRule getQualifiedTypeNameRule() {
		return getQualifiedTypeNameAccess().getRule();
	}
	
	//BUILTIN_TYPE:
	//	'binary' |
	//	'bits' |
	//	'boolean' |
	//	'decimal64' |
	//	'empty' |
	//	'enumeration' |
	//	'identityref' |
	//	'instance-identifier' |
	//	'int8' |
	//	'int16' |
	//	'int32' |
	//	'int64' |
	//	'leafref' |
	//	'string' |
	//	'uint8' |
	//	'uint16' |
	//	'uint32' |
	//	'uint64' |
	//	'union';
	public BUILTIN_TYPEElements getBUILTIN_TYPEAccess() {
		return pBUILTIN_TYPE;
	}
	
	public ParserRule getBUILTIN_TYPERule() {
		return getBUILTIN_TYPEAccess().getRule();
	}
	
	//KEYWORD:
	//	STATEMENT_KEYWORD
	//	// other keywords
	//	| 'add'
	//	| 'current'
	//	| 'delete'
	//	| 'deprecated'
	//	| 'false'
	//	| 'max'
	//	| 'min'
	//	| 'not-supported'
	//	| 'obsolete'
	//	| 'replace'
	//	| 'system'
	//	| 'true'
	//	| 'unbounded'
	//	| 'user';
	public KEYWORDElements getKEYWORDAccess() {
		return pKEYWORD;
	}
	
	public ParserRule getKEYWORDRule() {
		return getKEYWORDAccess().getRule();
	}
	
	//STATEMENT_KEYWORD:
	//	'action'
	//	| 'anydata'
	//	| 'anyxml'
	//	| 'argument'
	//	| 'augment'
	//	| 'base'
	//	| 'belongs-to'
	//	| 'bit'
	//	| 'case'
	//	| 'choice'
	//	| 'config'
	//	| 'contact'
	//	| 'container'
	//	| 'default'
	//	| 'description'
	//	| 'enum'
	//	| 'error-app-tag'
	//	| 'error-message'
	//	| 'extension'
	//	| 'deviation'
	//	| 'deviate'
	//	| 'feature'
	//	| 'fraction-digits'
	//	| 'grouping'
	//	| 'identity'
	//	| 'if-feature'
	//	| 'import'
	//	| 'include'
	//	| 'input'
	//	| 'key'
	//	| 'leaf'
	//	| 'leaf-list'
	//	| 'length'
	//	| 'list'
	//	| 'mandatory'
	//	| 'max-elements'
	//	| 'min-elements'
	//	| 'modifier'
	//	| 'module'
	//	| 'must'
	//	| 'namespace'
	//	| 'notification'
	//	| 'ordered-by'
	//	| 'organization'
	//	| 'output'
	//	| 'path'
	//	| 'pattern'
	//	| 'position'
	//	| 'prefix'
	//	| 'presence'
	//	| 'range'
	//	| 'reference'
	//	| 'refine'
	//	| 'require-instance'
	//	| 'revision'
	//	| 'revision-date'
	//	| 'rpc'
	//	| 'status'
	//	| 'submodule'
	//	| 'type'
	//	| 'typedef'
	//	| 'unique'
	//	| 'units'
	//	| 'uses'
	//	| 'value'
	//	| 'when'
	//	| 'yang-version'
	//	| 'yin-element';
	public STATEMENT_KEYWORDElements getSTATEMENT_KEYWORDAccess() {
		return pSTATEMENT_KEYWORD;
	}
	
	public ParserRule getSTATEMENT_KEYWORDRule() {
		return getSTATEMENT_KEYWORDAccess().getRule();
	}
	
	//terminal ID:
	//	'an id';
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal EXTENSION_NAME:
	//	'ID:ID // only valid on statement ctx';
	public TerminalRule getEXTENSION_NAMERule() {
		return tEXTENSION_NAME;
	}
	
	//terminal STRING:
	//	'an unquoted string';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal NUMBER:
	//	'positive integer value';
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal OPERATOR:
	//	'and' | 'or' | 'mod' | 'div' | '*' | '/' | '//' | '|' | '+' | '-' | '=' | '!=' | '<' | '<=' | '>' | '>=';
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal HIDDEN:
	//	'other hidden tokens';
	public TerminalRule getHIDDENRule() {
		return tHIDDEN;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
