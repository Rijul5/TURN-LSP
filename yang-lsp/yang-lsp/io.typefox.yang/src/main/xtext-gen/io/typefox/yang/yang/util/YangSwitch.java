/**
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package io.typefox.yang.yang.util;

import io.typefox.yang.yang.AbbrevAttributeStep;
import io.typefox.yang.yang.AbsolutePath;
import io.typefox.yang.yang.AbstractImport;
import io.typefox.yang.yang.AbstractModule;
import io.typefox.yang.yang.Action;
import io.typefox.yang.yang.Anydata;
import io.typefox.yang.yang.Anyxml;
import io.typefox.yang.yang.Argument;
import io.typefox.yang.yang.Augment;
import io.typefox.yang.yang.Base;
import io.typefox.yang.yang.BelongsTo;
import io.typefox.yang.yang.BinaryOperation;
import io.typefox.yang.yang.BinaryOperator;
import io.typefox.yang.yang.Bit;
import io.typefox.yang.yang.Case;
import io.typefox.yang.yang.Choice;
import io.typefox.yang.yang.Config;
import io.typefox.yang.yang.Contact;
import io.typefox.yang.yang.Container;
import io.typefox.yang.yang.CurrentRef;
import io.typefox.yang.yang.DataSchemaNode;
import io.typefox.yang.yang.Default;
import io.typefox.yang.yang.DescendantSchemaNodeIdentifierReferences;
import io.typefox.yang.yang.Description;
import io.typefox.yang.yang.Deviate;
import io.typefox.yang.yang.Deviation;
import io.typefox.yang.yang.Enumerable;
import io.typefox.yang.yang.ErrorAppTag;
import io.typefox.yang.yang.ErrorMessage;
import io.typefox.yang.yang.Expression;
import io.typefox.yang.yang.Extension;
import io.typefox.yang.yang.Feature;
import io.typefox.yang.yang.FeatureReference;
import io.typefox.yang.yang.FractionDigits;
import io.typefox.yang.yang.Grouping;
import io.typefox.yang.yang.GroupingRef;
import io.typefox.yang.yang.Identity;
import io.typefox.yang.yang.IfFeature;
import io.typefox.yang.yang.Import;
import io.typefox.yang.yang.Include;
import io.typefox.yang.yang.Input;
import io.typefox.yang.yang.Key;
import io.typefox.yang.yang.KeyReference;
import io.typefox.yang.yang.Leaf;
import io.typefox.yang.yang.LeafList;
import io.typefox.yang.yang.Length;
import io.typefox.yang.yang.List;
import io.typefox.yang.yang.Literal;
import io.typefox.yang.yang.Mandatory;
import io.typefox.yang.yang.Max;
import io.typefox.yang.yang.MaxElements;
import io.typefox.yang.yang.Min;
import io.typefox.yang.yang.MinElements;
import io.typefox.yang.yang.Modifier;
import io.typefox.yang.yang.Module;
import io.typefox.yang.yang.Must;
import io.typefox.yang.yang.Namespace;
import io.typefox.yang.yang.Notification;
import io.typefox.yang.yang.Ordered;
import io.typefox.yang.yang.OrderedBy;
import io.typefox.yang.yang.Organization;
import io.typefox.yang.yang.OtherStatement;
import io.typefox.yang.yang.Output;
import io.typefox.yang.yang.ParentRef;
import io.typefox.yang.yang.Path;
import io.typefox.yang.yang.Pattern;
import io.typefox.yang.yang.Position;
import io.typefox.yang.yang.Prefix;
import io.typefox.yang.yang.Presence;
import io.typefox.yang.yang.ProcessingInstruction;
import io.typefox.yang.yang.Range;
import io.typefox.yang.yang.Reference;
import io.typefox.yang.yang.Refinable;
import io.typefox.yang.yang.Refine;
import io.typefox.yang.yang.RelativePath;
import io.typefox.yang.yang.RequireInstance;
import io.typefox.yang.yang.Revision;
import io.typefox.yang.yang.RevisionDate;
import io.typefox.yang.yang.Rpc;
import io.typefox.yang.yang.SchemaNode;
import io.typefox.yang.yang.SchemaNodeIdentifier;
import io.typefox.yang.yang.Statement;
import io.typefox.yang.yang.Status;
import io.typefox.yang.yang.Submodule;
import io.typefox.yang.yang.Type;
import io.typefox.yang.yang.TypeReference;
import io.typefox.yang.yang.Typedef;
import io.typefox.yang.yang.UnaryOperation;
import io.typefox.yang.yang.Unique;
import io.typefox.yang.yang.Units;
import io.typefox.yang.yang.Unknown;
import io.typefox.yang.yang.UnparsedXpath;
import io.typefox.yang.yang.Uses;
import io.typefox.yang.yang.Value;
import io.typefox.yang.yang.When;
import io.typefox.yang.yang.XpathAdditiveOperation;
import io.typefox.yang.yang.XpathAndOperation;
import io.typefox.yang.yang.XpathEqualityOperation;
import io.typefox.yang.yang.XpathExpression;
import io.typefox.yang.yang.XpathFilter;
import io.typefox.yang.yang.XpathFunctionCall;
import io.typefox.yang.yang.XpathLocation;
import io.typefox.yang.yang.XpathMultiplicativeOperation;
import io.typefox.yang.yang.XpathNameTest;
import io.typefox.yang.yang.XpathNodeTest;
import io.typefox.yang.yang.XpathNodeType;
import io.typefox.yang.yang.XpathNumberLiteral;
import io.typefox.yang.yang.XpathOrOperation;
import io.typefox.yang.yang.XpathRelationalOperation;
import io.typefox.yang.yang.XpathStep;
import io.typefox.yang.yang.XpathStringLiteral;
import io.typefox.yang.yang.XpathUnaryOperation;
import io.typefox.yang.yang.XpathUnionOperation;
import io.typefox.yang.yang.XpathVariableReference;
import io.typefox.yang.yang.YangPackage;
import io.typefox.yang.yang.YangVersion;
import io.typefox.yang.yang.YinElement;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see io.typefox.yang.yang.YangPackage
 * @generated
 */
public class YangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static YangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public YangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = YangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case YangPackage.ABSTRACT_MODULE:
      {
        AbstractModule abstractModule = (AbstractModule)theEObject;
        T result = caseAbstractModule(abstractModule);
        if (result == null) result = caseOtherStatement(abstractModule);
        if (result == null) result = caseStatement(abstractModule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ABSTRACT_IMPORT:
      {
        AbstractImport abstractImport = (AbstractImport)theEObject;
        T result = caseAbstractImport(abstractImport);
        if (result == null) result = caseOtherStatement(abstractImport);
        if (result == null) result = caseStatement(abstractImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.SCHEMA_NODE:
      {
        SchemaNode schemaNode = (SchemaNode)theEObject;
        T result = caseSchemaNode(schemaNode);
        if (result == null) result = caseStatement(schemaNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.DATA_SCHEMA_NODE:
      {
        DataSchemaNode dataSchemaNode = (DataSchemaNode)theEObject;
        T result = caseDataSchemaNode(dataSchemaNode);
        if (result == null) result = caseSchemaNode(dataSchemaNode);
        if (result == null) result = caseStatement(dataSchemaNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.OTHER_STATEMENT:
      {
        OtherStatement otherStatement = (OtherStatement)theEObject;
        T result = caseOtherStatement(otherStatement);
        if (result == null) result = caseStatement(otherStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ENUMERABLE:
      {
        Enumerable enumerable = (Enumerable)theEObject;
        T result = caseEnumerable(enumerable);
        if (result == null) result = caseOtherStatement(enumerable);
        if (result == null) result = caseStatement(enumerable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ORDERED:
      {
        Ordered ordered = (Ordered)theEObject;
        T result = caseOrdered(ordered);
        if (result == null) result = caseOtherStatement(ordered);
        if (result == null) result = caseStatement(ordered);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.REFINABLE:
      {
        Refinable refinable = (Refinable)theEObject;
        T result = caseRefinable(refinable);
        if (result == null) result = caseOtherStatement(refinable);
        if (result == null) result = caseStatement(refinable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MODULE:
      {
        Module module = (Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = caseAbstractModule(module);
        if (result == null) result = caseOtherStatement(module);
        if (result == null) result = caseStatement(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.YANG_VERSION:
      {
        YangVersion yangVersion = (YangVersion)theEObject;
        T result = caseYangVersion(yangVersion);
        if (result == null) result = caseOtherStatement(yangVersion);
        if (result == null) result = caseStatement(yangVersion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.NAMESPACE:
      {
        Namespace namespace = (Namespace)theEObject;
        T result = caseNamespace(namespace);
        if (result == null) result = caseOtherStatement(namespace);
        if (result == null) result = caseStatement(namespace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.PREFIX:
      {
        Prefix prefix = (Prefix)theEObject;
        T result = casePrefix(prefix);
        if (result == null) result = caseOtherStatement(prefix);
        if (result == null) result = caseStatement(prefix);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = caseAbstractImport(import_);
        if (result == null) result = caseOtherStatement(import_);
        if (result == null) result = caseStatement(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.REVISION_DATE:
      {
        RevisionDate revisionDate = (RevisionDate)theEObject;
        T result = caseRevisionDate(revisionDate);
        if (result == null) result = caseOtherStatement(revisionDate);
        if (result == null) result = caseStatement(revisionDate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.INCLUDE:
      {
        Include include = (Include)theEObject;
        T result = caseInclude(include);
        if (result == null) result = caseAbstractImport(include);
        if (result == null) result = caseOtherStatement(include);
        if (result == null) result = caseStatement(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ORGANIZATION:
      {
        Organization organization = (Organization)theEObject;
        T result = caseOrganization(organization);
        if (result == null) result = caseOtherStatement(organization);
        if (result == null) result = caseStatement(organization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.CONTACT:
      {
        Contact contact = (Contact)theEObject;
        T result = caseContact(contact);
        if (result == null) result = caseOtherStatement(contact);
        if (result == null) result = caseStatement(contact);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.REVISION:
      {
        Revision revision = (Revision)theEObject;
        T result = caseRevision(revision);
        if (result == null) result = caseOtherStatement(revision);
        if (result == null) result = caseStatement(revision);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.SUBMODULE:
      {
        Submodule submodule = (Submodule)theEObject;
        T result = caseSubmodule(submodule);
        if (result == null) result = caseAbstractModule(submodule);
        if (result == null) result = caseOtherStatement(submodule);
        if (result == null) result = caseStatement(submodule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.BELONGS_TO:
      {
        BelongsTo belongsTo = (BelongsTo)theEObject;
        T result = caseBelongsTo(belongsTo);
        if (result == null) result = caseOtherStatement(belongsTo);
        if (result == null) result = caseStatement(belongsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.TYPEDEF:
      {
        Typedef typedef = (Typedef)theEObject;
        T result = caseTypedef(typedef);
        if (result == null) result = caseSchemaNode(typedef);
        if (result == null) result = caseStatement(typedef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.UNITS:
      {
        Units units = (Units)theEObject;
        T result = caseUnits(units);
        if (result == null) result = caseOtherStatement(units);
        if (result == null) result = caseStatement(units);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.DEFAULT:
      {
        Default default_ = (Default)theEObject;
        T result = caseDefault(default_);
        if (result == null) result = caseOtherStatement(default_);
        if (result == null) result = caseStatement(default_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = caseOtherStatement(type);
        if (result == null) result = caseStatement(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.TYPE_REFERENCE:
      {
        TypeReference typeReference = (TypeReference)theEObject;
        T result = caseTypeReference(typeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.CONTAINER:
      {
        Container container = (Container)theEObject;
        T result = caseContainer(container);
        if (result == null) result = caseDataSchemaNode(container);
        if (result == null) result = caseSchemaNode(container);
        if (result == null) result = caseStatement(container);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MUST:
      {
        Must must = (Must)theEObject;
        T result = caseMust(must);
        if (result == null) result = caseOtherStatement(must);
        if (result == null) result = caseStatement(must);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ERROR_MESSAGE:
      {
        ErrorMessage errorMessage = (ErrorMessage)theEObject;
        T result = caseErrorMessage(errorMessage);
        if (result == null) result = caseOtherStatement(errorMessage);
        if (result == null) result = caseStatement(errorMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ERROR_APP_TAG:
      {
        ErrorAppTag errorAppTag = (ErrorAppTag)theEObject;
        T result = caseErrorAppTag(errorAppTag);
        if (result == null) result = caseOtherStatement(errorAppTag);
        if (result == null) result = caseStatement(errorAppTag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.PRESENCE:
      {
        Presence presence = (Presence)theEObject;
        T result = casePresence(presence);
        if (result == null) result = caseOtherStatement(presence);
        if (result == null) result = caseStatement(presence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.LEAF:
      {
        Leaf leaf = (Leaf)theEObject;
        T result = caseLeaf(leaf);
        if (result == null) result = caseDataSchemaNode(leaf);
        if (result == null) result = caseSchemaNode(leaf);
        if (result == null) result = caseStatement(leaf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MANDATORY:
      {
        Mandatory mandatory = (Mandatory)theEObject;
        T result = caseMandatory(mandatory);
        if (result == null) result = caseOtherStatement(mandatory);
        if (result == null) result = caseStatement(mandatory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.LEAF_LIST:
      {
        LeafList leafList = (LeafList)theEObject;
        T result = caseLeafList(leafList);
        if (result == null) result = caseDataSchemaNode(leafList);
        if (result == null) result = caseSchemaNode(leafList);
        if (result == null) result = caseStatement(leafList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MIN_ELEMENTS:
      {
        MinElements minElements = (MinElements)theEObject;
        T result = caseMinElements(minElements);
        if (result == null) result = caseOtherStatement(minElements);
        if (result == null) result = caseStatement(minElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MAX_ELEMENTS:
      {
        MaxElements maxElements = (MaxElements)theEObject;
        T result = caseMaxElements(maxElements);
        if (result == null) result = caseOtherStatement(maxElements);
        if (result == null) result = caseStatement(maxElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ORDERED_BY:
      {
        OrderedBy orderedBy = (OrderedBy)theEObject;
        T result = caseOrderedBy(orderedBy);
        if (result == null) result = caseOtherStatement(orderedBy);
        if (result == null) result = caseStatement(orderedBy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.LIST:
      {
        List list = (List)theEObject;
        T result = caseList(list);
        if (result == null) result = caseDataSchemaNode(list);
        if (result == null) result = caseSchemaNode(list);
        if (result == null) result = caseStatement(list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.KEY:
      {
        Key key = (Key)theEObject;
        T result = caseKey(key);
        if (result == null) result = caseOtherStatement(key);
        if (result == null) result = caseStatement(key);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.KEY_REFERENCE:
      {
        KeyReference keyReference = (KeyReference)theEObject;
        T result = caseKeyReference(keyReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.DESCENDANT_SCHEMA_NODE_IDENTIFIER_REFERENCES:
      {
        DescendantSchemaNodeIdentifierReferences descendantSchemaNodeIdentifierReferences = (DescendantSchemaNodeIdentifierReferences)theEObject;
        T result = caseDescendantSchemaNodeIdentifierReferences(descendantSchemaNodeIdentifierReferences);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.UNIQUE:
      {
        Unique unique = (Unique)theEObject;
        T result = caseUnique(unique);
        if (result == null) result = caseOtherStatement(unique);
        if (result == null) result = caseDescendantSchemaNodeIdentifierReferences(unique);
        if (result == null) result = caseStatement(unique);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.CHOICE:
      {
        Choice choice = (Choice)theEObject;
        T result = caseChoice(choice);
        if (result == null) result = caseDataSchemaNode(choice);
        if (result == null) result = caseSchemaNode(choice);
        if (result == null) result = caseStatement(choice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.CASE:
      {
        Case case_ = (Case)theEObject;
        T result = caseCase(case_);
        if (result == null) result = caseDataSchemaNode(case_);
        if (result == null) result = caseSchemaNode(case_);
        if (result == null) result = caseStatement(case_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ANYDATA:
      {
        Anydata anydata = (Anydata)theEObject;
        T result = caseAnydata(anydata);
        if (result == null) result = caseDataSchemaNode(anydata);
        if (result == null) result = caseSchemaNode(anydata);
        if (result == null) result = caseStatement(anydata);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ANYXML:
      {
        Anyxml anyxml = (Anyxml)theEObject;
        T result = caseAnyxml(anyxml);
        if (result == null) result = caseDataSchemaNode(anyxml);
        if (result == null) result = caseSchemaNode(anyxml);
        if (result == null) result = caseStatement(anyxml);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.GROUPING:
      {
        Grouping grouping = (Grouping)theEObject;
        T result = caseGrouping(grouping);
        if (result == null) result = caseSchemaNode(grouping);
        if (result == null) result = caseStatement(grouping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.USES:
      {
        Uses uses = (Uses)theEObject;
        T result = caseUses(uses);
        if (result == null) result = caseOtherStatement(uses);
        if (result == null) result = caseStatement(uses);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.REFINE:
      {
        Refine refine = (Refine)theEObject;
        T result = caseRefine(refine);
        if (result == null) result = caseOtherStatement(refine);
        if (result == null) result = caseStatement(refine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.RPC:
      {
        Rpc rpc = (Rpc)theEObject;
        T result = caseRpc(rpc);
        if (result == null) result = caseSchemaNode(rpc);
        if (result == null) result = caseStatement(rpc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.INPUT:
      {
        Input input = (Input)theEObject;
        T result = caseInput(input);
        if (result == null) result = caseSchemaNode(input);
        if (result == null) result = caseStatement(input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.OUTPUT:
      {
        Output output = (Output)theEObject;
        T result = caseOutput(output);
        if (result == null) result = caseSchemaNode(output);
        if (result == null) result = caseStatement(output);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = caseSchemaNode(action);
        if (result == null) result = caseStatement(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.NOTIFICATION:
      {
        Notification notification = (Notification)theEObject;
        T result = caseNotification(notification);
        if (result == null) result = caseSchemaNode(notification);
        if (result == null) result = caseStatement(notification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.AUGMENT:
      {
        Augment augment = (Augment)theEObject;
        T result = caseAugment(augment);
        if (result == null) result = caseOtherStatement(augment);
        if (result == null) result = caseStatement(augment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.IDENTITY:
      {
        Identity identity = (Identity)theEObject;
        T result = caseIdentity(identity);
        if (result == null) result = caseSchemaNode(identity);
        if (result == null) result = caseStatement(identity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.BASE:
      {
        Base base = (Base)theEObject;
        T result = caseBase(base);
        if (result == null) result = caseOtherStatement(base);
        if (result == null) result = caseStatement(base);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.EXTENSION:
      {
        Extension extension = (Extension)theEObject;
        T result = caseExtension(extension);
        if (result == null) result = caseSchemaNode(extension);
        if (result == null) result = caseStatement(extension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ARGUMENT:
      {
        Argument argument = (Argument)theEObject;
        T result = caseArgument(argument);
        if (result == null) result = caseOtherStatement(argument);
        if (result == null) result = caseStatement(argument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.YIN_ELEMENT:
      {
        YinElement yinElement = (YinElement)theEObject;
        T result = caseYinElement(yinElement);
        if (result == null) result = caseOtherStatement(yinElement);
        if (result == null) result = caseStatement(yinElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = caseSchemaNode(feature);
        if (result == null) result = caseStatement(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.IF_FEATURE:
      {
        IfFeature ifFeature = (IfFeature)theEObject;
        T result = caseIfFeature(ifFeature);
        if (result == null) result = caseOtherStatement(ifFeature);
        if (result == null) result = caseStatement(ifFeature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.DEVIATION:
      {
        Deviation deviation = (Deviation)theEObject;
        T result = caseDeviation(deviation);
        if (result == null) result = caseOtherStatement(deviation);
        if (result == null) result = caseStatement(deviation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.DEVIATE:
      {
        Deviate deviate = (Deviate)theEObject;
        T result = caseDeviate(deviate);
        if (result == null) result = caseOtherStatement(deviate);
        if (result == null) result = caseStatement(deviate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.CONFIG:
      {
        Config config = (Config)theEObject;
        T result = caseConfig(config);
        if (result == null) result = caseOtherStatement(config);
        if (result == null) result = caseStatement(config);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.STATUS:
      {
        Status status = (Status)theEObject;
        T result = caseStatus(status);
        if (result == null) result = caseOtherStatement(status);
        if (result == null) result = caseStatement(status);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.DESCRIPTION:
      {
        Description description = (Description)theEObject;
        T result = caseDescription(description);
        if (result == null) result = caseOtherStatement(description);
        if (result == null) result = caseStatement(description);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = caseOtherStatement(reference);
        if (result == null) result = caseStatement(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.WHEN:
      {
        When when = (When)theEObject;
        T result = caseWhen(when);
        if (result == null) result = caseOtherStatement(when);
        if (result == null) result = caseStatement(when);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.RANGE:
      {
        Range range = (Range)theEObject;
        T result = caseRange(range);
        if (result == null) result = caseRefinable(range);
        if (result == null) result = caseOtherStatement(range);
        if (result == null) result = caseStatement(range);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.FRACTION_DIGITS:
      {
        FractionDigits fractionDigits = (FractionDigits)theEObject;
        T result = caseFractionDigits(fractionDigits);
        if (result == null) result = caseOtherStatement(fractionDigits);
        if (result == null) result = caseStatement(fractionDigits);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.LENGTH:
      {
        Length length = (Length)theEObject;
        T result = caseLength(length);
        if (result == null) result = caseRefinable(length);
        if (result == null) result = caseOtherStatement(length);
        if (result == null) result = caseStatement(length);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = caseOtherStatement(pattern);
        if (result == null) result = caseStatement(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MODIFIER:
      {
        Modifier modifier = (Modifier)theEObject;
        T result = caseModifier(modifier);
        if (result == null) result = caseOtherStatement(modifier);
        if (result == null) result = caseStatement(modifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ENUM:
      {
        io.typefox.yang.yang.Enum enum_ = (io.typefox.yang.yang.Enum)theEObject;
        T result = caseEnum(enum_);
        if (result == null) result = caseEnumerable(enum_);
        if (result == null) result = caseOtherStatement(enum_);
        if (result == null) result = caseStatement(enum_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = caseOrdered(value);
        if (result == null) result = caseOtherStatement(value);
        if (result == null) result = caseStatement(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.BIT:
      {
        Bit bit = (Bit)theEObject;
        T result = caseBit(bit);
        if (result == null) result = caseEnumerable(bit);
        if (result == null) result = caseOtherStatement(bit);
        if (result == null) result = caseStatement(bit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.POSITION:
      {
        Position position = (Position)theEObject;
        T result = casePosition(position);
        if (result == null) result = caseOrdered(position);
        if (result == null) result = caseOtherStatement(position);
        if (result == null) result = caseStatement(position);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.PATH:
      {
        Path path = (Path)theEObject;
        T result = casePath(path);
        if (result == null) result = caseOtherStatement(path);
        if (result == null) result = caseStatement(path);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.REQUIRE_INSTANCE:
      {
        RequireInstance requireInstance = (RequireInstance)theEObject;
        T result = caseRequireInstance(requireInstance);
        if (result == null) result = caseOtherStatement(requireInstance);
        if (result == null) result = caseStatement(requireInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.UNKNOWN:
      {
        Unknown unknown = (Unknown)theEObject;
        T result = caseUnknown(unknown);
        if (result == null) result = caseOtherStatement(unknown);
        if (result == null) result = caseStatement(unknown);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.SCHEMA_NODE_IDENTIFIER:
      {
        SchemaNodeIdentifier schemaNodeIdentifier = (SchemaNodeIdentifier)theEObject;
        T result = caseSchemaNodeIdentifier(schemaNodeIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.GROUPING_REF:
      {
        GroupingRef groupingRef = (GroupingRef)theEObject;
        T result = caseGroupingRef(groupingRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_EXPRESSION:
      {
        XpathExpression xpathExpression = (XpathExpression)theEObject;
        T result = caseXpathExpression(xpathExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_STEP:
      {
        XpathStep xpathStep = (XpathStep)theEObject;
        T result = caseXpathStep(xpathStep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_NODE_TEST:
      {
        XpathNodeTest xpathNodeTest = (XpathNodeTest)theEObject;
        T result = caseXpathNodeTest(xpathNodeTest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_NAME_TEST:
      {
        XpathNameTest xpathNameTest = (XpathNameTest)theEObject;
        T result = caseXpathNameTest(xpathNameTest);
        if (result == null) result = caseXpathNodeTest(xpathNameTest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.BINARY_OPERATOR:
      {
        BinaryOperator binaryOperator = (BinaryOperator)theEObject;
        T result = caseBinaryOperator(binaryOperator);
        if (result == null) result = caseExpression(binaryOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.FEATURE_REFERENCE:
      {
        FeatureReference featureReference = (FeatureReference)theEObject;
        T result = caseFeatureReference(featureReference);
        if (result == null) result = caseExpression(featureReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.UNARY_OPERATION:
      {
        UnaryOperation unaryOperation = (UnaryOperation)theEObject;
        T result = caseUnaryOperation(unaryOperation);
        if (result == null) result = caseExpression(unaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.BINARY_OPERATION:
      {
        BinaryOperation binaryOperation = (BinaryOperation)theEObject;
        T result = caseBinaryOperation(binaryOperation);
        if (result == null) result = caseExpression(binaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseExpression(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MIN:
      {
        Min min = (Min)theEObject;
        T result = caseMin(min);
        if (result == null) result = caseExpression(min);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.MAX:
      {
        Max max = (Max)theEObject;
        T result = caseMax(max);
        if (result == null) result = caseExpression(max);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.UNPARSED_XPATH:
      {
        UnparsedXpath unparsedXpath = (UnparsedXpath)theEObject;
        T result = caseUnparsedXpath(unparsedXpath);
        if (result == null) result = caseXpathExpression(unparsedXpath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_OR_OPERATION:
      {
        XpathOrOperation xpathOrOperation = (XpathOrOperation)theEObject;
        T result = caseXpathOrOperation(xpathOrOperation);
        if (result == null) result = caseXpathExpression(xpathOrOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_AND_OPERATION:
      {
        XpathAndOperation xpathAndOperation = (XpathAndOperation)theEObject;
        T result = caseXpathAndOperation(xpathAndOperation);
        if (result == null) result = caseXpathExpression(xpathAndOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_EQUALITY_OPERATION:
      {
        XpathEqualityOperation xpathEqualityOperation = (XpathEqualityOperation)theEObject;
        T result = caseXpathEqualityOperation(xpathEqualityOperation);
        if (result == null) result = caseXpathExpression(xpathEqualityOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_RELATIONAL_OPERATION:
      {
        XpathRelationalOperation xpathRelationalOperation = (XpathRelationalOperation)theEObject;
        T result = caseXpathRelationalOperation(xpathRelationalOperation);
        if (result == null) result = caseXpathExpression(xpathRelationalOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_ADDITIVE_OPERATION:
      {
        XpathAdditiveOperation xpathAdditiveOperation = (XpathAdditiveOperation)theEObject;
        T result = caseXpathAdditiveOperation(xpathAdditiveOperation);
        if (result == null) result = caseXpathExpression(xpathAdditiveOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_MULTIPLICATIVE_OPERATION:
      {
        XpathMultiplicativeOperation xpathMultiplicativeOperation = (XpathMultiplicativeOperation)theEObject;
        T result = caseXpathMultiplicativeOperation(xpathMultiplicativeOperation);
        if (result == null) result = caseXpathExpression(xpathMultiplicativeOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_UNARY_OPERATION:
      {
        XpathUnaryOperation xpathUnaryOperation = (XpathUnaryOperation)theEObject;
        T result = caseXpathUnaryOperation(xpathUnaryOperation);
        if (result == null) result = caseXpathExpression(xpathUnaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_UNION_OPERATION:
      {
        XpathUnionOperation xpathUnionOperation = (XpathUnionOperation)theEObject;
        T result = caseXpathUnionOperation(xpathUnionOperation);
        if (result == null) result = caseXpathExpression(xpathUnionOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_LOCATION:
      {
        XpathLocation xpathLocation = (XpathLocation)theEObject;
        T result = caseXpathLocation(xpathLocation);
        if (result == null) result = caseXpathExpression(xpathLocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_FILTER:
      {
        XpathFilter xpathFilter = (XpathFilter)theEObject;
        T result = caseXpathFilter(xpathFilter);
        if (result == null) result = caseXpathExpression(xpathFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_VARIABLE_REFERENCE:
      {
        XpathVariableReference xpathVariableReference = (XpathVariableReference)theEObject;
        T result = caseXpathVariableReference(xpathVariableReference);
        if (result == null) result = caseXpathExpression(xpathVariableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_STRING_LITERAL:
      {
        XpathStringLiteral xpathStringLiteral = (XpathStringLiteral)theEObject;
        T result = caseXpathStringLiteral(xpathStringLiteral);
        if (result == null) result = caseXpathExpression(xpathStringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_NUMBER_LITERAL:
      {
        XpathNumberLiteral xpathNumberLiteral = (XpathNumberLiteral)theEObject;
        T result = caseXpathNumberLiteral(xpathNumberLiteral);
        if (result == null) result = caseXpathExpression(xpathNumberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_FUNCTION_CALL:
      {
        XpathFunctionCall xpathFunctionCall = (XpathFunctionCall)theEObject;
        T result = caseXpathFunctionCall(xpathFunctionCall);
        if (result == null) result = caseXpathExpression(xpathFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.RELATIVE_PATH:
      {
        RelativePath relativePath = (RelativePath)theEObject;
        T result = caseRelativePath(relativePath);
        if (result == null) result = caseXpathExpression(relativePath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ABSOLUTE_PATH:
      {
        AbsolutePath absolutePath = (AbsolutePath)theEObject;
        T result = caseAbsolutePath(absolutePath);
        if (result == null) result = caseXpathExpression(absolutePath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.CURRENT_REF:
      {
        CurrentRef currentRef = (CurrentRef)theEObject;
        T result = caseCurrentRef(currentRef);
        if (result == null) result = caseXpathStep(currentRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.PARENT_REF:
      {
        ParentRef parentRef = (ParentRef)theEObject;
        T result = caseParentRef(parentRef);
        if (result == null) result = caseXpathStep(parentRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.ABBREV_ATTRIBUTE_STEP:
      {
        AbbrevAttributeStep abbrevAttributeStep = (AbbrevAttributeStep)theEObject;
        T result = caseAbbrevAttributeStep(abbrevAttributeStep);
        if (result == null) result = caseXpathStep(abbrevAttributeStep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.XPATH_NODE_TYPE:
      {
        XpathNodeType xpathNodeType = (XpathNodeType)theEObject;
        T result = caseXpathNodeType(xpathNodeType);
        if (result == null) result = caseXpathNodeTest(xpathNodeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case YangPackage.PROCESSING_INSTRUCTION:
      {
        ProcessingInstruction processingInstruction = (ProcessingInstruction)theEObject;
        T result = caseProcessingInstruction(processingInstruction);
        if (result == null) result = caseXpathNodeTest(processingInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractModule(AbstractModule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractImport(AbstractImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Schema Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Schema Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchemaNode(SchemaNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Schema Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Schema Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataSchemaNode(DataSchemaNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Other Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Other Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOtherStatement(OtherStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumerable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumerable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerable(Enumerable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrdered(Ordered object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Refinable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Refinable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefinable(Refinable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Version</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Version</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYangVersion(YangVersion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Namespace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Namespace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamespace(Namespace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefix(Prefix object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Revision Date</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Revision Date</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRevisionDate(RevisionDate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInclude(Include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Organization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Organization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrganization(Organization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contact</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contact</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContact(Contact object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Revision</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Revision</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRevision(Revision object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Submodule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Submodule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubmodule(Submodule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Belongs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Belongs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBelongsTo(BelongsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Typedef</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Typedef</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypedef(Typedef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Units</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Units</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnits(Units object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Default</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Default</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefault(Default object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeReference(TypeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Container</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Container</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContainer(Container object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Must</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Must</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMust(Must object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Error Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Error Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseErrorMessage(ErrorMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Error App Tag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Error App Tag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseErrorAppTag(ErrorAppTag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Presence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Presence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePresence(Presence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Leaf</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Leaf</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeaf(Leaf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mandatory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mandatory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMandatory(Mandatory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Leaf List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Leaf List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeafList(LeafList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Min Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Min Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinElements(MinElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMaxElements(MaxElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered By</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered By</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedBy(OrderedBy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseList(List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKey(Key object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyReference(KeyReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Descendant Schema Node Identifier References</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Descendant Schema Node Identifier References</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDescendantSchemaNodeIdentifierReferences(DescendantSchemaNodeIdentifierReferences object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unique</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unique</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnique(Unique object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Choice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Choice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChoice(Choice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCase(Case object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Anydata</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Anydata</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnydata(Anydata object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Anyxml</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Anyxml</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnyxml(Anyxml object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Grouping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Grouping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGrouping(Grouping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Uses</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Uses</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUses(Uses object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Refine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Refine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefine(Refine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rpc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rpc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRpc(Rpc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInput(Input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutput(Output object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Notification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Notification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotification(Notification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Augment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Augment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAugment(Augment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentity(Identity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBase(Base object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtension(Extension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgument(Argument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Yin Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Yin Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYinElement(YinElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfFeature(IfFeature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Deviation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Deviation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeviation(Deviation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Deviate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Deviate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeviate(Deviate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Config</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Config</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfig(Config object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Status</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Status</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatus(Status object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDescription(Description object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>When</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>When</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhen(When object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRange(Range object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fraction Digits</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fraction Digits</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFractionDigits(FractionDigits object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLength(Length object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModifier(Modifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnum(io.typefox.yang.yang.Enum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBit(Bit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Position</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Position</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePosition(Position object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePath(Path object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Require Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Require Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequireInstance(RequireInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unknown</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unknown</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnknown(Unknown object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Schema Node Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Schema Node Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchemaNodeIdentifier(SchemaNodeIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Grouping Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Grouping Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroupingRef(GroupingRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathExpression(XpathExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathStep(XpathStep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Node Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Node Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathNodeTest(XpathNodeTest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Name Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Name Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathNameTest(XpathNameTest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryOperator(BinaryOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatureReference(FeatureReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryOperation(UnaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryOperation(BinaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Min</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Min</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMin(Min object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Max</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Max</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMax(Max object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unparsed Xpath</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unparsed Xpath</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnparsedXpath(UnparsedXpath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Or Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Or Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathOrOperation(XpathOrOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath And Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath And Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathAndOperation(XpathAndOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Equality Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Equality Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathEqualityOperation(XpathEqualityOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Relational Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Relational Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathRelationalOperation(XpathRelationalOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Additive Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Additive Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathAdditiveOperation(XpathAdditiveOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Multiplicative Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Multiplicative Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathMultiplicativeOperation(XpathMultiplicativeOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Unary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Unary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathUnaryOperation(XpathUnaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Union Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Union Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathUnionOperation(XpathUnionOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Location</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Location</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathLocation(XpathLocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathFilter(XpathFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathVariableReference(XpathVariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathStringLiteral(XpathStringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathNumberLiteral(XpathNumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathFunctionCall(XpathFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relative Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relative Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelativePath(RelativePath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Absolute Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Absolute Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbsolutePath(AbsolutePath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentRef(CurrentRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parent Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parent Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParentRef(ParentRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abbrev Attribute Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abbrev Attribute Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbbrevAttributeStep(AbbrevAttributeStep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Xpath Node Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Xpath Node Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXpathNodeType(XpathNodeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Processing Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Processing Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessingInstruction(ProcessingInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //YangSwitch
